<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oaas on Unladen swallow</title>
    <link>https://blog.owulveryck.info/topics/oaas.html</link>
    <description>Recent content in Oaas on Unladen swallow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>olivier.wulveryck@gmail.com (Olivier Wulveryck)</managingEditor>
    <webMaster>olivier.wulveryck@gmail.com (Olivier Wulveryck)</webMaster>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Mon, 07 Dec 2015 08:48:20 +0000</lastBuildDate>
    
	<atom:link href="https://blog.owulveryck.info/topics/oaas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OaaS orchestrator as a service - part 1</title>
      <link>https://blog.owulveryck.info/2015/12/07/oaas-orchestrator-as-a-service---part-1.html</link>
      <pubDate>Mon, 07 Dec 2015 08:48:20 +0000</pubDate>
      <author>olivier.wulveryck@gmail.com (Olivier Wulveryck)</author>
      <guid>https://blog.owulveryck.info/2015/12/07/oaas-orchestrator-as-a-service---part-1.html</guid>
      <description> In a previous post I have setup and orchestrator that takes a digraph as input (via its adjacency matrix).
In this post I will implement an API, so the orchestrator will be transformed into a web service.
The documentation of the API The API will be self documented with swagger (see this post for an &amp;ldquo;introduction&amp;rdquo;).
The verbs I will use only 3 verbs by now:
 POST : to send the digraph representation to the orchestrator engine GET : to get the actual status of the execution workflow DELETE : delete to obviously delete an execution task  The JSON objects The Swagger interface The implementation </description>
    </item>
    
  </channel>
</rss>