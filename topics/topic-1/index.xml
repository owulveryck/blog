<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Topic 1 on Olivier Wulveryck&#39;s Tech Blog</title>
    <link>http://dev.owulveryck.info/blog/topics/topic-1/</link>
    <description>Recent content in Topic 1 on Olivier Wulveryck&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>olivier.wulveryck@gmail.com (Olivier Wulveryck)</managingEditor>
    <webMaster>olivier.wulveryck@gmail.com (Olivier Wulveryck)</webMaster>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Thu, 31 Mar 2016 10:23:02 +0200</lastBuildDate>
    <atom:link href="http://dev.owulveryck.info/blog/topics/topic-1/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RVM on an USB stick on a Chromebook</title>
      <link>http://dev.owulveryck.info/blog/2016/03/31/rvm-on-an-usb-stick-on-a-chromebook/</link>
      <pubDate>Thu, 31 Mar 2016 10:23:02 +0200</pubDate>
      <author>olivier.wulveryck@gmail.com (Olivier Wulveryck)</author>
      <guid>http://dev.owulveryck.info/blog/2016/03/31/rvm-on-an-usb-stick-on-a-chromebook/</guid>
      <description>

&lt;h1 id=&#34;introduction:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Introduction&lt;/h1&gt;

&lt;h4 id=&#34;opening-remarks:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Opening remarks&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not a Ruby developer, and I&amp;rsquo;m heavily discovering the ecosystem by now.
This are my notes, and if anything seems wrong to you, do not hesitate to send me remarks.&lt;/p&gt;

&lt;h4 id=&#34;the-scenario:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;The scenario&lt;/h4&gt;

&lt;p&gt;For testing purpose, I wanted to play with vagrant-aws and more generally with ruby on my Chromebook.&lt;/p&gt;

&lt;p&gt;Vagrant does not support &lt;em&gt;rubygems&lt;/em&gt; as installation method anymore (&lt;a href=&#34;http://mitchellh.com/abandoning-rubygems&#34;&gt;see Mitchell Hashimoto&amp;rsquo;s post&lt;/a&gt;)
and of course, there is no binary distribution available for the Chromebook.&lt;/p&gt;

&lt;p&gt;So I have to install it from the sources.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/mitchellh/vagrant/wiki/Installing-Vagrant-from-Source&#34;&gt;documentation&lt;/a&gt; says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do &lt;strong&gt;NOT&lt;/strong&gt; use the system Ruby - use a Ruby version manager like rvm, chruby, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alright, anyway I don&amp;rsquo;t want to mess with my system and break Homebrew, so using RVM seems to be a good idea.&lt;/p&gt;

&lt;h2 id=&#34;installing-rvm:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Installing RVM&lt;/h2&gt;

&lt;p&gt;The RVM installation is relatively easy; simply running &lt;code&gt;curl -sSL https://get.rvm.io | bash&lt;/code&gt; does the trick.
And then those commands make ruby 2.3.0 available via rvm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ~/.rvm/scripts/rvm  
$ rvm install 2.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stupid trick here is that everything is installed in my $HOME directory, and as my Chromebook is short on disk space: FS full !&lt;/p&gt;

&lt;p&gt;Too bad.&lt;/p&gt;

&lt;h2 id=&#34;using-a-usb-stick:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Using a USB stick&lt;/h2&gt;

&lt;p&gt;So my idea is to install the RVM suite onto a USB stick (because with me I don&amp;rsquo;t have any SDHC card available).&lt;/p&gt;

&lt;h3 id=&#34;preparing-the-stick:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Preparing the stick&lt;/h3&gt;

&lt;p&gt;At first, the USB stick must be formatted in extendX (ext4) in order to be able to use symlinks, correct ownership etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo mkfs.ext4 -L Lexar /dev/sda1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I&amp;rsquo;ve found that avoiding spaces in the volume name was good for rvm.&lt;/p&gt;

&lt;p&gt;Once connected on the Chromebook, it&amp;rsquo;s automatically mounted on &lt;code&gt;/media/removable/Lexar&lt;/code&gt;.
The problem are the options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/dev/sda1 on /media/removable/Lexar type ext4 (rw,nosuid,nodev,noexec,relatime,dirsync,data=ordered)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the most problematic is &lt;code&gt;noexec&lt;/code&gt; because I want to install executables in it.&lt;/p&gt;

&lt;p&gt;So what I did was simply:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo mount -o remount /dev/sda1 /media/removable/Lexar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and that did the trick.&lt;/p&gt;

&lt;h2 id=&#34;installing-rvm-on-the-usb:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Installing RVM on the USB&lt;/h2&gt;

&lt;p&gt;I will install rvm into &lt;code&gt;/media/removable/Lexar/rvm&lt;/code&gt;. In order to avoid any ownership and permission problem I did:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir /media/removable/Lexar/rvm
chown chronos:chronos /media/removable/Lexar/rvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then I created a simple &lt;code&gt;~/.rvmrc&lt;/code&gt; file as indicated in the documentation with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cat ~/.rvmrc                                          
$ export rvm_path=/media/removable/Lexar/rvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also included this in my &lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [ -s &amp;quot;$HOME/.rvmrc&amp;quot;   ]; then
    source &amp;quot;$HOME/.rvmrc&amp;quot;
fi # to have $rvm_path defined if set
if [ -s &amp;quot;${rvm_path-$HOME/.rvm}/scripts/rvm&amp;quot;   ]; then
    source &amp;quot;${rvm_path-$HOME/.rvm}/scripts/rvm&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-rvm-1:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Installing rvm&lt;/h2&gt;

&lt;p&gt;the command I executed were then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -sSL https://get.rvm.io | bash
$ source /media/removable/Lexar/rvm/scripts/rvm
$ rvm autolibs enable
$ rvm get stable
$ rvm install 2.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that did the trick&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm list

rvm rubies

=* ruby-2.3.0 [ x84_64 ]

# =&amp;gt; - current
# =* - current &amp;amp;&amp;amp; default
#  * - default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing-with-vagrant:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Testing with vagrant&lt;/h2&gt;

&lt;h3 id=&#34;cloning-the-vagrant-sources:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Cloning the vagrant sources&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo mkdir /media/removable/Lexar/tools
$ sudo chown chronos:chronos /media/removable/Lexar/tools
$ cd /media/removable/Lexar/tools
$ git clone https://github.com/mitchellh/vagrant.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;preparing-the-rvm-file-for-vagrant:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Preparing the rvm file for vagrant&lt;/h3&gt;

&lt;p&gt;To use the ruby 2.3.0 (that I&amp;rsquo;ve installed before) with vagrant, I need to create a .rvmrc in the vagrant directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /media/removable/Lexar/tools/vagrant
$ rvm --rvmrc --create 2.3.0@vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-bundler:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Installing bundler&lt;/h3&gt;

&lt;p&gt;The bundler version that is supported by vagrant must be &amp;lt;= 1.5.2 as written in the &lt;code&gt;Gemfile&lt;/code&gt;. So I&amp;rsquo;m installing version
1.5.2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd /media/removable/Lexar/tools/vagrant
$ source .rcmrv
$ gem install bundler -v 1.5.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compiling-vagrant:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Compiling vagrant&lt;/h3&gt;

&lt;p&gt;Back to the vagrant documentation, what I must do is now to &amp;ldquo;compile it&amp;rdquo;. To do so, the advice is to run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle _1.5.2_ install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(just in case several bundler are present )&lt;/p&gt;

&lt;p&gt;I faced this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;NoMethodError: undefined method `spec&#39; for nil:NilClass
Did you mean?  inspect
An error occurred while installing vagrant (1.8.2.dev), and Bundler cannot continue.
Make sure that `gem install vagrant -v &#39;1.8.2.dev&#39;` succeeds before bundling.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to google, this may be an issue with the version of bundler I&amp;rsquo;m using.
As I cannot upgrade the bundler because of vagrant, I&amp;rsquo;ve decided to take a chance and use
a lower version of Ruby&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rvm install 2.2.0
$ rvm --rvmrc --create 2.2.0@vagrant
$ source .rvmrc
# and reinstalling bundler
$ gem install bundler -v 1.5.2            
$ bundle _1.5.2_ install
...
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;voilà:39e2516bb4b456809312ff15c8c6eea2&#34;&gt;Voilà!&lt;/h1&gt;

&lt;p&gt;I can now use vagrant installed fully on the USB stick with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle _1.5.2_ exec vagrant
Vagrant appears to be running in a Bundler environment. Your 
existing Gemfile will be used. Vagrant will not auto-load any plugins
installed with `vagrant plugin`. Vagrant will autoload any plugins in
the &#39;plugins&#39; group in your Gemfile. You can force Vagrant to take over
with VAGRANT_FORCE_BUNDLER.

You appear to be running Vagrant outside of the official installers.
Note that the installers are what ensure that Vagrant has all required
dependencies, and Vagrant assumes that these dependencies exist. By
running outside of the installer environment, Vagrant may not function
properly. To remove this warning, install Vagrant using one of the
official packages from vagrantup.com.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it for this post; next I will try to install vagrant-aws and play a little bit with it.&lt;/p&gt;

&lt;p&gt;stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is there a Markov model hidden in the choreography?</title>
      <link>http://dev.owulveryck.info/blog/2016/02/29/is-there-a-markov-model-hidden-in-the-choreography/</link>
      <pubDate>Mon, 29 Feb 2016 20:55:01 +0100</pubDate>
      <author>olivier.wulveryck@gmail.com (Olivier Wulveryck)</author>
      <guid>http://dev.owulveryck.info/blog/2016/02/29/is-there-a-markov-model-hidden-in-the-choreography/</guid>
      <description>

&lt;h1 id=&#34;introduction:8ff21f56669823562f41e250370cd700&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In my last post I introduced the notion of choreography as a way to deploy an manage application.
It could be possible to implement self-healing, elasticity and in a certain extent
self awareness.&lt;/p&gt;

&lt;p&gt;To do so, we must not rely on the &lt;em&gt;certainty&lt;/em&gt; and the &lt;em&gt;determinism&lt;/em&gt; of the automated tasks.
&lt;em&gt;Mark Burgess&lt;/em&gt; explains in his book &lt;a href=&#34;http://http://www.amazon.com/gp/product/1491923075/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=1944687522&amp;amp;pf_rd_s=lpo-top-stripe-1&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=1492389161&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_r=1BRFTEAZ2RRQ8M77MZ0C&#34;&gt;in search of certainty&lt;/a&gt; that none should consider the command and control anymore.&lt;/p&gt;

&lt;p&gt;Actually we grew up with the idea that a computer will do whatever we told him to.
The truth is that it simply don&amp;rsquo;t. If that sounds astonishing to you, just consider the famous bug.
A bug is a little insect that will avoid any programmed behaviour to act as it should.&lt;/p&gt;

&lt;p&gt;In a lot of wide spread software, we find &lt;em&gt;if-then-else&lt;/em&gt; or &lt;em&gt;try-catch&lt;/em&gt; statements.
Of course one could argue that the purpose of this conditional executionis is to deal with different scenarii, which is true, but indeed,
the keyword is &lt;em&gt;try&lt;/em&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;back-to-the-choreography:8ff21f56669823562f41e250370cd700&#34;&gt;Back to the choreography&lt;/h2&gt;

&lt;p&gt;In the choreography principle, the automation is performed by a set of dancer that acts on their own. Actually, the most logical way
to program it, is to let them know about the execution plan, and assume that everything will run as expected.&lt;/p&gt;

&lt;p&gt;What I would like to study is simply that deployement without knowing the deployement plan.
The nodes would try to perform the task, and depending on the event they receive, they learn and enhance their probability of success.&lt;/p&gt;

&lt;h3 id=&#34;first-problem:8ff21f56669823562f41e250370cd700&#34;&gt;First problem&lt;/h3&gt;

&lt;p&gt;First, I&amp;rsquo;m considering a single node $A$  which can be in three states $\alpha$, $\beta$ and $\gamma$.
Let&amp;rsquo;s $S$ be the set of states such as $S = \left\{\alpha, \beta, \gamma\right\}$&lt;/p&gt;

&lt;h4 id=&#34;actually-knowing-what-s-expected:8ff21f56669823562f41e250370cd700&#34;&gt;Actually knowing what&amp;rsquo;s expected&lt;/h4&gt;

&lt;p&gt;The expected execution is: $ \alpha \mapsto \beta \mapsto \gamma$&lt;/p&gt;

&lt;p&gt;therefore, the transition matrix should be:&lt;/p&gt;

&lt;p&gt;$$
P=\begin{pmatrix}
0 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1 \\
0 &amp;amp; 0 &amp;amp; 0
\end{pmatrix}
$$&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s represent it with GNU-R (see &lt;a href=&#34;http://www.r-bloggers.com/getting-started-with-markov-chains/&#34;&gt;this blog post&lt;/a&gt;
for an introduction of markov reprentation with this software)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; library(expm)
&amp;gt; library(markovchain)
&amp;gt; library(diagram)
&amp;gt; library(pracma)
&amp;gt; stateNames &amp;lt;- c(&amp;quot;Alpha&amp;quot;,&amp;quot;Beta&amp;quot;,&amp;quot;Gamma&amp;quot;)
&amp;gt; ExecutionPlan &amp;lt;- matrix(c(0,1,0,0,0,1,0,0,0),nrow=3, byrow=TRUE)
&amp;gt; row.names(ExecutionPlan) &amp;lt;- stateNames; colnames(ExecutionPlan) &amp;lt;- stateNames
&amp;gt; ExecutionPlan
      Alpha Beta Gamma
      Alpha     0    1     0
      Beta      0    0     1
      Gamma     0    0     0
&amp;gt; svg(&amp;quot;ExecutionPlan.svg&amp;quot;)
&amp;gt; plotmat(ExecutionPlan,pos = c(1,2), 
         lwd = 1, box.lwd = 2, 
         cex.txt = 0.8, 
         box.size = 0.1, 
         box.type = &amp;quot;circle&amp;quot;, 
         box.prop = 0.5,
         box.col = &amp;quot;light yellow&amp;quot;,
         arr.length=.1,
         arr.width=.1,
         self.cex = .4,
         self.shifty = -.01,
         self.shiftx = .13,
         main = &amp;quot;&amp;quot;)
&amp;gt; dev.off()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is represented by:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dev.owulveryck.info/blog/blog/assets/images/ExecutionPlan.svg&#34; alt=&#34;Representation&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;knowing-part-of-the-plan:8ff21f56669823562f41e250370cd700&#34;&gt;Knowing part of the plan&amp;hellip;&lt;/h4&gt;

&lt;p&gt;Now let&amp;rsquo;s consider a different scenario. I assume now that the only known hypothesis is that we cannot go
from $\alpha$ to $\gamma$ and vice-versa, but for the rest, the execution may refer to this transition matrix:&lt;/p&gt;

&lt;p&gt;$
P=\begin{pmatrix}
\frac{1}{2} &amp;amp; \frac{1}{2} &amp;amp; 0 \\
\frac{1}{3} &amp;amp; \frac{1}{3} &amp;amp; \frac{1}{3}  \\
0 &amp;amp; \frac{1}{2} &amp;amp; \frac{1}{2}
\end{pmatrix}
$
which is represented this way &lt;img src=&#34;http://dev.owulveryck.info/blog/blog/assets/images/ExecutionPlan2.svg&#34; alt=&#34;Representation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The transition matrix is regular - we can see, for example that $P^2$ contains all non nil numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; ExecutionPlan %^% 2
                Alpha     Beta      Gamma
          Alpha 0.4166667 0.4166667 0.1666667
          Beta  0.2777778 0.4444444 0.2777778
          Gamma 0.1666667 0.4166667 0.4166667
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore, Makov theorem says that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;as n approaches infinity, $P^n = S$ where $S$ is a matrix of the form $[\mathbf{v}, \mathbf{v},&amp;hellip;,\mathbf{v}]$, where $\mathbf{v}$ being a constant vector&lt;/li&gt;
&lt;li&gt;let $X$ be any state vector, then we have $\lim_{n\to \infty}P^nX = \mathbf{v}$ where $\mathbf{v}$ is a fixed probability vector (the sum of its entries = 1), all whose entries are positives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can look for vector $\mathbf{v}$ (also known as the &lt;strong&gt;steady-state vector of the system&lt;/strong&gt;) to see if there is a good chance that our &lt;em&gt;finite state machine&lt;/em&gt; would converged to the desired state $\gamma$.&lt;/p&gt;

&lt;h3 id=&#34;evaluation-of-the-steady-state-vector:8ff21f56669823562f41e250370cd700&#34;&gt;Evaluation of the steady-state vector&lt;/h3&gt;

&lt;p&gt;Now since $P^{n+1}=P*P^n$ and that both $P^{n+1}$ and $P^n$  approach $S$, we have $S=P*S$.&lt;/p&gt;

&lt;p&gt;Note that any column of this matrix equation gives $P\mathbf{v}=\mathbf{v}$. Therefore, the steady-state vector of a regular Markov chain with transition matrix $P$ is the unique probability vector $\mathbf{v}$ satisfying $P\mathbf{v}=\mathbf{v}$.&lt;/p&gt;

&lt;p&gt;To find the steady state vector, we must solve the equation: $P\mathbf{v}=\mathbf{v}$. $\mathbf{v}$ is actually an eigenvector for an eigenvalue $\lambda = 1$.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note from &lt;a href=&#34;https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors&#34;&gt;wikipedia&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In linear algebra, an eigenvector or characteristic vector of a square matrix is a vector that does not change its direction under the associated linear transformation.
In other words: if $v$ is a vector that is not zero, then it is an eigenvector of a square matrix $A$ if $Av$ is a scalar multiple of $v$. i
This condition could be written as the equation: $ Av = \lambda v$, where $\lambda$ is a scalar known as the eigenvalue or characteristic
value associated with the eigenvector $v$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To compute the eigenvector, we should find the solution to the equation $det(A-\lambda I)=0$ where $I$ is the identity matrix. Actually
I don&amp;rsquo;t know how to do it anymore, and I will simply use &lt;em&gt;R&lt;/em&gt;&amp;rsquo;s &lt;em&gt;eigen&lt;/em&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; eigen(ExecutionPlan)
$values
[1]  1.0000000  0.5000000 -0.1666667

$vectors
          [,1]          [,2]       [,3]
          [1,] 0.5773503  7.071068e-01  0.5144958
          [2,] 0.5773503  1.107461e-16 -0.6859943
          [3,] 0.5773503 -7.071068e-01  0.5144958

&amp;gt; ExecutionPlan %^% 15
        Alpha      Beta     Gamma
Alpha 0.2857295 0.4285714 0.2856990
Beta  0.2857143 0.4285714 0.2857143
Gamma 0.2856990 0.4285714 0.2857295
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wait, it has found 3 eigenvalues, and one of those equals 1 which is coherent.
But the eigen vector is not coherent at all with the evaluation of the matrix at step 15.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&#34;http://stackoverflow.com/questions/14912279/how-to-obtain-right-eigenvectors-of-matrix-in-r&#34;&gt;stackoverflow&lt;/a&gt;
that&amp;rsquo;s because it computes the &lt;em&gt;right&lt;/em&gt; eigenvector and what I need is the &lt;em&gt;left&lt;/em&gt; eigenvector.&lt;/p&gt;

&lt;p&gt;Here is how to evaluate it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; lefteigen  &amp;lt;-  function(A){
       return(t(eigen(t(A))$vectors))
}
&amp;gt; lefteigen(ExecutionPlan)
               [,1]          [,2]       [,3]
          [1,] 0.4850713  7.276069e-01  0.4850713
          [2,] 0.7071068 -3.016795e-16 -0.7071068
          [3,] 0.4082483 -8.164966e-01  0.4082483
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have the steady vector : $\mathbf{v} = \begin{pmatrix}0.48 \\ 0.70 \\ 0.40\end{pmatrix}$&lt;/p&gt;

&lt;p&gt;which simply means that according to our theory, our finite state machin will most likely end in state $\beta$.&lt;/p&gt;

&lt;h3 id=&#34;analysis:8ff21f56669823562f41e250370cd700&#34;&gt;Analysis&lt;/h3&gt;

&lt;p&gt;What did I learn ?
Not that much actually. I&amp;rsquo;ve learned that given a transition matrix (a model) I could easily compute the probability of success.
If I consider the finte state machine as the whole automator of deploiement, given the pobability of failure, I can predict
if it&amp;rsquo;s worth continuing the deploiement or not.&lt;/p&gt;

&lt;p&gt;Cool, but far away from my goal: I want a distributed application to learn how to deploy, cure, and take care of itself with a single information:
its topology.&lt;/p&gt;

&lt;p&gt;Back to real life, the model I&amp;rsquo;ve described in this post could be the observable states of the application (eg: $\alpha = initial$,$\beta = configured$, $\gamma=started$&amp;hellip;)&lt;/p&gt;

&lt;p&gt;Hence, the states of the components of the application are hidden from the model (and they must remain hidden, as I don&amp;rsquo;t care observing them)&lt;/p&gt;

&lt;p&gt;And this is the proper definition of a &lt;strong&gt;hidden markov model (HMM)&lt;/strong&gt;.
So yes, there is a Markov model hidden in the choreography!&lt;/p&gt;

&lt;p&gt;I shall continue the study and learn how the signals sent from the compenent gives &lt;em&gt;evidences&lt;/em&gt; and do influence the Markov Model of my application.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a matter of inference, I-maps, Bayesian networks, HMM&amp;hellip;. It&amp;rsquo;s about machine learning which is fascinating !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Playing with (Openstack) Keystone</title>
      <link>http://dev.owulveryck.info/blog/2015/11/17/playing-with-openstack-keystone/</link>
      <pubDate>Tue, 17 Nov 2015 10:05:42 +0000</pubDate>
      <author>olivier.wulveryck@gmail.com (Olivier Wulveryck)</author>
      <guid>http://dev.owulveryck.info/blog/2015/11/17/playing-with-openstack-keystone/</guid>
      <description>

&lt;p&gt;In the cloud computing, alongside of the hosting monsters such as amazon or google, there is the &lt;a href=&#34;https://www.openstack.org&#34;&gt;Openstack Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Openstack is not a single software, it is more a galaxy of components aim to control the infrastructure, such as hardware pools, storage, network.
The management can then be done via a Web based interface or via a bunch of RESTful API.&lt;/p&gt;

&lt;p&gt;I would like to evaluate its identity service named &lt;a href=&#34;http://docs.openstack.org/developer/keystone/&#34;&gt;keystone&lt;/a&gt; and use it as a AuthN and AuthZ backend for my simple_iaas example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; : I will consider that the openstack keystone is installed (The release I&amp;rsquo;m using is &lt;em&gt;liberty&lt;/em&gt;). As I don&amp;rsquo;t want to rewrite an installation procedure as many exists already on the web. For my tests, I&amp;rsquo;m using an keystone installation from sources in a Ubuntu VM&lt;/p&gt;

&lt;h1 id=&#34;my-goal:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;My goal&lt;/h1&gt;

&lt;p&gt;My goal is to have a webservice that will protect the scopes of my IAAS.
I may declare two users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One may list the nodes via a GET request&lt;/li&gt;
&lt;li&gt;The other one may also create and destroy nodes via POST and DELETE request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is about setting up keystone so I can use it as a lab to understand the concepts and maybe achieve my goal with it.&lt;/p&gt;

&lt;h1 id=&#34;let-s-go:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;Let&amp;rsquo;s go&lt;/h1&gt;

&lt;p&gt;I won&amp;rsquo;t use any external web server. Instead I will rely on the builtin Eventlet based web server.&lt;/p&gt;

&lt;p&gt;The documentation says it is deprecated, indeed I will use it for testing purpose, so that will do the job.&lt;/p&gt;

&lt;h2 id=&#34;the-wsgi-pipeline-configuration:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;The WSGI pipeline configuration&lt;/h2&gt;

&lt;p&gt;To be honest, I don&amp;rsquo;t know anything about the python ecosystem. And as it is my blog, I will write anything I&amp;rsquo;ve learned from this experience&amp;hellip;&lt;/p&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WSGI is a gateway interface for python, and my understanding is that it&amp;rsquo;s like the good old CGI we used in the beginning of this century;&lt;/li&gt;
&lt;li&gt;Is is configured by a ini file based on &lt;a href=&#34;http://pythonpaste.org/&#34;&gt;Paste&lt;/a&gt; and especially &lt;em&gt;Paste Deploy&lt;/em&gt; which is a system made for loading and configuring WSGI components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The WSGI interface is configured by a ini file as written in the &lt;a href=&#34;http://docs.openstack.org/developer/keystone/configuration.html&#34;&gt;Openstack keystone documentation&lt;/a&gt;.
This file is called &lt;code&gt;keystone-paste.ini&lt;/code&gt;. I won&amp;rsquo;t touch it and use the provided one. It sounds ok and when I start the service with &lt;code&gt;keystone-all&lt;/code&gt; I can see in the logs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-logs&#34;&gt;2015-11-17 10:05:04.918 7068 INFO oslo_service.service [-] Starting 2 workers
2015-11-17 10:05:04.920 7068 INFO oslo_service.service [-] Started child 7082
2015-11-17 10:05:04.922 7068 INFO oslo_service.service [-] Started child 7083
2015-11-17 10:05:04.925 7082 INFO eventlet.wsgi.server [-] (7082) wsgi starting up on http://0.0.0.0:35357/
2015-11-17 10:05:04.927 7068 INFO keystone.common.environment.eventlet_server [-] Starting /usr/bin/keystone-all on 0.0.0.0:5000
2015-11-17 10:05:04.927 7068 INFO oslo_service.service [-] Starting 2 workers
2015-11-17 10:05:04.930 7068 INFO oslo_service.service [-] Started child 7084
2015-11-17 10:05:04.934 7083 INFO eventlet.wsgi.server [-] (7083) wsgi starting up on http://0.0.0.0:35357/
2015-11-17 10:05:04.936 7068 INFO oslo_service.service [-] Started child 7085
2015-11-17 10:05:04.940 7085 INFO eventlet.wsgi.server [-] (7085) wsgi starting up on http://0.0.0.0:5000/
2015-11-17 10:05:04.941 7084 INFO eventlet.wsgi.server [-] (7084) wsgi starting up on http://0.0.0.0:5000/
2015-11-17 10:17:01.005 7085 INFO keystone.common.wsgi [-] GET http://localhost:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which sounds ok and a &lt;code&gt;curl&lt;/code&gt; call to the endpoint reply at least something:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;$ curl -s http://localhost:5000/v3 | jsonformat
{
  &amp;quot;version&amp;quot;: {
    &amp;quot;id&amp;quot;: &amp;quot;v3.4&amp;quot;,
    &amp;quot;links&amp;quot;: [
      {
        &amp;quot;href&amp;quot;: &amp;quot;http://localhost:5000/v3/&amp;quot;,
        &amp;quot;rel&amp;quot;: &amp;quot;self&amp;quot;
      }
    ],
    &amp;quot;media-types&amp;quot;: [
      {
        &amp;quot;base&amp;quot;: &amp;quot;application/json&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;application/vnd.openstack.identity-v3+json&amp;quot;
      }
    ],
    &amp;quot;status&amp;quot;: &amp;quot;stable&amp;quot;,
    &amp;quot;updated&amp;quot;: &amp;quot;2015-03-30T00:00:00Z&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-keystone-configuration:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;The keystone configuration&lt;/h2&gt;

&lt;p&gt;The proper keystone configuration is done in the file &lt;code&gt;keystone.conf&lt;/code&gt;. This configuration file is decomposed into different sections as explained in the documentation.&lt;/p&gt;

&lt;h3 id=&#34;the-general-configuration-default-section:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;The general configuration (Default section)&lt;/h3&gt;

&lt;p&gt;I will only set the &lt;code&gt;admin token&lt;/code&gt; randomly as it will be used to create the users, roles and so on.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s generate a token with &lt;code&gt;openssl rand -hex 10&lt;/code&gt; and report it to my configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[DEFAULT]
admin_token = 8a0b4eacc6a81c3bc5aa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest will use all the default values for the General configuration (the [DEFAULT] section). This means that this section may be empty or full of comments.&lt;/p&gt;

&lt;h3 id=&#34;the-assignment-configuration:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;The assignment configuration&lt;/h3&gt;

&lt;p&gt;In this section, we choose the driver for the assignment service.
This purpose of this service is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[to] provide data about roules and role assignments
to the entities managed by the Identity and Resource services&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(source &lt;a href=&#34;http://docs.openstack.org/developer/keystone/architecture.html&#34;&gt;Keystone architecture&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I plan to use a SQL backend instead of a LDAP for my tests, so the configuration may be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[assignment]
driver = sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-authentication-plugin-configuration:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;The authentication plugin configuration&lt;/h3&gt;

&lt;p&gt;Keystone supports authentication plugins; those plugins are specified in the &lt;code&gt;[auth]&lt;/code&gt; section.
In my test, the &lt;code&gt;password&lt;/code&gt; plugin will be used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[auth]
methods = password
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-credentials:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;The credentials&lt;/h3&gt;

&lt;p&gt;The credentials are stored in a sql database as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[credential]
driver = sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-db-configuration:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;The DB configuration&lt;/h3&gt;

&lt;p&gt;For my tests I will use a sqlite database as configured in this section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[database]
sqlite_db = oslo.sqlite
sqlite_synchronous = true
backend = sqlalchemy
connection = sqlite:////var/lib/keystone/keystone.db

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;restart-the-keystone-server-and-play:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;Restart the keystone server and play&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# service keystone restart
# service keystone status
● keystone.service - OpenStack Identity service
   Loaded: loaded (/lib/systemd/system/keystone.service; enabled; vendor preset: enabled)
   Active: active (running) since Tue 2015-11-17 14:47:06 GMT; 3s ago
  Process: 15505 ExecStartPre=/bin/chown keystone:keystone /var/lock/keystone /var/log/keystone /var/lib/keystone (code=exited, status=0/SUCCESS)
  Process: 15502 ExecStartPre=/bin/mkdir -p /var/lock/keystone /var/log/keystone /var/lib/keystone (code=exited, status=0/SUCCESS)
 Main PID: 15508 (keystone-all)
   CGroup: /system.slice/keystone.service
           ├─15508 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log
           ├─15523 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log
           ├─15524 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log
           ├─15525 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log
           └─15526 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log

Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.479 15508 INFO oslo_service.service [-] Started child 15523
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.482 15508 INFO oslo_service.service [-] Started child 15524
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.486 15508 INFO keystone.common.environment.eventlet_server [-] Starting /usr/bin/keystone-all on 0.0.0.0:5000
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.490 15508 INFO oslo_service.service [-] Starting 2 workers
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.491 15523 INFO eventlet.wsgi.server [-] (15523) wsgi starting up on http://0.0.0.0:35357/
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.493 15508 INFO oslo_service.service [-] Started child 15525
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.499 15524 INFO eventlet.wsgi.server [-] (15524) wsgi starting up on http://0.0.0.0:35357/
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.502 15508 INFO oslo_service.service [-] Started child 15526
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.506 15525 INFO eventlet.wsgi.server [-] (15525) wsgi starting up on http://0.0.0.0:5000/
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.510 15526 INFO eventlet.wsgi.server [-] (15526) wsgi starting up on http://0.0.0.0:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so far so good&amp;hellip; let&amp;rsquo;s check if the DB is here now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# sqlite3 /var/lib/keystone/keystone.db
SQLite version 3.8.11.1 2015-07-29 20:00:57
Enter &amp;quot;.help&amp;quot; for usage hints.
sqlite&amp;gt; .tables
access_token            identity_provider       revocation_event
assignment              idp_remote_ids          role
config_register         mapping                 sensitive_config
consumer                migrate_version         service
credential              policy                  service_provider
domain                  policy_association      token
endpoint                project                 trust
endpoint_group          project_endpoint        trust_role
federation_protocol     project_endpoint_group  user
group                   region                  user_group_membership
id_mapping              request_token           whitelisted_config
sqlite&amp;gt; .quit
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;interacting-with-openstack:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;Interacting with openstack&lt;/h2&gt;

&lt;p&gt;A tools called &lt;a href=&#34;http://docs.openstack.org/developer/python-openstackclient/command-list.html&#34;&gt;python-openstackclient&lt;/a&gt; is available in my ubuntu release and will be used for testing purpose.&lt;/p&gt;

&lt;p&gt;The binary provided is &lt;code&gt;openstack&lt;/code&gt; (&lt;code&gt;dpkg-query -L python-openstackclient | grep bin&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&#34;creating-a-user:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;Creating a user&lt;/h3&gt;

&lt;p&gt;We need to define a couple of environment variables to be able to connect to the keystone server with the &lt;code&gt;root&lt;/code&gt; power:&lt;/p&gt;

&lt;p&gt;I will create a simple file that I will source when I need to interact as admin of keystone&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; admin.sh
# The value of admin_token defined in the keystone.conf
export OS_TOKEN=8a0b4eacc6a81c3bc5aa 
# This is the default value if not overridden by the directive admin_endpoint
export OS_URL=http://localhost:35357/v2.0 
export OS_IDENTITY_API_VERSION=3
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and another file to unset those variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; noadmin.sh 
unset OS_TOKEN
unset OS_URL
unset OS_IDENTITY_API_VERSION
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we create the user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack user create olivier
&#39;links&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then set its password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack user set --password-prompt olivier
User Password:
Repeat User Password:
&#39;users&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And see if it&amp;rsquo;s actually here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack user list
+----------------------------------+---------+
| ID                               | Name    |
+----------------------------------+---------+
| c80f5244c7d3486fbf4059b7197b4770 | olivier |
+----------------------------------+---------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-project:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;Creating a project&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;openstack project create --description &#39;demo project&#39; demo&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;assigning-the-admin-role:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;Assigning the admin role&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s first get the role list&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack role list
+----------------------------------+----------+
| ID                               | Name     |
+----------------------------------+----------+
| 5f772b617b5d4758badb7746934124e8 | admin    |
| 9fe2ff9ee4384b1894a90878d3e92bab | _member_ |
+----------------------------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add the admin right to the user &lt;code&gt;olivier&lt;/code&gt; for the project &lt;code&gt;demo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack role add --user olivier --project 0e07a734d54e4f3799a31768b13a38c2 admin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-a-token:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;Getting a token&lt;/h2&gt;

&lt;h3 id=&#34;with-the-openstack-tool:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;With the openstack tool&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve a default domain, I&amp;rsquo;ve setup a demo project, and assigne the my user the admin role for testing purpose.
I may now be able to generate an access token&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-project-name demo token issue
Expecting to find domain in project - the server could not comply with the request since it is either malformed or otherwise incorrect. The client is assumed to be in error. (HTTP 400) (Request-ID: req-09cad46b-9a5f-4b0f-8f2b-82b4442ed999)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, now add the domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-project-name demo --os-domain-name default token issue
Authentication cannot be scoped to multiple targets. Pick one of: project, domain, trust or unscoped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Too bad, remove the project&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-domain-name default token issue
The request you have made requires authentication. (HTTP 401) (Request-ID: req-59c39895-8e96-42c4-b5c5-1477001da618)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still no luck&amp;hellip; Google gave me a lot of answers, but I couldn&amp;rsquo;t figure whether it was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a bug&lt;/li&gt;
&lt;li&gt;a misconfiguration of the service&lt;/li&gt;
&lt;li&gt;a bad usage of the tools&lt;/li&gt;
&lt;li&gt;a totally bad apprehension of the product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I may continue to experiment, but I&amp;rsquo;m far from my goal actually, and I hate the idea of being lost. no help from Google, so DIY method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;openstack client in debug mode with &amp;ndash;debug&lt;/li&gt;
&lt;li&gt;keystone in debug with a &lt;code&gt;debug=true&lt;/code&gt; directive in &lt;code&gt;keystone.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The message is now clear:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-11-18 10:37:33.337 7164 WARNING keystone.common.wsgi [req-27dadee6-51d9-475d-a426-99e3b4f77f4a - - - - -] Authorization failed. User c80f5244c7d3486fbf4059b7197b4770 has no access to domain default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s re-set the password, just in case, as done in the previous section of this post and try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-project-name demo --os-domain-name default token issue
...
Unauthorized: User c80f5244c7d3486fbf4059b7197b4770 has no access to domain default (Disable debug mode to suppress these details.)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, let&amp;rsquo;s add &lt;code&gt;olivier&lt;/code&gt; as admin of the Default domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack role add --user olivier --domain Default admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-domain-name Default token issue
+-----------+----------------------------------+
| Field     | Value                            |
+-----------+----------------------------------+
| domain_id | default                          |
| expires   | 2015-11-18T11:44:23.325817Z      |
| id        | 0525e008619748848735d9122f8f2e81 |
| user_id   | c80f5244c7d3486fbf4059b7197b4770 |
+-----------+----------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bingo!!!&lt;/p&gt;

&lt;h1 id=&#34;conclusion:e7ff3708e26e119eac842592ed6ec8d5&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s enough information for this first post about OpenStack keystone.
By now, I will continue the investigations and use this installation as a &lt;em&gt;lab&lt;/em&gt; to understand the full concepts of this identity management software.&lt;/p&gt;

&lt;p&gt;I leave my test with a bitter taste.&lt;/p&gt;

&lt;p&gt;I may not have understood all the concepts behind the scene, but I can say that this product, at least in the current release, is by far too complex and has too much contributors to evaluate it in a simple way.
Therefore, the quite complete but messy documentation, a mix in the releases and some major incompatibilities in the tools using V2.0 and V3 gave me a bad impression.
The tool may be useful, but the TCO sounds high and the entry ticket is not negligible.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>