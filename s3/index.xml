<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unladen swallow</title>
    <link>https://blog.owulveryck.info/index.xml</link>
    <description>Recent content on Unladen swallow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015/2017</copyright>
    <lastBuildDate>Mon, 13 Mar 2017 20:54:27 +0100</lastBuildDate>
    <atom:link href="https://blog.owulveryck.info/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Linda&#39;s evalc, a (tuple)space oddity</title>
      <link>https://blog.owulveryck.info/2017/03/13/lindas-evalc-a-tuplespace-oddity/index.html</link>
      <pubDate>Mon, 13 Mar 2017 20:54:27 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2017/03/13/lindas-evalc-a-tuplespace-oddity/index.html</guid>
      <description>

&lt;p&gt;For a change, I will start with a good soundtrack&lt;/p&gt;

&lt;iframe src=&#34;https://embed.spotify.com/?uri=spotify:track:72Z17vmmeQKAg8bptWvpVG&amp;theme=white&#34; width=&#34;220&#34; height=&#34;80&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;(&lt;a href=&#34;https://www.youtube.com/watch?v=iYYRH4apXDo&#34;&gt;youtube version&lt;/a&gt; for those who are spotify-less)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is my third article about the distributed coordination language Linda.&lt;/p&gt;

&lt;p&gt;The final target of the work is to use this coordination mechanism to deploy and maintain applications based on the description of their topology (using, for example, TOSCA as a DSL).&lt;/p&gt;

&lt;p&gt;Last time, I introduced a lisp based language (zygomys) as an embedded programing mechanism to describe the business logic.&lt;/p&gt;

&lt;p&gt;Today I will explain how I have implemented a new &lt;em&gt;action&lt;/em&gt; in the linda language to achieve a new step: to distribute the work among different nodes.&lt;/p&gt;

&lt;p&gt;My test scenario remains the &amp;ldquo;dining of the philosophers&amp;rdquo;.&lt;/p&gt;

&lt;h1 id=&#34;introducing-evalc&#34;&gt;Introducing &lt;em&gt;evalc&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;Linda is a coordination language, but the language which is more than 30 years old, has not been designed with the idea of running on multiple hosts.
The basic primitives of the language do not allow remote execution.&lt;/p&gt;

&lt;p&gt;What I need is a sort of &lt;em&gt;eval&lt;/em&gt; function that would trigger the execution of the evaluation on another host instead of another goroutine.&lt;/p&gt;

&lt;p&gt;I do not care about catching the result of the execution as it will be posted to the tuple space.
Indeed, if more coordination between the actors of this RPC is needed, it can be encoded using the in/out mechanism of linda.&lt;/p&gt;

&lt;p&gt;Therefore, I have decided to introduce a new primitive called &lt;em&gt;evalc&lt;/em&gt; (for eval compute&amp;hellip; Yeah I know, I have imagination)&lt;/p&gt;

&lt;h1 id=&#34;implementing-evalc&#34;&gt;Implementing &lt;em&gt;evalc&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;The evalc will not trigger a function on a new host.
Instead, each participating host will run a sort of agent (actually a clone of the zygo interpreter) that will watch a certain type of event (tainted with the evalc) and will then execute a function.&lt;/p&gt;

&lt;p&gt;The tuple space acts like a communication channel and this implementation is like a kind of &lt;a href=&#34;https://en.wikipedia.org/wiki/Communicating_sequential_processes&#34;&gt;CSP&lt;/a&gt; which I like a lot.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;evalc&lt;/em&gt; will work exactly as its equivalent &lt;em&gt;eval&lt;/em&gt;. Therefore the function declaration in go will look like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; (l &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;Linda) EvalC(env &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;zygo.Glisp, name &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;, args []zygo.Sexp) (zygo.Sexp, &lt;span style=&#34;color: #B00040&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; zygo.SexpNull, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;nil&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;first-attempt&#34;&gt;First attempt&lt;/h2&gt;

&lt;p&gt;At first I thought I could simply gob/encode the &lt;code&gt;args&lt;/code&gt; which contains the &lt;code&gt;SexpFunction&lt;/code&gt;, post it in the tuple space under a prefixed key. Then the worker would read an execute it in a newly created &lt;code&gt;glisp&lt;/code&gt; env.&lt;/p&gt;

&lt;p&gt;That didn&amp;rsquo;t work mainly because the &lt;code&gt;SexpFunction&lt;/code&gt; does not have any exported fields, therefore I cannot easily encode/decode it.&lt;/p&gt;

&lt;p&gt;I though then that I could encode the &lt;code&gt;datastack&lt;/code&gt; and post it in the tuple space. I could then decode it in the worker.&lt;/p&gt;

&lt;p&gt;I asked for some advice to the author of zygomys &lt;a href=&#34;https://www.linkedin.com/in/jason-e-aten-ph-d-45a31318&#34;&gt;Jason E. Aten&lt;/a&gt; (aka &lt;a href=&#34;https://github.com/glycerine&#34;&gt;glycerine&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here is what he told me (thank you Jason btw):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Evaluating an arbitrary expression remotely will be challenging because an expression can refer to any variable in the environment, and so would theoretically require a copying of the whole environment&amp;ndash;the heap as well as the datastack.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And of course he is right!
So I will keep the idea of encoding the whole environment and send it to the workers for a later implementation.
It would need to change the zygomys implementation a lot so export and import both stack. That is too much for now.&lt;/p&gt;

&lt;h2 id=&#34;second-attempt&#34;&gt;Second attempt&lt;/h2&gt;

&lt;p&gt;What I did as a temporary solution is a lot simpler and not elegant at all: I have posted the function and the variables in the tuple space and then I am evaluating it in a newly created env.&lt;/p&gt;

&lt;p&gt;The main problem is that I cannot access to variables and user function defined outside of the scope of the function. But that will do the trick for now.&lt;/p&gt;

&lt;p&gt;Regarding the problem of the philosopher, I had to change the definition of &lt;code&gt;phil&lt;/code&gt; within my lisp code so it do not call &lt;code&gt;(eat)&lt;/code&gt; and &lt;code&gt;(think)&lt;/code&gt; functions anymore.&lt;/p&gt;

&lt;p&gt;Here is what is posted in the tuple space when the evalc function is called:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #19177C&#34;&gt;defn&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;phil&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;[i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;num]&lt;/span&gt; ((&lt;span style=&#34;color: #19177C&#34;&gt;begin&lt;/span&gt; (&lt;span style=&#34;color: #19177C&#34;&gt;begin&lt;/span&gt; (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v is thinking\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color: #008000&#34;&gt;sleep&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10000&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/%v is thinking\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)) (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v is in the room\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v took the %v&amp;#39;s chopstick\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;)) (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v took the %v&amp;#39;s chopstick\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;)) (&lt;span style=&#34;color: #19177C&#34;&gt;begin&lt;/span&gt; (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v is eating\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color: #008000&#34;&gt;sleep&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10000&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/%v is eating\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)) (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v released the %v&amp;#39;s chopstick\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v released the %v&amp;#39;s chopstick\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;)) (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;)) (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v left the room\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;) (&lt;span style=&#34;color: #19177C&#34;&gt;phil&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;)))) &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In the worker process, I am creating a new environment, loading the function (the &lt;code&gt;defn&lt;/code&gt; part), and constructing an expression to be evaluated by the env.
This is what the environment evalutates:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #19177C&#34;&gt;defn&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;phil&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;[i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;num]&lt;/span&gt; (
   (&lt;span style=&#34;color: #19177C&#34;&gt;begin&lt;/span&gt;
    (&lt;span style=&#34;color: #19177C&#34;&gt;begin&lt;/span&gt;
     (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v is thinking\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
     (&lt;span style=&#34;color: #008000&#34;&gt;sleep&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10000&lt;/span&gt;)
     (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/%v is thinking\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;))
    (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v is in the room\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v took the %v&amp;#39;s chopstick\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;))
    (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v took the %v&amp;#39;s chopstick\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;))
    (&lt;span style=&#34;color: #19177C&#34;&gt;begin&lt;/span&gt;
     (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v is eating\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
     (&lt;span style=&#34;color: #008000&#34;&gt;sleep&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10000&lt;/span&gt;)
     (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/%v is eating\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;))
    (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v released the %v&amp;#39;s chopstick\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v released the %v&amp;#39;s chopstick\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;))
    (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;))
    (&lt;span style=&#34;color: #19177C&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;%v left the room\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;phil&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;))))
(&lt;span style=&#34;color: #19177C&#34;&gt;phil&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;runtime&#34;&gt;Runtime&lt;/h1&gt;

&lt;h2 id=&#34;running-it-locally-one-etcd-and-several-workers&#34;&gt;Running it locally: one etcd and several workers&lt;/h2&gt;

&lt;p&gt;To run it locally I need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a local instance of &lt;code&gt;etcd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;5 workers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each worker will watch for a new event in the tuple space.
Then I can trigger the execution of the logic with a sixth worker that will read the lisp code, and execute it.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of the execution
&lt;img src=&#34;https://raw.githubusercontent.com/ditrit/go-linda/master/doc/v0.3.png&#34; alt=&#34;Runtime screenshot&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Jason E. Aten also told me about &lt;em&gt;sigils&lt;/em&gt; as a way to discriminate the local variables from the variables present in the tuple space.
I haven&amp;rsquo;t worked on it yet, but I think that I will use those &lt;em&gt;sigils&lt;/em&gt; to enhance my linda implementation. It can be usefull for the matching of templates and formals.&lt;/p&gt;

&lt;p&gt;By now, I have something that is able to run a basic theorical coordination problem.&lt;/p&gt;

&lt;p&gt;Now I think that I will go back to the application management task and see how I can encode the TOSCA workflow so it can be used by this mechanism.&lt;/p&gt;

&lt;p&gt;Meanwhile, I will try to test this setup on a worldwide cluster (maybe based on CoreOS).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Credit:&lt;/p&gt;

&lt;p&gt;The illustration has been found &lt;a href=&#34;https://www.flickr.com/photos/joebehr/23704122254&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>350000 rows, 133 cols... From a huge CSV to DynamoDB (without breaking piggy-bank).</title>
      <link>https://blog.owulveryck.info/2017/03/11/350000-rows-133-cols...-from-a-huge-csv-to-dynamodb-without-breaking-piggy-bank./index.html</link>
      <pubDate>Sat, 11 Mar 2017 09:15:17 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2017/03/11/350000-rows-133-cols...-from-a-huge-csv-to-dynamodb-without-breaking-piggy-bank./index.html</guid>
      <description>

&lt;p&gt;In this post I will explain how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parse a CSV file and extract only certain columns&lt;/li&gt;
&lt;li&gt;Create a table in DynamoDB&lt;/li&gt;
&lt;li&gt;Insert all the data with an adaptive algorithm in order to use the provisioned capacity&lt;/li&gt;
&lt;li&gt;Reduce the capacity once the insertion is done.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;exploring-the-problem-aws-billing&#34;&gt;Exploring the problem: AWS Billing&lt;/h1&gt;

&lt;p&gt;In a &lt;a href=&#34;https://blog.owulveryck.info/2017/01/13/a-foot-in-nosql-and-a-toe-in-big-data/&#34;&gt;previous post&lt;/a&gt; I explained how I was using dynamodb to store a lot of data about aws billing.&lt;/p&gt;

&lt;p&gt;On top of the API that deals with products and offers, AWS can provide a &amp;ldquo;billing report&amp;rdquo;. Those reports are delivered to am Amazon S3 bucket in CSV format at least once a day.&lt;/p&gt;

&lt;p&gt;The rows of the CSV are organized in &lt;em&gt;topics&lt;/em&gt; as described &lt;a href=&#34;http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-reports.html#Topics&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each line of the CSV represents an item that is billed. But every resource is made of several billable items. For example on EC2, you pay the &amp;ldquo;compute&amp;rdquo;, the bandwidth, the volume etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;I would like to use and understand this file to optimize the costs. A kind of BI.&lt;/p&gt;

&lt;p&gt;AWS says that you can import your file in Excel (or alike)&amp;hellip; That could be a solution but:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/algorithms.png&#34; alt=&#34;Excel XKCD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On top of that with a lot of resources the file is fat (more thant a 100000 lines several times a day for my client).
I have decided to use dynamodb to store all the information so it will be easy to perform an extract and generate a dashboard.
In this post, I will expose some go techniques I have used to achive that.&lt;/p&gt;

&lt;h1 id=&#34;step-1-parsing-the-csv&#34;&gt;Step 1: Parsing the CSV&lt;/h1&gt;

&lt;p&gt;As I explained, the CSV file is made of more than a hundreds cols. The columns are identified in the first row of the CSV.
I will store each row in a go struct.&lt;/p&gt;

&lt;p&gt;To parse it easily, I an using custom fields &lt;code&gt;csv&lt;/code&gt; in the struct. The field value corresponds to the header name for the seek value.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; test &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    ID   &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`csv:&amp;quot;myid&amp;quot;`&lt;/span&gt;
    Name &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`csv:&amp;quot;prenom&amp;quot;`&lt;/span&gt;
    Last &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`csv:&amp;quot;nom&amp;quot;`&lt;/span&gt;
    Test &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`csv:&amp;quot;nonexitent&amp;quot;`&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, I am reading the first row of the CSV file and then ranging the field names of the struct to fill a map with the field key as key and the col number as value. I set &amp;lsquo;-1&amp;rsquo; if the field is not found:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; headers = &lt;span style=&#34;color: #008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, et.NumField())
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &amp;lt; et.NumField(); i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; {
        headers[et.Field(i).Name] = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt;(element &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;, array []&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; {
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; array {
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; element {
                                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; k
                        }
                }
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;
        }(et.Field(i).Tag.Get(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;csv&amp;quot;&lt;/span&gt;), header)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I can parse the CSV file and fill a channel with one object by row&amp;hellip;
See the full example &lt;a href=&#34;https://gist.github.com/owulveryck/0fc68c90fa4875647b54f62e2066707d&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-2-creating-the-table-in-dynamodb&#34;&gt;Step 2: Creating the table in DynamoDB&lt;/h1&gt;

&lt;p&gt;This step is &amp;ldquo;easy&amp;rdquo;. I will create a table with one index and a sort key.
For the example the index is a string named &lt;code&gt;Key&lt;/code&gt;. The sort key is also a string named &lt;code&gt;SortKey&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;AttributeDefinitions: []&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;dynamodb.AttributeDefinition{
        {
                AttributeName: aws.String(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Key&amp;quot;&lt;/span&gt;),
                AttributeType: aws.String(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;S&amp;quot;&lt;/span&gt;),
        },
        {
                AttributeName: aws.String(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SortKey&amp;quot;&lt;/span&gt;),
                AttributeType: aws.String(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;S&amp;quot;&lt;/span&gt;),
        },
},
KeySchema: []&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;dynamodb.KeySchemaElement{
        {
                AttributeName: aws.String(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Key&amp;quot;&lt;/span&gt;),
                KeyType:       aws.String(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;HASH&amp;quot;&lt;/span&gt;),
        },
        {
                AttributeName: aws.String(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SortKey&amp;quot;&lt;/span&gt;),
                KeyType:       aws.String(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;RANGE&amp;quot;&lt;/span&gt;),
        },
},
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I will set an initial provisioning of 600. This would cost a lot of money but I will reduce it later to spare. The high provisioning rate is needed otherwise it would take me hours to integrate the CSV.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;ProvisionedThroughput: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;dynamodb.ProvisionedThroughput{
        ReadCapacityUnits:  aws.Int64(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;),
        WriteCapacityUnits: aws.Int64(&lt;span style=&#34;color: #666666&#34;&gt;300&lt;/span&gt;),
},
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code for creating the table is &lt;a href=&#34;https://gist.github.com/owulveryck/6663983b41c669617704558a030a3392#file-dynamodbcreatetable-go&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-3-inserting-the-data&#34;&gt;Step 3: Inserting the data&lt;/h1&gt;

&lt;p&gt;The structure is read through the channel I have created previously.
The object is encoded to a dynamodb compatible one thanks the &lt;code&gt;marshal&lt;/code&gt; function of this helper library &lt;code&gt;github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To make the structure ID match the &lt;code&gt;Key&lt;/code&gt; attribute of the table, I am using the &lt;code&gt;dynamodbav&lt;/code&gt; fields.
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; test &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    ID   &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`csv:&amp;quot;myid&amp;quot; dynamodbav:&amp;quot;Key&amp;quot;`&lt;/span&gt;
    Name &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`csv:&amp;quot;prenom&amp;quot; dynamodbav:&amp;quot;SortKey&amp;quot;`&lt;/span&gt;
    Last &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`csv:&amp;quot;nom&amp;quot; dynamodbav:&amp;quot;Last,omitempty&amp;quot;`&lt;/span&gt;
    Test &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`csv:&amp;quot;nonexitent&amp;quot;`&lt;/span&gt;
}
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; c {
    item, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; dynamodbattribute.MarshalMap(v)
    params &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;dynamodb.PutItemInput{
        Item:      item,
        TableName: aws.String(tableName),
    }
    svc.PutItem(params)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;going-concurrent&#34;&gt;Going concurrent&lt;/h2&gt;

&lt;p&gt;I will add a touch of concurrency. I will use a maximum of 20 goroutines simultaneously to send items to the dynamodb.
This is an empiric decision.&lt;/p&gt;

&lt;p&gt;I am using a &amp;ldquo;guard&amp;rdquo; channel. This channel has a buffer of 20. The buffed is filled with am empty struct whenever an item is received in the main communication channel.
I am then launching a gorouting that will insert the event into dynamodb and consume one event from the guard channel when done.&lt;/p&gt;

&lt;p&gt;The guard channel is blocking when it is full. Therefore I am sure that 20 goroutines will run at maximum:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;guard &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt;{}, &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; c {
    guard &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt;{}{}
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt;(v &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;test) {
        item, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; dynamodbattribute.MarshalMap(v)
        params &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;dynamodb.PutItemInput{
            Item:      item,
            TableName: aws.String(tableName),
        }
        svc.PutItem(params)
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt;guard
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;using-a-backoff-algorithm&#34;&gt;Using a backoff algorithm&lt;/h2&gt;

&lt;p&gt;The problem with this implementation is that it can overload the capacity.
Therefore the rejected event must be resent. Of course I can simply check for the error &lt;code&gt;dynamodb.ErrCodeProvisionedThroughputExceededException&lt;/code&gt; an immediately resend the failed event.&lt;/p&gt;

&lt;p&gt;But this may lead to dramatic performances.
The AWS documentation point an Exponential Backoff algorithm as an advice to optimize the writing: &lt;a href=&#34;http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.RetryAndBackoff&#34;&gt;Cf AWS documentation)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wikipedia gives a good &lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_backoff&#34;&gt;explanation of the exponential backoff&lt;/a&gt; but to make it simple the idea is to decrease the ration of insertion of the DB in order to get a good performance.&lt;/p&gt;

&lt;p&gt;I am using a go implenenation found on &lt;a href=&#34;http://github.com/cenkalti/backoff&#34;&gt;github&lt;/a&gt; made by &lt;a href=&#34;https://github.com/cenkalti&#34;&gt;Cenkalti&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I return the error only in case of &lt;code&gt;dynamodb.ErrCodeProvisionedThroughputExceededException&lt;/code&gt; by now:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;backoff.Retry(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt;() &lt;span style=&#34;color: #B00040&#34;&gt;error&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Now put the item, discarding the result&lt;/span&gt;
    _ , err = svcDB.PutItem(params)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; err.(awserr.Error).Code() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; dynamodb.ErrCodeProvisionedThroughputExceededException {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; err
        }
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// TODO: Special case...&lt;/span&gt;
        log.Printf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Error inserting %v (%v)&amp;quot;&lt;/span&gt;, v, err)
    }
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Do the insert here&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;nil&lt;/span&gt;
}, backoff.NewExponentialBackOff())
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;step-4-updating-the-table-and-reducing-the-write-capacity&#34;&gt;Step 4: Updating the table and reducing the write capacity&lt;/h1&gt;

&lt;p&gt;Once the insert is done, to avoid a huge bill, I am reducing the Provisioned capacity of the table.
This is done with an &lt;code&gt;update&lt;/code&gt; request:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;params &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;dynamodb.UpdateTableInput{
    TableName: aws.String(tableName), &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Required&lt;/span&gt;
    ProvisionedThroughput: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;dynamodb.ProvisionedThroughput{
        ReadCapacityUnits:  aws.Int64(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;), &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Required&lt;/span&gt;
        WriteCapacityUnits: aws.Int64(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;),  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Required&lt;/span&gt;
    },
}
resp, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; svc.UpdateTable(params)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;conclusion-it-works&#34;&gt;Conclusion: it works&lt;/h1&gt;

&lt;p&gt;It took me half an hour to process and insert 350000 lines (with 133 rows each) into the dynamodb from my laptop.&lt;/p&gt;

&lt;p&gt;I can see that the adaptative algorithm works on the graphs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.owulveryck.info/assets/images/dynamodb/dynamodb_write_capacity.png&#34; alt=&#34;It works&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now I can analyse the data to find a proper way to optimize the aws bill for my client.&lt;/p&gt;

&lt;p&gt;The full example is on &lt;a href=&#34;https://gist.github.com/owulveryck/6663983b41c669617704558a030a3392&#34;&gt;gist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>To go and touch Linda&#39;s Lisp</title>
      <link>https://blog.owulveryck.info/2017/02/28/to-go-and-touch-lindas-lisp/index.html</link>
      <pubDate>Tue, 28 Feb 2017 20:57:38 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2017/02/28/to-go-and-touch-lindas-lisp/index.html</guid>
      <description>

&lt;p&gt;The title is not a typo nor dyslexia. I will really talk about Lisp.&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&#34;https://blog.owulveryck.info/2017/02/03/linda-31yo-with-5-starving-philosophers.../index.html&#34;&gt;previous post&lt;/a&gt; I explained my will to implement the dining of the philosophers with Linda in GO.&lt;/p&gt;

&lt;p&gt;The ultimate goal is to use a distributed and abstract language to go straight from the design to the runtime of an application.&lt;/p&gt;

&lt;h1 id=&#34;the-problem-i-ve-faced&#34;&gt;The problem I&amp;rsquo;ve faced&lt;/h1&gt;

&lt;p&gt;I want to use a GO implementation for the Linda language because a go binary is a container by itself. Therefore if I build my linda language within go, I will be able to run it easily across the computes nodes without any more dependencies.
The point is that the Linda implementation may be seen as a go package. Therefore every implementation of every algorithm must be coded in go. Therefore I will lack a lot of flexibility as I will need one agent per host &lt;strong&gt;and&lt;/strong&gt; per algorithm. For example the binary that will solve the problem of the dining of the philosophers will only be useful for this specific problem.&lt;/p&gt;

&lt;p&gt;What would be nice it to use an embedded scripting language. This language would implement the Linda primitives (&lt;em&gt;in, rd, eval, out&lt;/em&gt;). And the go binary would be in charge to communicate with the tuple space.&lt;/p&gt;

&lt;h2 id=&#34;tuple-space-i-want-your-sexp&#34;&gt;Tuple space: &lt;em&gt;I want your Sexp&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;I have thought a lot about a way to encode my tuples for the tuple space.
Of course go as a lot of encoding available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;li&gt;protobuf&lt;/li&gt;
&lt;li&gt;gob&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of them gave me entire satisfaction. The reason is that go is strongly typed. A tuple must be internally represented by an empty &lt;em&gt;interface{}&lt;/em&gt; to remain flexible.
Obviously I would need to use a lot of reflexion in my code. And reflexion is not always easy. And a bad implementation leads to an unpredictable code.&lt;/p&gt;

&lt;p&gt;To keep it simple (and idiomatic) I took a little refresh about the principles of the reflection. So I took my &lt;a href=&#34;https://books.google.fr/books/about/The_Go_Programming_Language.html?id=SJHvCgAAQBAJ&#34;&gt;book&lt;/a&gt; about go (I bought it when I started learning the language).&lt;/p&gt;

&lt;p&gt;In this book there is a full example about encoding and decoding &lt;a href=&#34;https://en.wikipedia.org/wiki/S-expression&#34;&gt;s-expression&lt;/a&gt;. And what is an s-expression? A tuple!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eureka&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&#34;lisp-zygomys&#34;&gt;Lisp/zygomys&lt;/h2&gt;

&lt;p&gt;I started working on s-expression&amp;hellip; I could have used the parser described in my book and that would be enough for the purpose of my test.
I could have created a package &lt;em&gt;encoding/sexpr&lt;/em&gt; and that would do the job.&lt;/p&gt;

&lt;p&gt;But the more I was reading about s-expression, the more I was digging in list processing.&lt;/p&gt;

&lt;p&gt;List processing, s-expression, embedded language, functional programming&amp;hellip;. That was it: I really needed a lisp based embedded language to implement my linda solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/lisp_cycles.png&#34; alt=&#34;xkcd 297&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&#34;https://github.com/glycerine/zygomys&#34;&gt;Zygomys&lt;/a&gt;. This project was a perfect fit for my needs because it seemed stable enough and easily extensible.
The main drawback is that its author decided not to use the godoc format. That is a bit annoying but the documentation exists and is in a wiki. On the other hand the author has replied to all of my solicitations. So I gave it a go.&lt;/p&gt;

&lt;h1 id=&#34;the-poc&#34;&gt;The POC&lt;/h1&gt;

&lt;h2 id=&#34;implementing-the-linda-primitives-in-the-repl&#34;&gt;Implementing the linda primitives in the REPL&lt;/h2&gt;

&lt;p&gt;The linda primitives are implemented as GO functions. I will more or less use the same structure as the one I have already used in my first attempt.
The go functions will be exported into the repl as documented in the &lt;a href=&#34;https://github.com/glycerine/zygomys/wiki/Go-API&#34;&gt;wiki of zygomys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example the Out function is implemented with this signature:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; (l &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;Linda) Out(env &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;zygo.Glisp, name &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;, args []zygo.Sexp) (zygo.Sexp, &lt;span style=&#34;color: #B00040&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and it will be presented to the repl by this command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;lda &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;linda.Linda{}
env &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; zygo.NewGlisp()
env.AddFunction(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;out&amp;quot;&lt;/span&gt;, lda.Out)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have decided to let the linda implementation in a separate package and to implement the repl ad a separate command.&lt;/p&gt;

&lt;h2 id=&#34;etcd-as-a-tuple-space&#34;&gt;&lt;em&gt;etcd&lt;/em&gt; as a tuple space&lt;/h2&gt;

&lt;p&gt;My trivial implementation of tuple space based on channels was inaccurate. So I need to implement something more robust.
In the future the tuple space will be distributed at the scale of the cloud.&lt;/p&gt;

&lt;p&gt;A raft-based key value store is nowadays a good choice.
I have chosen to play with etcd by now (but I will try consul later on).&lt;/p&gt;

&lt;p&gt;For the moment I will run a single instance locally.&lt;/p&gt;

&lt;h3 id=&#34;linda-and-etcd&#34;&gt;Linda and etcd&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;out&lt;/em&gt; and &lt;em&gt;eval&lt;/em&gt; statements will write the tuple as the value of a key prefixed by something fixed per session and suffixed by a uuid.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;In&lt;/em&gt; statement is a bit trickier:&lt;/p&gt;

&lt;p&gt;It will read all the tuples prefixed by the constant defined and try to match the tuple passed as argument.
If it succeeds it will try to delete it.
If it succeeds it will return the tuple. This is needed to avoid a race condition on a single tuple.&lt;/p&gt;

&lt;p&gt;If no matching tuple is present in the tuple space, the function watch any PUT event. If the value associated to the event matches the arguments, it tries to delete the tuple from the kv store and returns it.&lt;/p&gt;

&lt;h2 id=&#34;implementing-the-algorithm-in-zygomys&#34;&gt;Implementing the algorithm in &lt;em&gt;zygomys&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;This tasks gave me a lot of pain.
To be honest I started (once more) to read the book &lt;a href=&#34;https://mitpress.mit.edu/sicp/full-text/book/book.html&#34;&gt;structure and interpretation of computer program&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a beautiful and functional way to implement the algorithm in lisp. I am sure about that.&lt;/p&gt;

&lt;p&gt;But I will figure it out later.&lt;/p&gt;

&lt;p&gt;By now, what I did was simply to transpile the algorithm in the lisp syntax thanks to the &lt;code&gt;begin&lt;/code&gt; statement of &lt;em&gt;zygo&lt;/em&gt; (see the &lt;a href=&#34;https://github.com/glycerine/zygomys/wiki/Language&#34;&gt;section Sequencing in the wiki of zygomys&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is how it looks like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #19177C&#34;&gt;defn&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;phil&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;[i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;num]&lt;/span&gt; (
  (&lt;span style=&#34;color: #19177C&#34;&gt;begin&lt;/span&gt;
    (&lt;span style=&#34;color: #19177C&#34;&gt;think&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;))
    (&lt;span style=&#34;color: #19177C&#34;&gt;eat&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;mod&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;))
    (&lt;span style=&#34;color: #19177C&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;)
    (&lt;span style=&#34;color: #19177C&#34;&gt;phil&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;num&lt;/span&gt;))))
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;execution&#34;&gt;Execution&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;etcd&lt;/em&gt; daemon needs to be launched first. And by now it needs a clean database to avoid any side effect (I still have a lot of TODO in my code).&lt;/p&gt;

&lt;p&gt;Then launch the linda repl with the example:&lt;/p&gt;

&lt;pre&gt;
=&gt; localhost cmd git:(master) # ./cmd ../example/dinner/dinner.zy
Creating chopstick 0
Creating philosopher 0
Creating room ticket
0 is thinking
Creating chopstick 1
Creating philosopher 1
Creating room ticket
1 is thinking
Creating chopstick 2
Creating philosopher 2
Creating room ticket
2 is thinking
Creating chopstick 3
Creating philosopher 3
Creating room ticket
3 is thinking
Creating chopstick 4
Creating philosopher 4
4 is thinking
/4 is thinking
4 is in the room
4 took the 4&#39;s chopstick
4 took the 0&#39;s chopstick
4 is eating
/0 is thinking
0 is in the room
/3 is thinking
3 is in the room
/2 is thinking
2 is in the room
3 took the 3&#39;s chopstick
2 took the 2&#39;s chopstick
...
&lt;/pre&gt;

&lt;h1 id=&#34;conclusion-and-future-work&#34;&gt;Conclusion and future work&lt;/h1&gt;

&lt;p&gt;This implementation is a start. The code needs a lot of tweaking though. The linda implementation is still far to be complete.&lt;/p&gt;

&lt;p&gt;But by now I won&amp;rsquo;t pass much time in implementing some more feature because I have enough to play with my philosophers.
What I would like to do next is to distribute my philosophers and use the real power of etcd.&lt;/p&gt;

&lt;p&gt;I would like to start the REPL on 5 different hosts all linked by etcd.
Then I will inject my lisp code in the tuple space and wait for the philosophers to think and eat.&lt;/p&gt;

&lt;p&gt;If you are curious, the code is on &lt;a href=&#34;https://github.com/ditrit/go-linda&#34;&gt;the github of the ditrit project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile, let&amp;rsquo;s have a drink and relax with a good sound:&lt;/p&gt;

&lt;iframe src=&#34;https://embed.spotify.com/?uri=spotify:track:4QwzVlAJSkcLeCNQ6Ug30P&amp;theme=white&#34; width=&#34;280&#34; height=&#34;80&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Linda, 31yo, with 5 starving philosophers...</title>
      <link>https://blog.owulveryck.info/2017/02/03/linda-31yo-with-5-starving-philosophers.../index.html</link>
      <pubDate>Fri, 03 Feb 2017 20:57:30 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2017/02/03/linda-31yo-with-5-starving-philosophers.../index.html</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The hand is the tool of tools&lt;/strong&gt; - &lt;em&gt;Aristotle&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It ain&amp;rsquo;t no secret to anyone actually knowing me: I am a fan of automation. Automation and configuration management
have come a long way since &lt;a href=&#34;http://markburgess.org/&#34;&gt;Mark Burgess&lt;/a&gt; wrote the first version of &lt;a href=&#34;https://cfengine.com/&#34;&gt;cfengine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But even if the landscape has changed, operators are still scripting (only the DSL has changed), and the area targeted by those scripts remains technical.&lt;/p&gt;

&lt;p&gt;There is no real abstraction nor automation of a design.&lt;/p&gt;

&lt;p&gt;Let me explain that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You still need a human to read and understand the architecture of an application.&lt;/li&gt;
&lt;li&gt;You still need another human to transpile it into a language understandable by a CM tool.&lt;/li&gt;
&lt;li&gt;And you need to configure/script this tool to react on some events to keep the application running and healthy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; With a bunch of IT specialists from different major companies, we are trying to figure out the best way to achieve this goal. I will have the opportunity to talk about that in a dedicated post soon.&lt;/p&gt;

&lt;p&gt;To describe an application I have had the opportunity to work with &lt;a href=&#34;http://docs.oasis-open.org/TOSCA/TOSCA-Simple-Profile-YAML/v1.1/cs0prd01/TOSCA-Simple-Profile-YAML-v1.1-csprd01.html&#34;&gt;TOSCA&lt;/a&gt; for a major bank last year (by the way, if you want to play with TOSCA, you can use my &lt;a href=&#34;https://github.com/CiscoCloud/TOSCAlib&#34;&gt;TOSCAlib by Cisco&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have really liked the idea of an independent DSL that was able to fully describe an application in a way that it can be writable and understandable by a human as well as a machine.&lt;/p&gt;

&lt;p&gt;But it is not enough. TOSCA is based on the idea that you need an orchestrator to operate the workflow. And orchestrator is &amp;ldquo;bad&amp;rdquo;. The management system must be distributed and autonomous.
(for more about that cf &lt;a href=&#34;https://blog.owulveryck.info/2016/02/10/configuration-management-choreography-and-self-aware-applications/index.html&#34;&gt;Configuration management, choreography and self-aware applications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This leads to the idea that the application is a community of elements. And every single element of the community will act regarding the information it gets from the environments and from its peers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t communicate by sharing memory; share memory by communicating.&lt;/strong&gt; - &lt;em&gt;R. Pike&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How can those elements share the information?&lt;/p&gt;

&lt;h1 id=&#34;tuple-spaces-or-good-ideas-don-t-always-win-https-software-carpentry-org-blog-2011-03-tuple-spaces-or-good-ideas-dont-always-win-html&#34;&gt;&lt;a href=&#34;https://software-carpentry.org/blog/2011/03/tuple-spaces-or-good-ideas-dont-always-win.html&#34;&gt;Tuple Spaces (or, Good Ideas Don&amp;rsquo;t Always Win)&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;The title of this section is taken from &lt;a href=&#34;https://software-carpentry.org/blog/2011/03/tuple-spaces-or-good-ideas-dont-always-win.html&#34;&gt;this blog post&lt;/a&gt; which is indeed a good introduction on the tuple-space and how to use them.&lt;/p&gt;

&lt;h2 id=&#34;first-what-is-a-tuple&#34;&gt;First: What is a tuple&lt;/h2&gt;

&lt;p&gt;A tuple is simply a finite list of element&amp;hellip; the element can be of any type. Therefore a tuple set could be used to describe a lot of things. Because actually we can use a tuple set to describe a vector.
And with several vectors we can describe a matrix, and with matrix&amp;hellip;&lt;/p&gt;

&lt;p&gt;For example, a digraph can be represented by a tuple set that discribes its adjacency matrix. Therefore, for example, it can then be possible to transpile a TOSCA description to a tuple-set (cf &lt;a href=&#34;https://blog.owulveryck.info/2015/12/02/orchestrate-a-digraph-with-goroutine-a-concurrent-orchestrator/index.html&#34;&gt;Orchestrate a digraph with goroutine, a concurrent orchestrator&lt;/a&gt; for the decomposition of a TOSCA lifecycle in a matrix).&lt;/p&gt;

&lt;p&gt;Now ok, we can describe a workflow&amp;hellip; but in a distributed application, how can the node share their states?&lt;/p&gt;

&lt;h2 id=&#34;tuple-space&#34;&gt;Tuple space&amp;hellip;&lt;/h2&gt;

&lt;p&gt;In short, a tuple space is a repository of tuples that can be accessed concurrently. A tuple space can be seen as a big bucket full of tuple.&lt;/p&gt;

&lt;p&gt;The tuple space is visible and consistent through all nodes. The tuple space is the memory!&lt;/p&gt;

&lt;p&gt;Ok, so last question: How do we access the tuples?&lt;/p&gt;

&lt;h1 id=&#34;meet-linda&#34;&gt;Meet Linda&lt;/h1&gt;

&lt;p&gt;Linda is a &amp;ldquo;coordination language&amp;rdquo; developed by Sudhir Ahuja at AT&amp;amp;T Bell Laboratories in collaboration with David Gelernter and Nicholas Carriero at Yale University in 1986 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Linda_(coordination_language)&#34;&gt;cf wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Linda&amp;rsquo;s principle is very simple as it relies on 4 basic operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;in(t)&lt;/em&gt; is used to get a tuple from the tuple space if the tuple matches the tuple t. In blocks until a matching tuples exists in the tuple space.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rd(t)&lt;/em&gt; (read) is used to read a tuple from the tuple space if the tuple matches the tuple t. It does not remove it from the tuple space.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;out(t)&lt;/em&gt; puts a tuple in the tuple space&lt;/li&gt;
&lt;li&gt;&lt;em&gt;eval(t)&lt;/em&gt; is a promise. It evaluates the function contained in a tuple t, immediately returns and will place the result in the tuple space later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Important&lt;/em&gt; A tuple can be &lt;strong&gt;actual&lt;/strong&gt; or &lt;strong&gt;formal&lt;/strong&gt;. An actual tuple holds real values. Therefore the &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;rd&lt;/em&gt; operations on an actual tuple succeed if every single value of the tuple matches.
A formal tuple may holds &amp;ldquo;variables&amp;rdquo;. Therefore the &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;rd&lt;/em&gt; operations succeed if the real values match and if the type of the formal match the actual value.&lt;/p&gt;

&lt;p&gt;You can find a more complete description of the language and examples &lt;a href=&#34;http://www.cs.bu.edu/~best/crs/cs551/lectures/lecture-22.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;think-big-start-small-move-fast&#34;&gt;Think big, start small, move fast&lt;/h1&gt;

&lt;p&gt;Since my colleague &lt;a href=&#34;https://www.linkedin.com/in/xavier-talon-7bb5261&#34;&gt;Xavier Talon&lt;/a&gt; told me about linda and the idea of using it with TOSCA, I have thousand ideas running around.
What we would like is to use the linda language to coordinate the nodes of an application topology described by TOSCA.
As the topology is  obviously distributed the tuple space I will use/implement must exists at the scale of a cloud platform.&lt;/p&gt;

&lt;p&gt;A raft based key/value store could be used as a tuple space.
And of course the virtual operator that will implement the linda language and interact with the tuple space must be self-contained.
GO would be a good choice for the implementation of the communication agent because of it self-contained, static binary design (maybe RUST would be too but I don&amp;rsquo;t know RUST yet).
Moreover the built-in concurrency could make the development easy (an eval can be triggered simply in a goroutine).&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;let&amp;rsquo;s POC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all First we need to be sure that a distributed tuple-space could work in the cloud.&lt;/p&gt;

&lt;p&gt;As a proof of concept, I will use the philosophers dinning problem as simply described in page 452 of the paper &lt;a href=&#34;http://www.inf.ed.ac.uk/teaching/courses/ppls/linda.pdf&#34;&gt;Linda in context&lt;/a&gt; from Nicholas Carriero and David Gelernter.&lt;/p&gt;

&lt;p&gt;My goals are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To implement a basic Linda language in go&lt;/li&gt;
&lt;li&gt;To run the philosopher problem locally&lt;/li&gt;
&lt;li&gt;To modify the code so it uses etcd as a tuple space&lt;/li&gt;
&lt;li&gt;To run the philosopher problem on AWS with a philosopher per region&lt;/li&gt;
&lt;li&gt;To use my TOSCAlib to read a topology and encode it in the tuple space&lt;/li&gt;
&lt;li&gt;To run a deployment at scale&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post I will present a basic implementation of the language that solves the dinning problem locally.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Here is the problem as exposed in the paper:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A round table is set with some number of plates (traditionally five); there is a single chopstick between each two plates, and a bowl of rice in the center of the table. Philosophers think, then enter the room, eat, leave the room and repeat the cycle. A philosopher can eat without two chopsticks in hand; the two he needs are the ones to the left and the right of the plate at which he is seated.  If the table is full and all philosophers simultaneously grab their left chopsticks, no right chopsticks are available and deadlock ensues. To prevent deadlock, we allow only four philosophers (or one less than the total number of plates) into the room at any one time.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-implementation&#34;&gt;The implementation&lt;/h2&gt;

&lt;p&gt;I have extracted the C-Linda implementation of this problem and copied it here.&lt;/p&gt;

&lt;h4 id=&#34;the-c-linda-implenentation&#34;&gt;The C linda implenentation&lt;/h4&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Phil(i)
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i;
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) {
      think();
      in(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;);
      in(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, i) ;
      in(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, (i&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;l)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;Num) ;
      eat();
      out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, i);
      out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, (i&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;i)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;Num);
      out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;initialize()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; Hum; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;) C
    out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, i);
    eval(phil(i));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; (Num&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;)) 
      out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;);
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;what-is-needed&#34;&gt;What is needed&lt;/h3&gt;

&lt;p&gt;To solve this particular problem I don&amp;rsquo;t have to fully implement the linda language. There is no need for the &lt;em&gt;rd&lt;/em&gt; action. &lt;em&gt;eval&lt;/em&gt; is simply a fork that I will implement using a goroutine and &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;out&lt;/em&gt; do not use formal tuples.&lt;/p&gt;

&lt;p&gt;The actions will communicate with the tuple space via &lt;code&gt;channels&lt;/code&gt;. Therefore I can create a type Linda composed of two channels for input and output. The actions will be methods of the Linda type.
both &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;rd&lt;/em&gt; method will get all the tuples in a loop and decide to put them back in the space or to keep it.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; Linda &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
  Input  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}
  Output &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;the-tuple-type&#34;&gt;The &lt;em&gt;Tuple&lt;/em&gt; type&lt;/h4&gt;

&lt;p&gt;As a tuple I will use a flat go structure. Therefore I can describe a tuple as an interface{}&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; Tuple &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;the-in-action&#34;&gt;The &lt;em&gt;in&lt;/em&gt; action&lt;/h4&gt;

&lt;p&gt;In will read from the input channel until an object matching its argument is present. If the object read is different, It is sent back in the tuple space via the output channels:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; (l &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;Linda) In(m Tuple) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; l.Input {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; match(m, t) {
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Assign t to m&lt;/span&gt;
        m = t
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;
      }
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Not for me, put the tuple back&lt;/span&gt;
      l.Output &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt; m
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;the-eval-function&#34;&gt;The &lt;em&gt;eval&lt;/em&gt; function&lt;/h3&gt;

&lt;p&gt;The eval function is a bit trickier because we cannot simply pass the function as it would be evaluated before the substitution of the arguments.
What I will do is to pass an array of interface{}. The first argument will hold the function as a first class citizen and the other elements are the arguments of the function.
I will use the reflection to be sure that the argument is a function and executes it in a go routine.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; (l &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;Linda) Eval(fns []&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}) {
	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// The first argument of eval should be the function&lt;/span&gt;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; reflect.ValueOf(fns[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]).Kind() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; reflect.Func {
		fn &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; reflect.ValueOf(fns[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;])
		&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; args []reflect.Value
		&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(fns); i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; {
			args = &lt;span style=&#34;color: #008000&#34;&gt;append&lt;/span&gt;(args, reflect.ValueOf(fns[i]))
		}
		&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;go&lt;/span&gt; fn.Call(args)
	}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;back-to-the-philosophers&#34;&gt;Back to the philosophers&amp;hellip;&lt;/h2&gt;

&lt;h4 id=&#34;the-go-linda-implementation&#34;&gt;The Go-linda implementation&lt;/h4&gt;

&lt;p&gt;Regarding the implementation of Linda, the transcription of the algorithm is simple:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &amp;lt; num; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; {
    ld.Out(chopstick(i))
    ld.Eval([]&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}{phil, i})
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; i &amp;lt; (num &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) {
        ld.Out(ticket{})
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; phil(i &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;) {
    p &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; philosopher{i}
    fmt.Printf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Philosopher %v is born\n&amp;quot;&lt;/span&gt;, p.ID)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; {
        p.think()
        fmt.Printf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;[%v] is hungry\n&amp;quot;&lt;/span&gt;, p.ID)
        ld.In(ticket{})
        ld.In(chopstick(i))
        ld.In(chopstick((i &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; num))
        p.eat()
        ld.Out(chopstick(i))
        ld.Out(chopstick((i &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; num))
        ld.Out(ticket{})
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;the-tuple-space&#34;&gt;The tuple space&lt;/h3&gt;

&lt;p&gt;We have Linda&amp;hellip; that can put and read tuples via channels&amp;hellip; But we still need to plug those channels to the tuple space.
As a first example, we won&amp;rsquo;t store the information and simply pass them from output to input in an endless loop.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt;() {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; output {
        input &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt; i
    }
}()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;execution&#34;&gt;Execution&lt;/h2&gt;

&lt;p&gt;After compiling and executing the code, I can see my philosophers are eating and thinking&amp;hellip;
&lt;pre&gt;
Philosopher 1 is born
[1] is thinking
Philosopher 0 is born
[0] is thinking
Philosopher 3 is born
[3] is thinking
Philosopher 2 is born
[2] is thinking
Philosopher 4 is born
[4] is thinking
[2] has finished thinking
[2] is hungry
[2] is eating
[1] has finished thinking
[1] is hungry
[1] is eating
[4] has finished thinking
[4] is hungry
[4] is eating
&amp;hellip;
&lt;/pre&gt;
The code can be found here &lt;a href=&#34;https://github.com/owulveryck/go-linda/releases/tag/v0.1&#34;&gt;github.com/owulveryck/go-linda&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is a very basic implementation of the first step.&lt;/p&gt;

&lt;p&gt;In my next experiment, I will try to plug etcd as a tuple space so the philosophers could be distributed around the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A foot in NoSQL and a toe in big data</title>
      <link>https://blog.owulveryck.info/2017/01/13/a-foot-in-nosql-and-a-toe-in-big-data/index.html</link>
      <pubDate>Fri, 13 Jan 2017 22:22:46 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2017/01/13/a-foot-in-nosql-and-a-toe-in-big-data/index.html</guid>
      <description>

&lt;p&gt;The more I work with AWS, the more I understand their models. This goes far beyond the technical principles of micro service.
As an example I recently had an opportunity to dig a bit into the billing process.
I had an explanation given by a colleague whose understanding was more advanced than mine.
In his explanation, he mentioned this blog post: &lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-aws-price-list-api/&#34;&gt;New price list API&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;understanding-the-model&#34;&gt;Understanding the model&lt;/h1&gt;

&lt;p&gt;By reading this post and this &lt;a href=&#34;http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html&#34;&gt;explanation&lt;/a&gt;, I understand that the offers are categorized in families (eg AmazonS3) and that an offer is composed of a set of products.
Each product is characterized by its SKU&amp;rsquo;s reference (&lt;a href=&#34;https://en.wikipedia.org/wiki/Stock_keeping_unit&#34;&gt;stock-keeping unit&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;inventory-management&#34;&gt;Inventory management&lt;/h2&gt;

&lt;p&gt;So finally, it is just about inventory management. In the retail, when you say &amp;ldquo;inventory management&amp;rdquo;, the IT usually replies with millions dollars &lt;em&gt;ERP&lt;/em&gt;.
And the more items we have, the more processing power we need and then more dollar are involved&amp;hellip; and richer the IT specialists are (just kidding).&lt;/p&gt;

&lt;p&gt;Moreover enhancing an item by adding some attributes can be painful and risky&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imgs.xkcd.com/comics/exploits_of_a_mom.png&#34; alt=&#34;xkcd&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-nosql-approach&#34;&gt;The NoSQL approach&lt;/h2&gt;

&lt;p&gt;Due to the rise of the online shopping, inventory management must be real time.
The stock inventory is a business service. and placing it in a micro service architecture bring constraints: the request should be satisfied in micro seconds.&lt;/p&gt;

&lt;p&gt;More over, the key/value concept allows to store &amp;ldquo;anything&amp;rdquo; in a value. Therefore, you can store a list of attributes regardless of what the attributes are.&lt;/p&gt;

&lt;p&gt;When it comes to NoSQL, there are usually two approaches to store the data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simple Key/Value;&lt;/li&gt;
&lt;li&gt;document-oriented.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first I did and experiment with a simple key/value store called BoltDB (which is more or less like Redis).
In this approach the value stored was a json representation&amp;hellip; A kind of document.
Then I though that it could be a good idea to use a more document oriented service: DynamoDB&lt;/p&gt;

&lt;h1 id=&#34;geek-time&#34;&gt;Geek time&lt;/h1&gt;

&lt;p&gt;In this part I will explain how to get the data from AWS and to store them in the dynamoDB service. The code is written in GO and is just a proof of concept.&lt;/p&gt;

&lt;h2 id=&#34;the-product-informations&#34;&gt;The product informations&lt;/h2&gt;

&lt;p&gt;A product&amp;rsquo;s technical representation is described &lt;a href=&#34;http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/reading-an-offer.html&#34;&gt;here&lt;/a&gt;.
We have:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Product Details&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
   &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sku&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sku&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The SKU of the product&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;productFamily&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The product family of the product&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
         &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;attributeName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;attributeValue&amp;quot;&lt;/span&gt;,
      }
   }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are three important entries but only two are mandatories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;SKU&lt;/em&gt;: A unique code for a product.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Product Family&lt;/em&gt;: The category for the type of product. For example, compute for Amazon EC2 or storage for Amazon S3.&lt;/li&gt;
&lt;li&gt;Attributes: A list of all of the product attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-the-table&#34;&gt;Creating the &amp;ldquo;table&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;As my goal is for now to create a proof of concept and play with the data, I am creating the table manually.
DynamoDB allows the creation of two indexes per table. So I create a table &lt;em&gt;Products&lt;/em&gt; with two indexes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SKU&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProductFamily&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.owulveryck.info/assets/images/bigdata/blog-dynamo-create-table.png&#34; alt=&#34;Create Table&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;principle&#34;&gt;Principle&lt;/h2&gt;

&lt;p&gt;The data is retrieved by a simple &lt;code&gt;http.Get&lt;/code&gt; method. Then a &lt;code&gt;json.Decoder&lt;/code&gt; takes the body (an &lt;code&gt;io.Reader&lt;/code&gt;) as argument and decode it in a predefined structure.
Once the structure is filled, I will store it in the DynamoDB.&lt;/p&gt;

&lt;h3 id=&#34;the-structures&#34;&gt;The structures&lt;/h3&gt;

&lt;p&gt;I need three go structures. Two will be used to decode and range through the offer index. The other one will hold all the product details for a specific offer.&lt;/p&gt;

&lt;h4 id=&#34;offer-index&#34;&gt;Offer Index&lt;/h4&gt;

&lt;p&gt;The offer index is composed of offers referenced in by an offer name (&lt;code&gt;map[string]offer&lt;/code&gt;)
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; offerIndex &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    FormatVersion   &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;           &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;formatVersion&amp;quot;`&lt;/span&gt;
    Disclaimer      &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;           &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;disclaimer&amp;quot;`&lt;/span&gt;
    PublicationDate time.Time        &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;publicationDate&amp;quot;`&lt;/span&gt;
    Offers          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;]offer &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;offers&amp;quot;`&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;An offer in the index is characterized by three elements. I am catching all of them, but only &lt;code&gt;CurrrentVersionURL&lt;/code&gt; is useful in my case.
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; offer &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    OfferCode         &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;offerCode:&amp;quot;`&lt;/span&gt;
    VersionIndexURL   &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;versionIndexUrl&amp;quot;`&lt;/span&gt;
    CurrentVersionURL &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;currentVersionUrl&amp;quot;`&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;products&#34;&gt;Products&lt;/h4&gt;

&lt;p&gt;I hold all the product details in a structure. The product details holds all the products in a map whose key is the SKU. Therefore a SKU field is useless.
The Attribute value is an interface{} because it can be of any type (more on this later in the post).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; : In case of massive data flow, it would probably be better to decode the stream pieces by pieces (as written in the &lt;a href=&#34;https://golang.org/pkg/encoding/json/#Decoder.Decode&#34;&gt;the go documentation&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; productDetails &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    Products &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// the key is SKU&lt;/span&gt;
        ProductFamily &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;                 &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;productFamily&amp;quot;`&lt;/span&gt;
        Attributes    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{} &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;attributes&amp;quot;`&lt;/span&gt;
    } &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;products&amp;quot;`&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;getting-the-data&#34;&gt;Getting the data&lt;/h3&gt;

&lt;h4 id=&#34;offers&#34;&gt;Offers&lt;/h4&gt;

&lt;p&gt;The first action is to grab the json of the offer index and put it in a object of type &lt;code&gt;offerIndex&lt;/code&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;resp, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; http.Get(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/index.json&amp;quot;&lt;/span&gt;)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; oi offerIndex
err = json.NewDecoder(resp.Body).Decode(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;oi)
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// oi contains all the offers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then loop for each offer and do a &lt;code&gt;GET&lt;/code&gt; of every &lt;code&gt;CurrentVersionURL&lt;/code&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; _ , o &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; oi.Offers {
        resp, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; http.Get(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;https://pricing.us-east-1.amazonaws.com&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; o.CurrentVersionURL)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;and-products&#34;&gt;And products&lt;/h4&gt;

&lt;p&gt;The same principles applies for the products, we decode the stream in an object:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; pd productDetails
err = json.NewDecoder(resp.Body).Decode(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;pd)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have all the informations we are ready to store them in the database.&lt;/p&gt;

&lt;h2 id=&#34;storing-the-informations&#34;&gt;Storing the informations&lt;/h2&gt;

&lt;p&gt;As usual with any AWS access, you need to create a &lt;code&gt;session&lt;/code&gt; and a &lt;code&gt;service&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sess, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; session.NewSession()
svc &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; dynamodb.New(sess)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/aws/session/&#34;&gt;session&lt;/a&gt; will take care of the credentials by reading the appropriate files or environment variables.&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;svc&lt;/code&gt; object is used to interact with the DynamoDB service. To store an object we will use the method &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#DynamoDB.PutItem&#34;&gt;PutItem&lt;/a&gt; which takes as argument a reference to &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#PutItemInput&#34;&gt;PutItemInput&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; All of the AWS service have the same logic and work the same way: Action takes as a parameter a reference to a type ActionInput and returns a type ActionOutput.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to create a &lt;code&gt;PutItemInput&lt;/code&gt; element from a &lt;code&gt;Product&lt;/code&gt; type.&lt;/p&gt;

&lt;h4 id=&#34;the-dynamodb-item&#34;&gt;the Dynamodb Item&lt;/h4&gt;

&lt;p&gt;The two mandatory fields I will use for the &lt;code&gt;PutItemInput&lt;/code&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableName&lt;/code&gt; (which is Product in my case)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Item&lt;/code&gt; (which obviously hold what to store)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other fields exists, but to be honest, I don&amp;rsquo;t know whether I need them by now.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Item&lt;/code&gt; expects a map whose key is the field name (In our case it can be &amp;ldquo;SKU&amp;rdquo;, &amp;ldquo;ProductFamily&amp;rdquo; or anything) and whose value is a reference to the special type &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#AttributeValue&#34;&gt;AttributeValue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the documentation the definition is:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AttributeValue Represents the data for an attribute. You can set one, and only one, of the elements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The AttributeValue is &lt;em&gt;typed&lt;/em&gt; (The types are described &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html&#34;&gt;here&lt;/a&gt;)
Therefore our informations (remember the &lt;code&gt;map[string]inteface{}&lt;/code&gt;) must be &amp;ldquo;convrted&amp;rdquo; to a dynamodb format.
This task has been made easy by using the package &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html&#34;&gt;dynamodbattribute&lt;/a&gt; which does it for us:&lt;/p&gt;

&lt;p&gt;To fill the item I need to loop for every product in the object &lt;code&gt;pd&lt;/code&gt; and create an item:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; pd.Products {
      item[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SKU&amp;quot;&lt;/span&gt;], err = dynamodbattribute.Marshal(k)
      item[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ProductFamily&amp;quot;&lt;/span&gt;], err = dynamodbattribute.Marshal(v.ProductFamily)
      item[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Attributes&amp;quot;&lt;/span&gt;], err = dynamodbattribute.Marshal(v.Attributes)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once I have an Item, I can create the parameters and send the request to the DB:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Item:      item,
      TableName: aws.String(config.TableName),
}
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Now put the item, discarding the result&lt;/span&gt;
_ , err = svc.PutItem(params)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;execution-and-conclusion&#34;&gt;Execution and conclusion&lt;/h1&gt;

&lt;p&gt;Once compiled I can run the program that will take a couple of minute to execute (it can easily be optimized simply by processing each offer in a separate goroutine).
Then I can find the informations in my DB:
&lt;img src=&#34;https://blog.owulveryck.info/assets/images/bigdata/blog-dynamo-result.png&#34; alt=&#34;Result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now that I have the informations, on the same principle I can grab the prices and put a little web service in front of it.
And I could even code a little fronted for the service.&lt;/p&gt;

&lt;p&gt;I am aware that if you are not an average go programmer the code may seem tricky, but I can assure you that it is not (the whole example is less than 100 lines long including the comments).
The AWS API seems strange and not idiomatic, but it has the huge advantage to be efficient and coherent.&lt;/p&gt;

&lt;p&gt;Regarding the inventory model. it can be used for any product or even any stock and prices. It is a cheap (and yet efficient) way to manage an inventory.&lt;/p&gt;

&lt;h1 id=&#34;full-code&#34;&gt;Full code&lt;/h1&gt;

&lt;p&gt;The full code of the example can be found on my &lt;a href=&#34;https://gist.github.com/owulveryck/f9665470e8334e8609434feeeddc6071&#34;&gt;gist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Image reKognition with a webcam, go and AWS.</title>
      <link>https://blog.owulveryck.info/2016/12/16/image-rekognition-with-a-webcam-go-and-aws./index.html</link>
      <pubDate>Fri, 16 Dec 2016 14:51:18 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/12/16/image-rekognition-with-a-webcam-go-and-aws./index.html</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a while since I last posted something. I will fill the gap with a quick post about &lt;em&gt;rekognition&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/rekognition/?nc1=h_ls&#34;&gt;rekognition&lt;/a&gt; is a service from AWS that is described as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Deep learning-based image recognition&lt;/p&gt;

&lt;p&gt;Search, verify, and organize millions of images&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this light post, I will present a simple method to grab a picture from my webcam, send it to rekognition and display the result.&lt;/p&gt;

&lt;p&gt;The part of the result I will focus on is the emotion. In other word, I will ask amazon: &amp;ldquo;An I happy?&amp;rdquo;.&lt;/p&gt;

&lt;h1 id=&#34;getting-the-picture-from-the-webcam&#34;&gt;Getting the picture from the webcam&lt;/h1&gt;

&lt;p&gt;I am using the package &lt;a href=&#34;github.com/blackjack/webcam&#34;&gt;github.com/blackjack/webcam&lt;/a&gt; to grab the picture.&lt;/p&gt;

&lt;h2 id=&#34;capabilities-of-the-webcam-and-image-format&#34;&gt;Capabilities of the webcam and image format&lt;/h2&gt;

&lt;p&gt;My webcam is handling the MJPEG format.
Therefore, after the creation of a &lt;em&gt;cam&lt;/em&gt; object and set the correct settings to grab mjpeg, I can read a frame in JPEG:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ...
cam, err := webcam.Open(&amp;quot;/dev/video0&amp;quot;) // Open webcam
// ...
// Setting the format:
_,_,_, err := cam.SetImageFormat(format, uint32(size.MaxWidth), uint32(size.MaxHeight))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;format&lt;/code&gt; is of type &lt;code&gt;uint32&lt;/code&gt; and computable thanks to the informations present in &lt;a href=&#34;http://lxr.free-electrons.com/source/include/uapi/linux/videodev2.h&#34;&gt;/usr/include/linux/videodev2.h&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MJPEG is: 1196444237&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: To be honest, I did not evaluate the FOURCC method; I have requested the supported format of my webcam with their descriptions :)&lt;/p&gt;

&lt;h2 id=&#34;grabbing-the-picture&#34;&gt;Grabbing the picture&lt;/h2&gt;

&lt;p&gt;In a endless &lt;code&gt;for&lt;/code&gt; loop, a frame is read with a call to &lt;code&gt;ReadFrame&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for {
    timeout := uint32(5) //5 seconds
    err = cam.WaitForFrame(timeout)
    frame, err := cam.ReadFrame()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;aws&#34;&gt;AWS&lt;/h1&gt;

&lt;p&gt;The API to import to use the service is &lt;code&gt;github.com/aws/aws-sdk-go/service/rekognition&lt;/code&gt; and is documented here: &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/&#34;&gt;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The operation that I am using to detect the emotion is &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#Rekognition.DetectFaces&#34;&gt;DetectFaces&lt;/a&gt; that takes an pointer to &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#DetectFacesInput&#34;&gt;DetectFacesInput&lt;/a&gt; with is composed of a pointer to an &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#Image&#34;&gt;Image&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-input&#34;&gt;Creating the input&lt;/h2&gt;

&lt;p&gt;The first thing that needs to be created is the &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#Image&#34;&gt;Image&lt;/a&gt; object from our &lt;code&gt;frame&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if len(frame) != 0 {
    image := &amp;amp;rekognition.Image{ // Required
        Bytes: frame,
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we create the DetectFacesInput:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;params := &amp;amp;rekognition.DetectFacesInput{
        Image: image,
        Attributes: []*string{
                aws.String(&amp;quot;ALL&amp;quot;), 
        },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;ALL&lt;/code&gt; attributes is present, otherwise AWS does not return the complete description of what it has found.&lt;/p&gt;

&lt;h2 id=&#34;sending-the-query&#34;&gt;Sending the query&lt;/h2&gt;

&lt;h3 id=&#34;pricing-notice-and-warning&#34;&gt;Pricing notice and &lt;strong&gt;warning&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The price of the service as of today is 1 dollar per 1000 request. That sounds cheap, but at 25 FPS, this may cost a lot.
Therefore, I have set up a read request that only process a picture if we press &lt;em&gt;enter&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;bufio.NewReader(os.Stdin).ReadBytes(&#39;\n&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;session&#34;&gt;Session&lt;/h3&gt;

&lt;p&gt;As usual, to query AWS we need to create a session:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var err error
sess, err = session.NewSession(&amp;amp;aws.Config{Region: aws.String(&amp;quot;us-east-1&amp;quot;)})
if err != nil {
    fmt.Println(&amp;quot;failed to create session,&amp;quot;, err)
    return
}
svc = rekognition.New(sess)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: The &lt;code&gt;session&lt;/code&gt; library will take care of connections informations such as environment variables like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AWS_SECRET_ ACCESS_KEY_ID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;query-and-result&#34;&gt;Query and result&lt;/h3&gt;

&lt;p&gt;Simply send the query&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;esp, err := svc.DetectFaces(params)

if err != nil {
        fmt.Println(err.Error())
        return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is of type &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#DetectFacesOutput&#34;&gt;DetectFacesOutput&lt;/a&gt;.
This type is composed of a array of FaceDetails because obviously there can me more than one person per image.
So we will loop and display the emotion for each face detected:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for i, fd := range resp.FaceDetails {
        fmt.Printf(&amp;quot;The person %v is &amp;quot;, i)
        for _, e := range fd.Emotions {
                fmt.Printf(&amp;quot;%v, &amp;quot;, *e.Type)
        }
        fmt.Printf(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;run&#34;&gt;Run:&lt;/h1&gt;

&lt;pre&gt;
Resulting image format: MJPEG (320x240)
Press enter to process 
The person 0 is HAPPY, CONFUSED, CALM, 
&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s all folks. The full code can be found &lt;a href=&#34;https://gist.github.com/owulveryck/33753125afa6284cd5dbbb1bd4d1eb54&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the test I made, I was always happy. I&amp;rsquo;ve tried to be angry or sad, without success&amp;hellip; Maybe I have a happy face.
I should try with someone else maybe.&lt;/p&gt;

&lt;p&gt;The service is nice and opens the door to a lot of applications:
For example to monitor my home and sends an alert if someone is in my place and &lt;strong&gt;not from my family&lt;/strong&gt; (or not the cat :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SPA with Gopherjs</title>
      <link>https://blog.owulveryck.info/2016/10/19/spa-with-gopherjs/index.html</link>
      <pubDate>Wed, 19 Oct 2016 07:24:51 +0200</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/10/19/spa-with-gopherjs/index.html</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Single page application (SPA) are a standard when dealing with mobile apps.
Unfortunately, by now, JavaScript is the only programming language supported by a browser.&lt;/p&gt;

&lt;p&gt;Therefore, to code web UI it remains a must.&lt;/p&gt;

&lt;h2 id=&#34;life-of-an-ex-sysadmin-who-wants-to-code-a-web-app-getting-depressed&#34;&gt;Life of an ex sysadmin who wants to code a web app: getting depressed&lt;/h2&gt;

&lt;p&gt;To make the development easier, your friend, who is &amp;ldquo;web developer&amp;rdquo; will recommend you to use a marvelous framework.
Depending on the orientation of the wind, the moon or its reading, he will encourage you to use &lt;code&gt;reactjs&lt;/code&gt;, &lt;code&gt;angular&lt;/code&gt;, &lt;code&gt;ember&lt;/code&gt; or whatever exotic
tool.&lt;/p&gt;

&lt;p&gt;With some recommendation from my real friends and from Google, I&amp;rsquo;ve started an app based on &lt;a href=&#34;http://ionicframework.com/&#34;&gt;ionic&lt;/a&gt; which is based on &lt;a href=&#34;https://angularjs.org/&#34;&gt;angular&lt;/a&gt;.
As I did not know anything about angular, I&amp;rsquo;ve watched a (very good) &lt;a href=&#34;https://www.youtube.com/watch?v=i9MHigUZKEM&#34;&gt;introduction&lt;/a&gt; and followed the ionic tutorial.&lt;/p&gt;

&lt;p&gt;So far so good&amp;hellip;&lt;/p&gt;

&lt;p&gt;Then I implemented a SSO with Facebook. I wrote a backend in &lt;code&gt;go&lt;/code&gt; to handle the token generation and the used database connection.
I started to code it by hand, until a friend tells me about the angular module &lt;a href=&#34;https://github.com/sahat/satellizer&#34;&gt;Satellizer&lt;/a&gt; that was suppose to handle the logic for me.
And it did&amp;hellip;. It was suddenly automagic:&lt;/p&gt;

&lt;p&gt;Everything was working on my browser. I was happy, So I decided to deploy my app on my iPhone and enjoy the power of Cordova.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s when the headache started: There was something wrong on the mobile phone version. A bug!&lt;/p&gt;

&lt;p&gt;I tried to debug it, with Xcode, with Safari&amp;hellip; The more I was searching, the more I had to dive into the framework. Too many magic in it for
something that was, in fine, not a bug &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I asked some help from a friend and his first reply was: &amp;ldquo;which version of angular? Because in version 2 they have changed a lot of concepts&amp;rdquo;&lt;/p&gt;

&lt;p&gt;That was too much.
I considered that this world made of JavaScript, frameworks, grunt, bower, gulp, npm or whatever fancy tool was definitely not for me.
Too many work to learn something already outdated.&lt;/p&gt;

&lt;p&gt;On top of that, I&amp;rsquo;ve never been a callback man, I hate them since my X11/Motif programming course. I do like CSP!&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://blog.owulveryck.info/assets/images/not_my_type.png&#34; alt=&#34;Matt Holt&#39;s Tweet&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;out-of-the-depression&#34;&gt;Out of the depression!&lt;/h2&gt;

&lt;p&gt;Ok, I abandoned those tools. But I still want to code my app, and I&amp;rsquo;m not the kind of guy that easily give up.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s resume my needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I need a MVC, because it&amp;rsquo;s the most natural way to code web ui today&lt;/li&gt;
&lt;li&gt;MVC is not framework dependent&lt;/li&gt;
&lt;li&gt;A SPA is the good choice for a mobile app and Cordova makes things easy&lt;/li&gt;
&lt;li&gt;Javascript is mandatory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve digge a little bit and I&amp;rsquo;ve found this blog post: &lt;a href=&#34;https://mmikowski.github.io/no-frameworks/&#34;&gt;Do you really want an SPA framework?&lt;/a&gt; which leads me to &amp;ldquo;the solution&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;I will code my model/view/controller from scratch.
But as I want to preserve my health and stay away from Javacript, I will code it with something fun: go.&lt;/p&gt;

&lt;p&gt;At the last doGo.eu &lt;a href=&#34;https://twitter.com/shurcool&#34;&gt;Dmitri Shuralyov&lt;/a&gt; gave a very good introduction about &lt;a href=&#34;https://github.com/gopherjs/gopherjs&#34;&gt;gopherjs&lt;/a&gt;. Gopherjs is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Source-to-source_compiler&#34;&gt;transpiler&lt;/a&gt; that converts go code into javascript.&lt;/p&gt;

&lt;p&gt;You can code all your logic in go and transpile it in javascript, or you can use is to access you DOM or other javascript libraries.&lt;/p&gt;

&lt;p&gt;A bunch of bindings to famous javascript libraries such as jQuery already exists on gihtub,&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see an example and implement a very basic routing mechanism relying on a pure js library.&lt;/p&gt;

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;p&gt;I will code a little page based on bootstrap.&lt;/p&gt;

&lt;h2 id=&#34;a-basic-go-code&#34;&gt;A basic go code&lt;/h2&gt;

&lt;p&gt;The dynamic part will be coded in pure GO in a file called &lt;code&gt;main.go&lt;/code&gt; and transpiled into javscript code with the help of the &lt;code&gt;gopherjs&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gopherjs build main.go -o js/app.js -m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make things easier, I can add some directives in my go code in the form of a comment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
//go:generate gopherjs build main.go -o js/app.js -m
// +build ignore

import (
  &amp;quot;log&amp;quot;
)

func main() {
    log.Println(&amp;quot;Hello World&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore I will be able to generate my code directly with a simple call to &lt;code&gt;go generate&lt;/code&gt; and it will produce the &lt;code&gt;js/app.js&lt;/code&gt; file for me.&lt;/p&gt;

&lt;h2 id=&#34;the-page&#34;&gt;The page&lt;/h2&gt;

&lt;p&gt;The structure of the main page is taken from bootstrap&amp;rsquo;s &lt;a href=&#34;http://getbootstrap.com/examples/starter-template/#&#34;&gt;starter template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I simply add my javascript file generated with gopherjs :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;js/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I launch my page, I will have a &amp;ldquo;hello world&amp;rdquo; written in the javascript browser of my console.&lt;/p&gt;

&lt;h1 id=&#34;the-spa&#34;&gt;the SPA&lt;/h1&gt;

&lt;p&gt;Now, I will implement a very basic SPA.
It will display three tabs accessible by their names (for demo purpose):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.owulveryck.info/#&#34;&gt;/#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.owulveryck.info/#about&#34;&gt;/#about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.owulveryck.info/#contact&#34;&gt;/#contact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to trigger a javascript code that could change the content of the body by clicking on the links.&lt;/p&gt;

&lt;h2 id=&#34;routing&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;A good SPA needs a good routing system to deal with anchor refs.&lt;/p&gt;

&lt;p&gt;There are several implementation of gopherjs based routing mechanism.&lt;/p&gt;

&lt;p&gt;But, for the purpose of this blog post, I will use a pure Javascript routing library: &lt;a href=&#34;https://github.com/flatiron/director#routing-table&#34;&gt;Director.js&lt;/a&gt;. It&amp;rsquo;s the router used in the todoMVC example and it will allow me to show how to interact with global javascript objects.&lt;/p&gt;

&lt;p&gt;The first thing to do is to include the js file at the end of the &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;js/director.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I will create a GO type &lt;em&gt;Router&lt;/em&gt; that will correspond to the Router objet in javascript.
To do so, the Router type must be a &lt;a href=&#34;https://godoc.org/github.com/gopherjs/gopherjs/js#Object&#34;&gt;*js.Object&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/gopherjs/gopherjs/js&amp;quot;

type Router struct {
    *js.Object
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I define a constructor, that simply get the router object from the global scope of the javascript engine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewRouter() *Router {
    return &amp;amp;Router{js.Global.Get(&amp;quot;Router&amp;quot;).New()}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, to actually implement my &lt;a href=&#34;https://github.com/flatiron/director#adhoc-routing&#34;&gt;adhoc-routing&lt;/a&gt; as described in the doc of director.js,
I must implement the &lt;code&gt;on&lt;/code&gt; and the &lt;code&gt;init&lt;/code&gt; bindings.&lt;/p&gt;

&lt;p&gt;Once done, I add the routes in my &lt;code&gt;main&lt;/code&gt; func:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/owulveryck/3256d582ad2241eeeaf118d5bf9c1cd0.js?file=router.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;If I launch the page, I can now click on the links and it will diplay hello in my console.&lt;/p&gt;

&lt;p&gt;You can check the full code on &lt;a href=&#34;https://gist.github.com/owulveryck/3256d582ad2241eeeaf118d5bf9c1cd0&#34;&gt;this gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You see that I&amp;rsquo;ve let the function as &lt;code&gt;notImplementedYet&lt;/code&gt;, but replacing it with a jQuery call is trivial:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/gopherjs/jquery&amp;quot;

//convenience:
var jQuery = jquery.NewJQuery

func content() {
    jQuery(&amp;quot;#main&amp;quot;).SetText(&amp;quot;Welcome to GopherJS&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Gopherjs is not trivial, but it has the ability to make the web development more structured.
I&amp;rsquo;ve started a web ui from scratch and reach the same goal as the one I reached in javacript in only 2 days (compared to 3 weeks).&lt;/p&gt;

&lt;p&gt;Of course, a javascript-master-of-the-world would argue that he would implement it in 2 hours, but that&amp;rsquo;s not the point here.
The point is that I can use all the &amp;ldquo;benefits&amp;rdquo; of the go principles easily to write a web ui.&lt;/p&gt;

&lt;p&gt;You can check the development of the &lt;a href=&#34;https://github.com/nhite/frontend&#34;&gt;Nhite fronted&lt;/a&gt; to watch the progress I will make (or not) with this technology.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1 - Actually, I figured out what the &amp;ldquo;bug&amp;rdquo; was later, when I finished the implementation in go and there was no magic anymore in the code.
The oauth2 flow I use is &amp;ldquo;&lt;a href=&#34;https://tools.ietf.org/html/rfc6749#section-1.3.1&#34;&gt;Authorization code&lt;/a&gt;&amp;rdquo;. In this flow, you query the authorization server (here facebook) and send it the client identifier and &lt;em&gt;a redirection URI&lt;/em&gt;.
In my dev environment this redirection URI is set to &amp;ldquo;&lt;a href=&#34;http://localhost&amp;quot;&#34;&gt;http://localhost&amp;quot;&lt;/a&gt;. Once the user is logged in (on the Facebook page), the navigation window redirects him in the application at localhost.
When running on iOS with &lt;em&gt;cordova&lt;/em&gt; the files are served locally (file://,,,) and there is no way to specify a redirect URI that point to file://, therefore the redirect URI must point somewhere else&amp;hellip; but in this case, getting the code from the application becomes tricky because of the security policies. I could do a complete blog post about this.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt; &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>HTTP over UDT for inter-region file transfer</title>
      <link>https://blog.owulveryck.info/2016/10/17/http-over-udt-for-inter-region-file-transfer/index.html</link>
      <pubDate>Mon, 17 Oct 2016 20:50:18 +0200</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/10/17/http-over-udt-for-inter-region-file-transfer/index.html</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Transferring files between server is no big deal with nowadays network equipments.
You use &lt;code&gt;rsync&lt;/code&gt;, &lt;code&gt;scp&lt;/code&gt; or even &lt;code&gt;http&lt;/code&gt; to get a file from A to B.&lt;/p&gt;

&lt;p&gt;Of course, you rely on the TCP stack so you have a decent reliability in the transport.&lt;/p&gt;

&lt;p&gt;But TCP has its drawback, especially when it needs to go through a lot of equipments. Typically in the cloud, or over a VPN.&lt;/p&gt;

&lt;p&gt;To prevent the drawbacks of the TCP protocol, there are several solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use UDP, but UDP by itself is not &amp;ldquo;reliable&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Develop another layer 4 protocol, but it cannot be done in a pure user space. You need to develop a system driver. It cannot be easily done on a large scale.&lt;/li&gt;
&lt;li&gt;Use UDP and another framework on top of UDP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;layer-4-udp&#34;&gt;Layer 4: UDP?&lt;/h2&gt;

&lt;p&gt;Yes, UDP, but with an &amp;ldquo;extra&amp;rdquo; layer. I&amp;rsquo;ve had the opportunity to try three of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quic by Google&lt;/li&gt;
&lt;li&gt;FASP by ASPERA&lt;/li&gt;
&lt;li&gt;UDT by Dr GU.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;quic&#34;&gt;Quic&lt;/h3&gt;

&lt;p&gt;First Google, along with its &lt;a href=&#34;https://en.wikipedia.org/wiki/QUIC&#34;&gt;quic&lt;/a&gt; protocol, tries to enhance the user experience. Actually, a quic implementation is already present in chrome and within google web servers. I&amp;rsquo;ve heard about quic at the &lt;a href=&#34;https://dotgo.eu&#34;&gt;dotGo&lt;/a&gt;; &lt;a href=&#34;https://github.com/lucas-clemente&#34;&gt;Lucas Clemente&lt;/a&gt; has presented its work in progress of a quic implementation in GO.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve tried it, but it lacks a client part by now, and the &lt;a href=&#34;https://www.chromium.org/quic/playing-with-quic&#34;&gt;quic tools&lt;/a&gt; from chromium are far from being usable in a production environment.&lt;/p&gt;

&lt;h3 id=&#34;aspera-s-fasp&#34;&gt;Aspera&amp;rsquo;s FASP&lt;/h3&gt;

&lt;p&gt;Aspera has its own protocol. It is based on UDP. I&amp;rsquo;ve seen it running, and yes, it simply works!
The problem is that it is not open source and a bit expensive.&lt;/p&gt;

&lt;h3 id=&#34;the-udt-protocol&#34;&gt;The UDT protocol&lt;/h3&gt;

&lt;p&gt;The UDT protocol is described by ASPERA as its main competitor &lt;a href=&#34;http://asperasoft.com/fileadmin/media/Asperasoft.com/Resources/White_Papers/fasp_Critical_Technology_Comparison_AsperaWP.pdf&#34;&gt;here&lt;/a&gt;.
It&amp;rsquo;s open source and worth the try.
It&amp;rsquo;s the one I will use for my tests.
The code is distributed as a C++ library, but it exists GO bindings.&lt;/p&gt;

&lt;h2 id=&#34;the-layer-7-http&#34;&gt;The Layer 7: HTTP&lt;/h2&gt;

&lt;p&gt;To actually transfer a file, I can use the &lt;code&gt;udtcat&lt;/code&gt; tool provided in the github of go-udtwrapper.
It is ok for a test, but I won&amp;rsquo;t be able to serve multiple files, to resume a transfer etc&amp;hellip; So I need a layer 7 protocol.
HTTP is, according to me, a good choice.&lt;/p&gt;

&lt;h1 id=&#34;the-implementation-in-go&#34;&gt;The implementation in GO&lt;/h1&gt;

&lt;p&gt;Implementing a simple client/server http-over-udt in go is relatively easy. The HTTP is interfaced in a way that the transport can be easily changed.
Therefore, no need to reimplement a complete HTTP stack; GO has all I need in its standard library.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://blog.owulveryck.info/assets/images/save-princess-go.jpg&#34; alt=&#34;/assets/images/save-princess-go.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://toggl.com/programming-princess&#34;&gt;https://toggl.com/programming-princess&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I will use this fork of &lt;a href=&#34;github.com/Lupus/go-udtwrapper&#34;&gt;go-udtwrapper&lt;/a&gt; which seems to be the most up-to-date.&lt;/p&gt;

&lt;h2 id=&#34;the-server&#34;&gt;The server&lt;/h2&gt;

&lt;p&gt;Implementing a basic http server over UDT is very easy.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://golang.org/pkg/net/http/#Serve&#34;&gt;Serve function&lt;/a&gt; from the http package takes a &lt;code&gt;net.Listener&lt;/code&gt; as argument.
The &lt;code&gt;udt.Listen&lt;/code&gt; function implements the &lt;a href=&#34;https://golang.org/pkg/net/#Listener&#34;&gt;net.Listener&lt;/a&gt; interface.&lt;/p&gt;

&lt;p&gt;Therefore we can simply use this code to serve HTTP content via the DefaultMuxer over udt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ln, _ := udt.Listen(&amp;quot;udt&amp;quot;, config.Addr)
http.Serve(ln, nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A full implementation that serves local file is simply done by:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/owulveryck/6a44885c2b3527159f496c21071ab8df.js?file=server.go&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;the-client&#34;&gt;The client&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;http.Client&lt;/code&gt;&amp;rsquo;s DefautTransport relies on TCP.
Therefore we must completely rewrite a Transport to use UDT.&lt;/p&gt;

&lt;p&gt;The Transport entry of the Client implements the RoundTripper interface.&lt;/p&gt;

&lt;p&gt;The key point is to write a client transport for UDT that implements the RoundTripper interface.&lt;/p&gt;

&lt;h3 id=&#34;the-http-roundtripper-interface&#34;&gt;The http.RoundTripper interface&lt;/h3&gt;

&lt;p&gt;Here is an example of an implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// UdtClient implements the http.RoundTripper interface
type udtClient struct{}

func (c udtClient) RoundTrip(r *http.Request) (*http.Response, error) {
      d := udt.Dialer{}
      conn, err := d.Dial(&amp;quot;udt&amp;quot;, r.URL.Host)
      if err != nil {
          return nil, err
      }
      err = r.Write(conn)
      if err != nil {
          return nil, err
      }
      return http.ReadResponse(bufio.NewReader(conn), r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-full-client-code&#34;&gt;The full client code&lt;/h3&gt;

&lt;p&gt;A simple client that will perform a GET operation on our server would be:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/owulveryck/6a44885c2b3527159f496c21071ab8df.js?file=client.go&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;building-the-tools&#34;&gt;Building the tools&lt;/h3&gt;

&lt;p&gt;As we rely on CGO, to do a static compilation, we must use the extra flags: &lt;code&gt;go build --ldflags &#39;-extldflags &amp;quot;-static&amp;quot;&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is a very basic implementation of http over UDT.
I have developed a more complete tool for my client, but it cannot be published in open source.&lt;/p&gt;

&lt;p&gt;Among the things that I have done there are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gzip compression&lt;/li&gt;
&lt;li&gt;Partial content for resuming a broken download (with http.ServeContent)&lt;/li&gt;
&lt;li&gt;SHA256 checking at the end of the transport&lt;/li&gt;
&lt;li&gt;an HTTP middleware (Rest API) to query the transfer states, rates and efficiency via the PerfMon interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What&amp;rsquo;s not done yet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TLS and mutual authentication&lt;/li&gt;
&lt;li&gt;good benchmarks to actually measure the performances of UDT.&lt;/li&gt;
&lt;li&gt;Downloading chunks to optimize the speed of transfer and the bandwith usage&lt;/li&gt;
&lt;li&gt;maybe a POST method to upload a file in multipart&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Processing CSV files with golang, python and perl</title>
      <link>https://blog.owulveryck.info/2016/09/11/processing-csv-files-with-golang-python-and-perl/index.html</link>
      <pubDate>Sun, 11 Sep 2016 20:27:49 +0200</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/09/11/processing-csv-files-with-golang-python-and-perl/index.html</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;System engineers are used to CSV files.
They may be considered as a good bridge between Excel and the CLI.
They are also a common way to format the output of a script so data can be exploited easily from command lines tools such as &lt;em&gt;sort&lt;/em&gt; , &lt;em&gt;awk&lt;/em&gt;,&lt;em&gt;uniq&lt;/em&gt;, &lt;em&gt;grep&lt;/em&gt;, and so on.&lt;/p&gt;

&lt;p&gt;The point is that when there is a significant amount of data, parsing it with shell may be painful and extremely slow.&lt;/p&gt;

&lt;p&gt;This is a very simple and quick post about parsing CSV files in python, perl and golang.&lt;/p&gt;

&lt;h1 id=&#34;the-use-case&#34;&gt;The use case&lt;/h1&gt;

&lt;p&gt;I consider that I have a CSV file with 4 fields per row.
The first field is a server name, and I may have 700 different servers.
The second field is a supposed disk size for a certain partition. The other fields are just present to discriminate the rows in my example&lt;/p&gt;

&lt;p&gt;What I would like to know is the total disk size per server.&lt;/p&gt;

&lt;p&gt;I will implement three versions of parsing, and I will look for the result of a certain server to see if the computation is ok.
Then I will compare the exeuction time of each implementation&lt;/p&gt;

&lt;h2 id=&#34;generating-the-samples&#34;&gt;Generating the samples&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m using a very simple shell loop to generate the samples. I&amp;rsquo;m generating a file with 600000 lines.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/owulveryck/4f9ddb952c5f1ef708b60a9907733969.js?file=Generation.sh&#34;&gt;&lt;/script&gt;

&lt;p&gt;I&amp;rsquo;ve randmly chosen to check the size of SERVER788 (but I will compute the size for all the servers).&lt;/p&gt;

&lt;p&gt;I have a lot of entries for my server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grep SERVER788 sample.csv| wc -l
3012
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-implementations&#34;&gt;The implementations&lt;/h2&gt;

&lt;p&gt;Here are the implementation in each language:&lt;/p&gt;

&lt;h3 id=&#34;the-go-implementation&#34;&gt;The go implementation&lt;/h3&gt;

&lt;p&gt;The go implementation relies on the &lt;code&gt;encoding/csv&lt;/code&gt; package.
The package has implemented a &lt;code&gt;Reader&lt;/code&gt; method that can take the famous &lt;code&gt;io.Reader&lt;/code&gt; as input. Therefore I will read a stream of data and not load the whole file in memory.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/owulveryck/4f9ddb952c5f1ef708b60a9907733969.js?file=main.go&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;the-perl-implementation&#34;&gt;The perl implementation&lt;/h3&gt;

&lt;p&gt;I did not find a csv implementation in perl that would be more efficient than the code below. Any pointer appreciated.
&lt;script src=&#34;//gist.github.com/owulveryck/4f9ddb952c5f1ef708b60a9907733969.js?file=main.pl&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-python-implementation&#34;&gt;The python implementation&lt;/h3&gt;

&lt;p&gt;Python does have a &lt;em&gt;csv&lt;/em&gt; module. This module is optimized and seems to be as flexible as the implementation of go. It reads a stream as well.
&lt;script src=&#34;//gist.github.com/owulveryck/4f9ddb952c5f1ef708b60a9907733969.js?file=main.py&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-results&#34;&gt;The results&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve run all the scripts through the &lt;em&gt;GNU time&lt;/em&gt; command. I didn&amp;rsquo;t used the built-in time command because
I wanted to check the memory footprint as well as the execution time.&lt;/p&gt;

&lt;p&gt;Here are the results
&lt;script src=&#34;//gist.github.com/owulveryck/4f9ddb952c5f1ef708b60a9907733969.js?file=result.sh&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;All of the languages have very nice execution time: below 4 seconds to process the sample file. Go gives the best performances, but it&amp;rsquo;s insignificant as long as the files do not exceed millions of records.
The memory footprint is low for eache implementation.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s definitly worth a bit of work to implement a decent parser in a &amp;ldquo;modern language&amp;rdquo;
instead of relying on a &lt;code&gt;while read&lt;/code&gt; loop or a &lt;code&gt;for i in $(cat...&lt;/code&gt; in shell.
I didn&amp;rsquo;t write a shell implementation, but it would have take ages to run on my chromebook anyway.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Being a better public speaker with a little help of Speech Recognition, Javascript and Chrome</title>
      <link>https://blog.owulveryck.info/2016/09/09/being-a-better-public-speaker-with-a-little-help-of-speech-recognition-javascript-and-chrome/index.html</link>
      <pubDate>Fri, 09 Sep 2016 13:39:50 +0200</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/09/09/being-a-better-public-speaker-with-a-little-help-of-speech-recognition-javascript-and-chrome/index.html</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I usually don&amp;rsquo;t like slidewares.&lt;/p&gt;

&lt;p&gt;Actually as IT engineer working, by now, exclusively in France, I&amp;rsquo;m facing the PowerPoint problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Too many boring slides,&lt;/li&gt;
&lt;li&gt;too much information per slide,&lt;/li&gt;
&lt;li&gt;a presenter dedicated to read their content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the audience is watching its watch while waiting for a coffee break.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t redo the introduction I already did in a &lt;a href=&#34;https://blog.owulveryck.info/2016/06/23/websockets-reveal.js-d3-and-go-for-a-dynamic-keynote/index.html&#34;&gt;previous post&lt;/a&gt; but indeed slides can,
from time to time, be a value-add to a presentation.&lt;/p&gt;

&lt;p&gt;Is the previous post, I introduced reveal.js, this excellent javascript framework. And I already did an interactive presentation.&lt;/p&gt;

&lt;p&gt;In this post, I will go a little bit further with the integration of Speech Recognition.&lt;/p&gt;

&lt;h1 id=&#34;speech-recognition-by-google&#34;&gt;Speech Recognition by Google&lt;/h1&gt;

&lt;h2 id=&#34;the-google-cloud-speech-api&#34;&gt;The Google Cloud Speech API&lt;/h2&gt;

&lt;p&gt;It ain&amp;rsquo;t no secret now, I&amp;rsquo;m a big fan of machine learning.
Machines learn faster than people, and they can now assist us in a lot of boring tasks.&lt;/p&gt;

&lt;p&gt;On the base of a neuron network, Google provides an &lt;a href=&#34;https://cloud.google.com/speech/&#34;&gt;API for speech recognition&lt;/a&gt;.
It is fairly complete and multi lingual.&lt;/p&gt;

&lt;h2 id=&#34;chrome-speech-recognition&#34;&gt;Chrome speech recognition&lt;/h2&gt;

&lt;p&gt;They &amp;ldquo;&lt;em&gt;eat their own dog food&lt;/em&gt;&amp;rdquo; and use their engine for android and&amp;hellip; Chrome.
Best of all, they provide a userland access via a Javascript API to this functionality in Chrome.&lt;/p&gt;

&lt;p&gt;This means that you can develop a web page that will access you microphone, sends what you say to the Google cloud, get the result back and process it in your page.&lt;/p&gt;

&lt;p&gt;You can see an introduction &lt;a href=&#34;https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-can-i-use-that-for-a-case-study&#34;&gt;What can I use that for: A case study?&lt;/h1&gt;

&lt;p&gt;I had to do a presentation recently.
This presentation was about &lt;em&gt;Agility&lt;/em&gt; and &lt;em&gt;Devops&lt;/em&gt;. The main idea was to give my client a feedback about experiences I had regarding those principles in digital transformation.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want to loose my audience with slides. But I wanted to keep the key concepts alive and visible.&lt;/p&gt;

&lt;p&gt;So what I did was a one slide presentation only with the keywords I wanted to talk about.&lt;/p&gt;

&lt;p&gt;The day before, I though:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;How nice it would be if as far as I speak, the key concepts would appear on screen&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may think: &lt;em&gt;&amp;ldquo;that&amp;rsquo;s easy, learn your script and click on the right moment&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ok, but there are drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have to learn the script&lt;/li&gt;
&lt;li&gt;You cannot be spontaneous anymore&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s a one shot, one displayed, you cannot interact with the points anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I need is &amp;ldquo;an assistant&amp;rdquo; that will &lt;em&gt;listen to me&lt;/em&gt; and &lt;em&gt;act as soon as he/she/it hear a buzz word&lt;/em&gt;.
It&amp;rsquo;s 2016, this assistant is a machine, and I can teach it to act correctly.&lt;/p&gt;

&lt;p&gt;Here is a little demo of the end product (don&amp;rsquo;t pay to much attention to the content, I said nonsense for the demo)&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MOmmBufEwPo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;And another one in French.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3Uyr0G0add4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;the-implementation&#34;&gt;The implementation&lt;/h1&gt;

&lt;h2 id=&#34;annyang&#34;&gt;Annyang&lt;/h2&gt;

&lt;p&gt;I have used the &lt;a href=&#34;https://github.com/TalAter/annyang&#34;&gt;annyang&lt;/a&gt; which is a javascript wrapper for the Chrome speech recognition functionnality.&lt;/p&gt;

&lt;p&gt;Instead of matching a sentence as explained in the example of annyang, I made it listen to my whole speech in a loop.
Then I passed every sentence detected by the framework to a javascript function that was applying regexp to look for keywords.&lt;/p&gt;

&lt;h3 id=&#34;displaying-words&#34;&gt;Displaying words&lt;/h3&gt;

&lt;p&gt;For every keyword I did a match to an object of my DOM and simply changed its &lt;code&gt;visibility&lt;/code&gt; style from &lt;code&gt;hidden&lt;/code&gt; to &lt;code&gt;visible&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the javascript code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (annyang) {
  annyang.debug(true);
  annyang.setLanguage(&#39;fr-FR&#39;);
  annyang.addCallback(&#39;result&#39;, function(phrases) {
  for (s of phrases) {
     str = s.toLowerCase();
     switch (str) {
        case (str.match(/communication/) || {}).input:nnyang.start();                                                                                              
        document.getElementById(&#39;communication&#39;).style.visibility = &#39;visible&#39;;
        ...
    // Start listening. You can call this here, or attach this call to an event, button, etc.
    annyang.start();       
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the corresponding html section for the communication keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;reveal&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;slides&amp;quot;&amp;gt;
    &amp;lt;section&amp;gt;
      &amp;lt;h3 style=&amp;quot;visibility: visible&amp;quot; id=&amp;quot;agile&amp;quot;&amp;gt;Agile&amp;lt;/h3&amp;gt;
      &amp;lt;p&amp;gt; &amp;lt;span style=&amp;quot;visibility: hidden;&amp;quot; id=&amp;quot;communication&amp;quot;&amp;gt;communication&amp;lt;/span&amp;gt; &amp;lt;/p&amp;gt;            
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The speech recognition engine detects the sentence and gives a confidence note about its recognition.
All the potential results are stored in an array (here &lt;code&gt;phrases&lt;/code&gt;). I&amp;rsquo;ve used them all so I was more confident not to miss a word.&lt;/p&gt;

&lt;h3 id=&#34;making-them-blink&#34;&gt;Making them blink&lt;/h3&gt;

&lt;p&gt;As I was not fully confident in the solution (it was late in the night and the show was the next morning), Therefore I made a fall-back solution.
All the words were displayed, and I used a little CSS tweak to make them blink when they were pronounced.
This was done by adding and removing a css class to the concerned node.
The logic remains the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Chrome &amp;amp; Safari */
@-webkit-keyframes blink {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

.blink {
  -webkit-animation: blink 750ms 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-Javascript&#34;&gt;case (str.match(/communication/) || {}).input:                                                                                       
   document.getElementById(&amp;quot;b_communication&amp;quot;).classList.toggle(&#39;blink&#39;);
   setTimeout(function () {
     document.getElementById(&amp;quot;b_communication&amp;quot;).classList.remove(&#39;blink&#39;);
   }, 1500);
   break;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion-and-todo&#34;&gt;Conclusion and TODO&lt;/h1&gt;

&lt;p&gt;The speech recognition engine is efficient and usable.
What I need to do is to code a tiny javascript library in order to get a JSON associative array between the list of spoken words that would trigger an action for an element for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;tag&amp;quot;: &amp;quot;communication&amp;quot;,
  &amp;quot;words&amp;quot;: [&amp;quot;communication&amp;quot;, &amp;quot;communicate&amp;quot;],
  &amp;quot;fuction&amp;quot;: &amp;quot;blink&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anyway, as a quick and dirty solution, the goal is achieved.&lt;/p&gt;

&lt;p&gt;Another Idea would be to plug this with a NLP engine to perform stemming or lemmatization to do a better decoding and be even more machine learning compliant. This could be done with the help of &lt;a href=&#34;https://github.com/mit-nlp/MITIE&#34;&gt;MITIE&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting weather data from the station to the raspberry</title>
      <link>https://blog.owulveryck.info/2016/08/29/getting-weather-data-from-the-station-to-the-raspberry/index.html</link>
      <pubDate>Mon, 29 Aug 2016 21:58:17 +0200</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/08/29/getting-weather-data-from-the-station-to-the-raspberry/index.html</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;A bunch of friends/colleagues offered me a &lt;a type=amzn&gt;raspberry pi 3&lt;/a&gt;.
It may become my VPN gateway, or my firewall, or the brain of my CCTV, or maybe the center of an alarm&amp;hellip;. Maybe a spotify player&amp;hellip;&lt;/p&gt;

&lt;p&gt;Anyway, I have installed raspbian and I&amp;rsquo;m now playing with it.&lt;/p&gt;

&lt;p&gt;Yesterday evening, as I was about to go to bed, I&amp;rsquo;ve had a very bad idea&amp;hellip; I&amp;rsquo;ve linked together my &lt;a type=amzn&gt;rpi&lt;/a&gt; and my &lt;a type=&#34;amzn&#34;&gt;Oregon&lt;/a&gt; Weather Station.
3 hours later, I was still geeking&amp;hellip;&lt;/p&gt;

&lt;p&gt;As usual in the blog I will explain what I did, what did work, and what did not.&lt;/p&gt;

&lt;h1 id=&#34;attaching-the-devices&#34;&gt;Attaching the devices&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve plugged the device, ok! Now what does the system tells me about it:&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;dmesg&lt;/code&gt; tells me is simply&lt;/p&gt;

&lt;pre&gt;
[ 2256.877522] usb 1-1.4: new low-speed USB device number 5 using dwc_otg
[ 2256.984860] usb 1-1.4: New USB device found, idVendor=0fde, idProduct=ca01
[ 2256.984881] usb 1-1.4: New USB device strings: Mfr=0, Product=1, SerialNumber=0
[ 2256.984894] usb 1-1.4: Product:  
[ 2256.992719] hid-generic 0003:0FDE:CA01.0002: hiddev0,hidraw0: USB HID v1.10 Device [ ] on usb-3f980000.usb-1.4/input0
&lt;/pre&gt;

&lt;h2 id=&#34;finding-the-device&#34;&gt;Finding the device&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;lsusb&lt;/code&gt; gives me the list of the usb devices on my &lt;a type=amzn&gt;rpi&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;
# lsusb 
Bus 001 Device 004: ID 0fde:ca01  
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter
Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp. 
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/pre&gt;

&lt;p&gt;The first one correspond to my weather station but it belongs to root:&lt;/p&gt;

&lt;pre&gt;
# ls -lrt /dev/bus/usb/001/004
crw------- 1 root root 189, 3 Aug 30 12:45 /dev/bus/usb/001/004
&lt;/pre&gt;

&lt;h2 id=&#34;giving-access-udev&#34;&gt;Giving access: &lt;code&gt;udev&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The first thing to do is to allow access to my usb device so I won&amp;rsquo;t need to run any program as root.
By default the &lt;code&gt;pi&lt;/code&gt; user belongs to a bunch of groups. One of those is called &lt;code&gt;plugdev&lt;/code&gt;.
It is the one I will use for my experiment.&lt;/p&gt;

&lt;h3 id=&#34;get-information-about-my-device&#34;&gt;Get information about my Device&lt;/h3&gt;

&lt;pre&gt;
# udevadm info /dev/bus/usb/001/004

P: /devices/platform/soc/3f980000.usb/usb1/1-1/1-1.3
N: bus/usb/001/012
E: BUSNUM=001
E: DEVNAME=/dev/bus/usb/001/012
E: DEVNUM=012
E: DEVPATH=/devices/platform/soc/3f980000.usb/usb1/1-1/1-1.3
E: DEVTYPE=usb_device
E: DRIVER=usb
E: ID_BUS=usb
E: ID_MODEL_ENC=\x20
E: ID_MODEL_FROM_DATABASE=WMRS200 weather station
E: ID_MODEL_ID=ca01
E: ID_REVISION=0302
E: ID_SERIAL=0fde_
E: ID_USB_INTERFACES=:030000:
E: ID_VENDOR=0fde
E: ID_VENDOR_ENC=0fde
E: ID_VENDOR_FROM_DATABASE=Oregon Scientific
E: ID_VENDOR_ID=0fde
E: MAJOR=189
E: MINOR=11
E: PRODUCT=fde/ca01/302
E: SUBSYSTEM=__usb__
E: TYPE=0/0/0
E: USEC_INITIALIZED=5929384
&lt;/pre&gt;

&lt;p&gt;I will note the vendor ID and the product ID.
Funny stuff is that it presents itself as a WMRS200 and the model I have is a RMS300, but never mind.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create the udev rule file using the previous informations about the idVendor and the idProduct and create a special file &lt;code&gt;/dev/weather-station&lt;/code&gt;.
This will make the code more easy as I will be able to hard code the name, and leave the boring task of finding the device aside.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; /etc/udev/rules.d/50-weather-station.rules
# Weather Station
SUBSYSTEM==&amp;quot;usb&amp;quot;, ATTRS{idVendor}==&amp;quot;0fde&amp;quot;, ATTRS{idProduct}==&amp;quot;ca01&amp;quot;, MODE=&amp;quot;0660&amp;quot;, GROUP=&amp;quot;plugdev&amp;quot;, SYMLINK+=&amp;quot;weather-station&amp;quot;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once done, I can restart udev with &lt;code&gt;sudo /etc/init.d/udev restart&lt;/code&gt; or reload and trigger the rules with &lt;code&gt;udevadm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;IF something goes wrong, you can check the logs by turning the log level to info, reload the rules and look into the syslog file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# udevadm control -l info
# udevadm control -R
# # grep -i udev /var/log/syslog 
# 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# ls -lrt /dev/weather-station                                                                                                               
lrwxrwxrwx 1 root root 15 Aug 29 21:32 /dev/weather-station -&amp;gt; bus/usb/001/007
# ls -lrt /dev/bus/usb/001/007                                                                                                   
crw-rw-r-- 1 root plugdev 189, 6 Aug 29 21:32 /dev/bus/usb/001/007
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far so good&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;accessing-the-data&#34;&gt;Accessing the data&lt;/h1&gt;

&lt;h2 id=&#34;the-libusb&#34;&gt;The libusb&lt;/h2&gt;

&lt;p&gt;Linux has a low level library &amp;ldquo;libusb&amp;rdquo; that make the development of modules easy: &lt;a href=&#34;http://www.libusb.org/wiki/libusb-1.0&#34;&gt;libusb-1.0&lt;/a&gt;.
On my &lt;a type=amzn&gt;rpi&lt;/a&gt;, I can install the development version with a simple &lt;code&gt;sudo apt-get install libusb-1.0-0-dev&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-go-the-gousb-library&#34;&gt;Using GO: The &lt;code&gt;gousb&lt;/code&gt; library&lt;/h2&gt;

&lt;p&gt;A binding for the libusb is available through the &lt;a href=&#34;https://github.com/truveris/gousb&#34;&gt;gousb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also a &lt;strong&gt;lsusb&lt;/strong&gt; version that is available as an example.
Let&amp;rsquo;s grab it with a simple
&lt;code&gt;go get -v github.com/kylelemons/gousb/lsusb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and test it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ~GOPATH/bin/lsusb

001.004 0fde:ca01 WMRS200 weather station (Oregon Scientific)
  Protocol: (Defined at Interface level)
  Config 01:
    --------------
    Interface 00 Setup 00
      Human Interface Device (No Subclass) None
      Endpoint 1 IN  interrupt - unsynchronized data [8 0]
    --------------
001.003 0424:ec00 SMSC9512/9514 Fast Ethernet Adapter (Standard Microsystems Corp.)
  Protocol: Vendor Specific Class
  Config 01:
    --------------
    Interface 00 Setup 00
      Vendor Specific Class
      Endpoint 1 IN  bulk - unsynchronized data [512 0]
      Endpoint 2 OUT bulk - unsynchronized data [512 0]
      Endpoint 3 IN  interrupt - unsynchronized data [16 0]
    --------------
001.002 0424:9514 SMC9514 Hub (Standard Microsystems Corp.)
  Protocol: Hub (Unused) TT per port
  Config 01:
    --------------
    Interface 00 Setup 00
      Hub (Unused) Single TT
      Endpoint 1 IN  interrupt - unsynchronized data [1 0]
    Interface 00 Setup 01
      Hub (Unused) TT per port
      Endpoint 1 IN  interrupt - unsynchronized data [1 0]
    --------------
001.001 1d6b:0002 2.0 root hub (Linux Foundation)
  Protocol: Hub (Unused) Single TT
  Config 01:
    --------------
    Interface 00 Setup 00
      Hub (Unused) Full speed (or root) hub
      Endpoint 1 IN  interrupt - unsynchronized data [4 0]
  --------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rawread&#34;&gt;Rawread&lt;/h2&gt;

&lt;p&gt;I want to read the raw data from the device.
The gousb package comes along with an example named &amp;ldquo;rawread&amp;rdquo;. I&amp;rsquo;m using it:&lt;/p&gt;

&lt;pre&gt;
# rawread git:(master) # go run main.go -device &#34;0fde:ca01&#34;
2016/08/30 14:00:01 Scanning for device &#34;0fde:ca01&#34;...
  Protocol: (Defined at Interface level)
  Config 01:
    --------------
    Interface 00 Setup 00
      Human Interface Device (No Subclass) None
      Endpoint 1 IN  interrupt - unsynchronized data [8 0]
    --------------
2016/08/30 14:00:01 Connecting to endpoint...
2016/08/30 14:00:01 - &amp;usb.Descriptor{Bus:0x1, Address:0x4, Spec:0x110, Device:0x302, Vendor:0xfde, Product:0xca01, Class:0x0, SubClass:0x0, Protocol:0x0, Configs:[]usb.ConfigInfo{usb.ConfigInfo{Config:0x1, Attributes:0x80, MaxPower:0x32, Interfaces:[]usb.InterfaceInfo{usb.InterfaceInfo{Number:0x0, Setups:[]usb.InterfaceSetup{usb.InterfaceSetup{Number:0x0, Alternate:0x0, IfClass:0x3, IfSubClass:0x0, IfProtocol:0x0, Endpoints:[]usb.EndpointInfo{usb.EndpointInfo{Address:0x81, Attributes:0x3, MaxPacketSize:0x8, MaxIsoPacket:0x0, PollInterval:0xa, RefreshRate:0x0, SynchAddress:0x0}}}}}}}}}
2016/08/30 14:00:01 open: usb: claim: libusb: device or resource busy [code -6]
&lt;/pre&gt;

&lt;p&gt;After digging into the documentation and forums about the libusb, it looks like the device is locked by a generic kernel driver.
So I need to detach it first.&lt;/p&gt;

&lt;p&gt;The API call used to detach a kernel driver is &lt;code&gt;libusb_detach_kernel_driver&lt;/code&gt;. Sadly it has not be bound to the golang&amp;rsquo;s library.
Indeed &lt;a href=&#34;https://github.com/jpoirier&#34;&gt;Joseph Poirier&lt;/a&gt; maintain an active fork from the gousb library and he does implement the call.
It&amp;rsquo;s a private method that is called implicitly by another call, so no need to modify the code from rawread to use it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve switched to his version:&lt;/p&gt;

&lt;pre&gt;
# go get github.com/jpoirier/gousb/rawread
./main -device &#34;0fde:ca01&#34;
2016/08/30 14:12:28 Scanning for device &#34;0fde:ca01&#34;...
  Protocol: (Defined at Interface level)
  Config 01:
    --------------
    Interface 00 Setup 00
      Human Interface Device (No Subclass) None
      Endpoint 1 IN  interrupt - unsynchronized data [8 0]
    --------------
2016/08/30 14:12:28 Connecting to endpoint...
2016/08/30 14:12:28 - &amp;usb.Descriptor{Bus:0x1, Address:0x4, Spec:0x110, Device:0x302, Vendor:0xfde, Product:0xca01, Class:0x0, SubClass:0x0, Protocol:0x0, Configs:[]usb.ConfigInfo{usb.ConfigInfo{Config:0x1, Attributes:0x80, MaxPower:0x32, Interfaces:[]usb.InterfaceInfo{usb.InterfaceInfo{Number:0x0, Setups:[]usb.InterfaceSetup{usb.InterfaceSetup{Number:0x0, Alternate:0x0, IfClass:0x3, IfSubClass:0x0, IfProtocol:0x0, Endpoints:[]usb.EndpointInfo{usb.EndpointInfo{Address:0x81, Attributes:0x3, MaxPacketSize:0x8, MaxIsoPacket:0x0, PollInterval:0xa, RefreshRate:0x0, SynchAddress:0x0}}}}}}}}}
&lt;/pre&gt;

&lt;p&gt;Nothing more because the code ends by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  ep, err := dev.OpenEndpoint(uint8(*config), uint8(*iface), uint8(*setup), uint8(*endpoint)|uint8(usb.ENDPOINT_DIR_IN))
  if err != nil {
      log.Fatalf(&amp;quot;open: %s&amp;quot;, err)
  }
  _ = ep 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool&amp;hellip; Now let&amp;rsquo;s add some code to read from the endpoint (which is an interface and that implements a Read method as described &lt;a href=&#34;https://godoc.org/github.com/jpoirier/gousb/usb#Endpoint&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  b := make([]byte, 16)
  _, err = ep.Read(b)
  if err != nil {
      log.Fatalf(&amp;quot;read: %s&amp;quot;, err)
  }
  log.Printf(&amp;quot;%v&amp;quot;, b)
  _ = ep 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And run the code:&lt;/p&gt;

&lt;pre&gt;
go run main.go -device &#34;0fde:ca01&#34;
2016/08/30 14:25:58 Scanning for device &#34;0fde:ca01&#34;...
  Protocol: (Defined at Interface level)
    Config 01:
    --------------
    Interface 00 Setup 00
      Human Interface Device (No Subclass) None
      Endpoint 1 IN  interrupt - unsynchronized data [8 0]
    --------------
2016/08/30 14:25:58 Connecting to endpoint...
2016/08/30 14:25:58 - &amp;usb.Descriptor{Bus:0x1, Address:0x4, Spec:0x110, Device:0x302, Vendor:0xfde, Product:0xca01, Class:0x0, SubClass:0x0, Protocol:0x0, Configs:[]usb.ConfigInfo{usb.ConfigInfo{Config:0x1, Attributes:0x80, MaxPower:0x32, Interfaces:[]usb.InterfaceInfo{usb.InterfaceInfo{Number:0x0, Setups:[]usb.InterfaceSetup{usb.InterfaceSetup{Number:0x0, Alternate:0x0, IfClass:0x3, IfSubClass:0x0, IfProtocol:0x0, Endpoints:[]usb.EndpointInfo{usb.EndpointInfo{Address:0x81, Attributes:0x3, MaxPacketSize:0x8, MaxIsoPacket:0x0, PollInterval:0xa, RefreshRate:0x0, SynchAddress:0x0}}}}}}}}}
2016/08/30 14:25:59 [7 0 48 0 48 53 1 255 7 255 0 66 129 239 0 32]
&lt;/pre&gt;

&lt;p&gt;OK! Here are the data, now what I need to figure out, is how to interpret them!&lt;/p&gt;

&lt;h2 id=&#34;decoding-the-protocol&#34;&gt;Decoding the Protocol&lt;/h2&gt;

&lt;p&gt;Internet is a great tool: I&amp;rsquo;ve found a description of the protocol &lt;a href=&#34;http://www.bashewa.com/wmr200-protocol.php&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve read that it was mandatory to send a heartbeat sequence every 30 seconds.
I will implement the heartbeat later. For now I will send it initially to request data from the station:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// This is a hearbeat request (9 bytes array)
h := []byte{0x00, 0x01, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
log.Println(&amp;quot;Sending heartbeat&amp;quot;)
i, err := ep.Write(h)
if err != nil {
    log.Fatal(&amp;quot;Cannot send heartbeat&amp;quot;, err)
}
log.Println(&amp;quot;%v bytes sent&amp;quot;,i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then read the stream back. Every data payload is separate from the others by a 0xffff sequence.&lt;/p&gt;

&lt;h3 id=&#34;testing-the-sequence-initialization-request&#34;&gt;Testing the sequence initialization request&lt;/h3&gt;

&lt;pre&gt;
 go run main.go -device &#34;0fde:ca01&#34;
2016/08/30 20:02:19 Scanning for device &#34;0fde:ca01&#34;...
Protocol: (Defined at Interface level)
  Config 01:
  --------------
  Interface 00 Setup 00
    Human Interface Device (No Subclass) None
    Endpoint 1 IN  interrupt - unsynchronized data [8 0]
  --------------
  2016/08/30 20:02:19 Connecting to endpoint...
2016/08/30 20:02:19 Sending heartbeat
2016/08/30 20:02:19 heartbeat failed: usb: write: not an OUT endpoint
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;What did² I do wrong?&lt;/strong&gt;
&lt;center&gt;
&lt;img src=&#34;http://imgs.xkcd.com/comics/debugging.png&#34; alt=&#34;XKCD&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Easy, I didn&amp;rsquo;t RTFM&amp;hellip;
Actually, I didn&amp;rsquo;t read the specification of the USB.&lt;/p&gt;

&lt;p&gt;As described &lt;a href=&#34;http://events.linuxfoundation.org/sites/events/files/slides/elc_2014_usb_0.pdf&#34;&gt;here&lt;/a&gt; the USB is a &lt;strong&gt;host-controlled&lt;/strong&gt; bus which means that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nothing on the bus happens without the host first initiating it.&lt;/li&gt;
&lt;li&gt;Devices cannot initiate a transaction.&lt;/li&gt;
&lt;li&gt;The USB is a Polled Bus&lt;/li&gt;
&lt;li&gt;The Host polls each device, requesting data or sending data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The possibles transaction are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IN : Device to Host&lt;/li&gt;
&lt;li&gt;OUT: Host to Device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of that, a device may handle 1 to N configuration which handles 1 to N endpoints which may be considered IN or OUT.&lt;/p&gt;

&lt;p&gt;My weather station has only one endpoint which is IN.
Therefore I will not be able to send information to the station from the host. What I will be able to send is a IN token to get data on the bus.&lt;/p&gt;

&lt;pre&gt;
# lsusb -v
...
Endpoint Descriptor:
  bLength                 7
  bDescriptorType         5
  bEndpointAddress     0x81  EP 1 IN
  bmAttributes            3
    Transfer Type            Interrupt
    Synch Type               None
    Usage Type               Data
  wMaxPacketSize     0x0008  1x 8 bytes
  bInterval              10
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; I also see that the endpoint is an interrupt&lt;/p&gt;

&lt;h1 id=&#34;to-be-continued&#34;&gt;To be continued&amp;hellip;&lt;/h1&gt;

&lt;p&gt;This blog post is quiet long, and I haven&amp;rsquo;t finished my research yet. Indeed I think that there is enough information for the post to go live.
I will post a part II as soon as I will have time to continue my experiments with the USB device and the &lt;a type=amzn&gt;rpi&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Websockets, Reveal.js, D3 and GO for a dynamic keynote</title>
      <link>https://blog.owulveryck.info/2016/06/23/websockets-reveal.js-d3-and-go-for-a-dynamic-keynote/index.html</link>
      <pubDate>Thu, 23 Jun 2016 15:32:54 +0200</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/06/23/websockets-reveal.js-d3-and-go-for-a-dynamic-keynote/index.html</guid>
      <description>

&lt;h1 id=&#34;the-goal&#34;&gt;the goal&lt;/h1&gt;

&lt;p&gt;As all my peers, I have the opportunity to talk about different technological aspects.
As all my peers, I&amp;rsquo;m asked to present a bunch of slides (powerpoint or keynote, or whatever).&lt;/p&gt;

&lt;p&gt;In this post I won&amp;rsquo;t dig into what&amp;rsquo;s good or not to put in a presentation, and if that&amp;rsquo;s what interest you, I
recommend you to take a look at &lt;a href=&#34;http://www.presentationzen.com/&#34;&gt;Garr Reynold&amp;rsquo;s tips and tricks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Steve Jobs&lt;/em&gt; said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People who knows what they&amp;rsquo;re talking about don&amp;rsquo;t need PowerPoint&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(actually it has been quoted in Walter Isaacson&amp;rsquo;s biography see &lt;a href=&#34;http://blog.jgc.org/2011/11/people-who-know-what-theyre-talking.html&#34;&gt;this reference&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As an attendee I tend to agree; usually PowerPoints are boring and they hardly give any interest besides for the writer to say &amp;ldquo;hey look, I&amp;rsquo;ve worked for this presentation&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Indeed, they are a must. So for my next presentation I thought:&lt;/p&gt;

&lt;p&gt;wouldn&amp;rsquo;t it be nice to use this wide display area to make the presentation more interactive.
One of the key point in communication is to federate people. So what if people could get represented for real in the presentation.&lt;/p&gt;

&lt;h2 id=&#34;how-to-the-architecture&#34;&gt;how to: the architecture&lt;/h2&gt;

&lt;p&gt;Obviously I cannot use conventional tools, such as PowerPoint, Keynote, Impress, google slides and so.
I need something that I can program; something that can interact with a server, and something that is not a console so I can get
fancy and eye-candy animations.&lt;/p&gt;

&lt;h3 id=&#34;the-basic&#34;&gt;The basic&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://lab.hakim.se/reveal-js/&#34;&gt;reveal.js&lt;/a&gt; is an almost perfect candidate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is a framework written in JavaScript therefore, I can easily ass code&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s well designed&lt;/li&gt;
&lt;li&gt;it can be used alongside with any other JavaScript framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;graphs-animations-etc&#34;&gt;Graphs, animations, etc&amp;hellip;&lt;/h3&gt;

&lt;p&gt;A good presentation has animations, graphs, diagrams, and stuffs that cannot be expressed simply with words.
I will interact with the audience. I will explain how later, but anyway they will send me some data.
I could process them in whatever server-side application (php, go-template base, python) but I have the feeling that&amp;rsquo;s not
the idiomatic way of doing modern web content. Actually, I would need anyway to deal with device (mobile, desktop), screen size,
browser&amp;hellip; So what&amp;rsquo;s best, I think, is to get the data on the client side and process it via Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://d3js.org/&#34;&gt;Data Driver Documents&lt;/a&gt; is the framework I will use to process and display the data I will get from the client.&lt;/p&gt;

&lt;p&gt;It actually uses SVG to represent the graphs; I would have liked to use a full HTML5 to be more&amp;hellip; 2016, but the D3 is actually very very good
framework I wanted to use for a while.&lt;/p&gt;

&lt;h3 id=&#34;the-attendees&#34;&gt;The attendees&lt;/h3&gt;

&lt;p&gt;If I want the attendees to participate they need a device, to act as a client.
About all people I will talk to have a smartphone; that is what I will use.&lt;/p&gt;

&lt;p&gt;It has two advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is their own device, I looks more realistic and unexpected: therefore I would get a better reception of the message I&amp;rsquo;m trying to pass.&lt;/li&gt;
&lt;li&gt;it usually has a Webkit based web browser with a decent Javascript engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won&amp;rsquo;t develop a native app, instead I will a webpage mobile compliant based on the &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;bootstrap&lt;/a&gt; framework.&lt;/p&gt;

&lt;h3 id=&#34;the-hub&#34;&gt;The HUB&lt;/h3&gt;

&lt;p&gt;The point now, is how to make my clients and my presentation to exchange data.
As I said before, I would not be an easy task to setup a pure browser based peer-to-peer communication, so I will fall
back to the traditional web server based hub.&lt;/p&gt;

&lt;p&gt;the first idea is to use a RESTfull mechanism, but this has the major disadvantage of not being real-timed.
What I would like is a communication HUB that would broadcast events as soon as they are reveived.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve implemented a server in go to do so. The clients will talk to the server over websockets which are now natively present in every
modern browsers.&lt;/p&gt;

&lt;h4 id=&#34;the-server&#34;&gt;the server&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve used the &lt;a href=&#34;https://github.com/gorilla/websocket&#34;&gt;Implementation from gorilla&lt;/a&gt; because it seemed to be the best as of today.
It implements all the RFC and the development is up-to-date.&lt;/p&gt;

&lt;p&gt;The code heavily relies on channels to broadcast the messages between the different peers.
 I&amp;rsquo;ve taken the chat example present in the gorilla&amp;rsquo;s package.&lt;/p&gt;

&lt;p&gt;At first I did code all the mechanism is a simple go package. After a bunch of code, I&amp;rsquo;ve decided to split the code into two different
projects: The main presentation and the &lt;a href=&#34;http://github.com/owulveryck/gowmb&#34;&gt;gowmb&lt;/a&gt;. The gowmb package is usable in others projects.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion.&lt;/h1&gt;

&lt;p&gt;I don&amp;rsquo;t go into the implementation details in this post, instead I will refer to the &lt;a href=&#34;https://github.com/owulveryck/topology-presentation&#34;&gt;github&lt;/a&gt;
repository where the presentation is hosted.&lt;/p&gt;

&lt;p&gt;By now I have a good animated slideshow, and the ability to join the slides with a mobile phone.
I can also draw a topology of the attendees via D3 and interact with them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Which solution should I choose? Don&#39;t think too much and ask a bot!</title>
      <link>https://blog.owulveryck.info/2016/05/20/which-solution-should-i-choose-dont-think-too-much-and-ask-a-bot/index.html</link>
      <pubDate>Fri, 20 May 2016 12:50:59 +0200</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/05/20/which-solution-should-i-choose-dont-think-too-much-and-ask-a-bot/index.html</guid>
      <description>

&lt;h1 id=&#34;let-me-tell-you-a-story-the-why&#34;&gt;Let me tell you a story: the why!&lt;/h1&gt;

&lt;p&gt;A year ago, one of those Sunday morning where spring starts to warm up the souls, I went, as usual to my favorite bakery.
The family tradition is to come back with a bunch of &amp;ldquo;Pains au Chocolat&amp;rdquo; (which, are, you can trust me, simply excellent).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;hello sir, I&amp;rsquo;d like 4 of your excellent &amp;ldquo;pains au chocolat&amp;rdquo; please&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;I&amp;rsquo;m sorry, I don&amp;rsquo;t have any &amp;ldquo;pains au chocolat&amp;rdquo; nor any &amp;ldquo;croissant&amp;rdquo; anymore&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;what? How is it possible ?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;everything has been sold.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;too bad&amp;hellip;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think to myself: &lt;em&gt;why didn&amp;rsquo;t you made more?&lt;/em&gt;. He may have read my thought and told me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;I wish I could have foreseen&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I left his shop, his words were echoing&amp;hellip; I wish I could have foreseen&amp;hellip; We have self-driving cars, we have the Internet,
we are a civilization that is technology advanced.
Facebook recognize your face among billions as soon as you post a photo&amp;hellip; It must be possible to foresee&amp;hellip;&lt;/p&gt;

&lt;p&gt;This is how I started to gain interest in machine learning&lt;/p&gt;

&lt;p&gt;At first I started to read some papers, then I learn (a very little bit) about graph theory, Bayesian networks, Markov chains.
But I was not accurate and I felt I was missing some basic theory.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the main reason why, 8 weeks ago, I signed in a course about &lt;a href=&#34;https://www.coursera.org/learn/machine-learning&#34;&gt;&amp;ldquo;Machine learning&amp;rdquo; on Coursera&lt;/a&gt;.
This course is given by &lt;a href=&#34;http://www.andrewng.org/&#34;&gt;Andrew Ng&lt;/a&gt; from &lt;a href=&#34;https://www.stanford.edu/&#34;&gt;Stanford University&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is an excellent introduction that gives me all the tools I need to go deeper in this science. The course is based on real examples
and uses powerful mathematics without going too deeply in the proofs.&lt;/p&gt;

&lt;h1 id=&#34;so-what&#34;&gt;So what?&lt;/h1&gt;

&lt;p&gt;The course is not finished yet, but after about 8 weeks, I&amp;rsquo;ve learned a lot about what we call &amp;ldquo;machine learning&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The main idea of the machine learning is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to feed some code with a bunch of data (who said big data was useless)&lt;/li&gt;
&lt;li&gt;to code or encode some mathematical formulas that could represent the data&lt;/li&gt;
&lt;li&gt;to implement any algorithm that optimize the formulas by minimizing the error made by the machine on the evolving data sets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make it simple: machine learning is feeding a &amp;ldquo;robot&amp;rdquo; with data and teach him how to analyse the errors so it can make decisions on its own.&lt;/p&gt;

&lt;p&gt;Scary isn&amp;rsquo;t it? But so exciting&amp;hellip; As usual I won&amp;rsquo;t go into ethical debate on this blog, and I will stick to science and on the benefit
of the science.&lt;/p&gt;

&lt;p&gt;But indeed, always remind François Rabelais:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Science sans conscience n&amp;rsquo;est que ruine de l&amp;rsquo;&amp;acirc;me (&lt;em&gt;Science without conscience is but the ruin of the soul&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;a-use-case&#34;&gt;A use case&lt;/h2&gt;

&lt;h3 id=&#34;defining-the-problem&#34;&gt;Defining the problem&lt;/h3&gt;

&lt;p&gt;I have 4 technical solutions providing a similar goal: deliver cloud services.
Actually, none of them is fulfilling all the requirements of my business.
As usual, one is good in a certain area, while another one is weak, etc.&lt;/p&gt;

&lt;p&gt;A team of people has evaluated more than 100 criteria, and gave two quotations per criteria and per product:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the first quotation is in the range 0/3 and indicated whether the product is fulfilling the current feature&lt;/li&gt;
&lt;li&gt;the second quotation may be {0,1,3,9} and points the effort needed to reach a 3 for the feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, for each solution, I have a table looking like this :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;feature  name&lt;/th&gt;
&lt;th&gt;feature evaluation&lt;/th&gt;
&lt;th&gt;effort&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;feature 1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;feature 2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;feature 3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;feature 4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;hellip;&amp;hellip;.&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;feature 100&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I&amp;rsquo;ve been asked to evaluate the product and to produce a comparison.&lt;/p&gt;

&lt;p&gt;To do an analytic, I must look for an element of comparison. So I&amp;rsquo;ve turned the problem into this :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I would like to know which product is the cheapest to fulfill my requirement.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;ve uploaded my samples here):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.owulveryck.info/assets/ml/solution1.csv&#34;&gt;solution 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.owulveryck.info/assets/ml/solution2.csv&#34;&gt;solution 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.owulveryck.info/assets/ml/solution3.csv&#34;&gt;solution 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.owulveryck.info/assets/ml/solution4.csv&#34;&gt;solution 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;finding-a-solution&#34;&gt;Finding a solution&lt;/h3&gt;

&lt;p&gt;In the machine learning, we notice two different fields of application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;regression&lt;/li&gt;
&lt;li&gt;classification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The classification mechanism would be used to answer a yes/no question; for example: &lt;em&gt;should I keep solution 1&lt;/em&gt; ?
The regression mechanism helps us for &amp;ldquo;predicting&amp;rdquo;. Actually, the goal is to &lt;em&gt;automatically&lt;/em&gt; find a mathematical formulae that turns
a set of feature into a result.&lt;/p&gt;

&lt;p&gt;what is a feature, and what&amp;rsquo;s the result?
Let&amp;rsquo;s go back to my &lt;em&gt;petits pains&lt;/em&gt; example.&lt;/p&gt;

&lt;p&gt;Consider that the baker has made statistics on its production for sunday, and it has taken some events into consideration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sunday the 1st: it was raining, I sold only 100 petits Pains&lt;/li&gt;
&lt;li&gt;sunday the 8th: it was sunny, I sold 250 petits Pains&lt;/li&gt;
&lt;li&gt;sunday the 16th: it was sunny, and it was a special day (eg: mother&amp;rsquo;s day): 300 petits Pains&lt;/li&gt;
&lt;li&gt;sunday the 24th: it was cloudy: 150 petits Pains&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, the baker thinks that its production must be a function of the weather and the calendar; therefore those are the two features.
What ML propose is to tell the baker how many &amp;ldquo;petits pains&amp;rdquo; he should make &lt;strong&gt;knowing&lt;/strong&gt; that it is a special day (father&amp;rsquo;s day) and that it
is partially sunny&amp;hellip;&lt;/p&gt;

&lt;p&gt;Back in the context of this post, the goal of the regression would be to find a mathematical function that will tell me the effort needed
for any value, and doing this on the simple basis of the training set I have.&lt;/p&gt;

&lt;h4 id=&#34;the-actual-score-of-all-the-solutions&#34;&gt;The actual score of all the solutions&lt;/h4&gt;

&lt;p&gt;The first thing to find it the total score of all the 4 solutions.
If I consider $m$ features, the total score of the solution is defined by:&lt;/p&gt;

&lt;p&gt;$ score = \frac{1}{m} . \sum_{k=1}^{m} feature_k $&lt;/p&gt;

&lt;p&gt;What I need now, is to evaluate the effort needed to reach a score of 3 for each solution.
Let&amp;rsquo;s do that.&lt;/p&gt;

&lt;h4 id=&#34;representing-the-training-set&#34;&gt;Representing the training set&lt;/h4&gt;

&lt;p&gt;First, let&amp;rsquo;s plot the training set.
&lt;center&gt;
&lt;img class=&#34;img-responsive&#34; src=&#34;https://blog.owulveryck.info/assets/images/ml/trainingset.jpg&#34; alt=&#34;Training set&#34;/&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; the representation is not accurate because there may be several bunk points&lt;/p&gt;

&lt;p&gt;I will use in this post what&amp;rsquo;s called &amp;ldquo;supervised learning&amp;rdquo;. That means that I will express a skeleton of function and let the machine
adjust it. (actually this is a very basic and week implementation; a lot more complex examples may be implemented but that&amp;rsquo;s not the purpose of this post)&lt;/p&gt;

&lt;p&gt;When I look at the training set representation, I can imagine a line passing by the middle of the plots.
This line may look like this:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img class=&#34;img-responsive&#34; src=&#34;https://blog.owulveryck.info/assets/images/ml/x-1_5.jpg&#34; alt=&#34;x^(-1/5)&#34;/&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This is actually a representation of the function $ x^{\frac{1}{5}} $&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that this function may basically fit my example, my goal will be to adapt the function.
assume this equation with two parameters $\theta_0$ and $\theta_1$ that will influence the curve:&lt;/p&gt;

&lt;p&gt;$ f(x) = \theta_0 + \theta_1 . x^{\frac{1}{5}} $&lt;/p&gt;

&lt;p&gt;Therefore, my goal will be to code something so that the machine will figure out what $\theta_0$ and $\theta_1$  are.&lt;/p&gt;

&lt;p&gt;I will use an implementation of an algorithm called &lt;a href=&#34;https://en.wikipedia.org/wiki/Gradient_descent&#34;&gt;gradient descent&lt;/a&gt; for linear regression.
I won&amp;rsquo;t go into the details of this algorithm, as it takes a complete course to be explained.&lt;/p&gt;

&lt;p&gt;The implementation is made with &lt;a href=&#34;https://www.gnu.org/software/octave/&#34;&gt;GNU octave&lt;/a&gt; and the code is available on my &lt;a href=&#34;https://github.com/owulveryck/linear-regression-example&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-computation-and-the-result&#34;&gt;The computation and the result&lt;/h2&gt;

&lt;p&gt;Here is a figure representing the function for one particular solution:
&lt;center&gt;
&lt;img class=&#34;img-responsive&#34; src=&#34;https://blog.owulveryck.info/assets/images/ml/trainingset_plot.jpg&#34; alt=&#34;Training set with the function&#34;/&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;We can see that the curve is &amp;ldquo;under fitting&amp;rdquo; the data.
Anyway, let&amp;rsquo;s continue and get the result I want (I will explain later how to perform better):&lt;/p&gt;

&lt;p&gt;Here are the computational results:
&lt;pre&gt;
octave:10&amp;gt; compute
Analysing solution1.csv:0.&lt;sup&gt;67&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;
Running gradient descent&amp;hellip;
Theta found by gradient descent: 5.397050 -4.315835
Prediction for x=0.669291 ; 1.414256
Prediction for x=3 ; 0.020681
Effort (scaled to 10): 2.582105&lt;/p&gt;

&lt;p&gt;Analysing solution2.csv:0.&lt;sup&gt;96&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;
Running gradient descent&amp;hellip;
Theta found by gradient descent: 3.178478 -2.451611
Prediction for x=0.960630 ; 0.746482
Prediction for x=3 ; 0.124430
Effort (scaled to 10): 1.957075&lt;/p&gt;

&lt;p&gt;Analysing solution3.csv:0.&lt;sup&gt;67&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;
Running gradient descent&amp;hellip;
Theta found by gradient descent: 2.557847 -2.015334
Prediction for x=0.669291 ; 0.698031
Prediction for x=3 ; 0.047283
Effort (scaled to 10): 2.544122&lt;/p&gt;

&lt;p&gt;Analysing solution4.csv:0.&lt;sup&gt;86&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;
Running gradient descent&amp;hellip;
Theta found by gradient descent: 3.104868 -2.422627
Prediction for x=0.858268 ; 0.755175
Prediction for x=3 ; 0.086926
Effort (scaled to 10): 2.152261
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;For each solution, I have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the score (the first line /3)&lt;/li&gt;
&lt;li&gt;the parameters $\theta$&lt;/li&gt;
&lt;li&gt;a prediction for the actual score, and for a score of 3&lt;/li&gt;
&lt;li&gt;the effort (scale on 10) needed to pass from the actual score to 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;final-result&#34;&gt;Final result&lt;/h4&gt;

&lt;p&gt;Here is the final classification of my four solutions:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;th&gt;score&lt;/th&gt;
&lt;th&gt;effort&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Solution 2&lt;/td&gt;
&lt;td&gt;0.96&lt;/td&gt;
&lt;td&gt;1.95&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Solution 4&lt;/td&gt;
&lt;td&gt;0.86&lt;/td&gt;
&lt;td&gt;2.15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Solution 3&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;2.54&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Solution 1&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;2.58&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Solution 2 is the cheapest. It&amp;rsquo;s possible to go into further analysis to determine why it&amp;rsquo;s the cheapest, and how the other ones
may catch up and go back in the race, but again, that is not the purpose of my post.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is a simple approach.
Some axis of optimization could be to use a more complex polynomial (eg: $\theta_0+\theta_1.x^\frac{1}{3}+\theta_2.x^\frac{1}{5}$)
or to use a &lt;a href=&#34;https://en.wikipedia.org/wiki/Support_vector_machine&#34;&gt;support vector machine&lt;/a&gt; with a gaussian kernel for example.&lt;/p&gt;

&lt;p&gt;One other optimization would be to add some more features, such as, for example, a score on the importance of a feature (a functional feature).&lt;/p&gt;

&lt;p&gt;Machine learning is a wide mathematical and IT area. It is now in everyone&amp;rsquo;s life.
Nowadays we are talking about plateform fully automated, self-healing applications, smart deployements, smart monitoring.
There are already some good implementations of algorithms on the market, but there is a huge place for integration of those tools into
the life of the IT specialist.&lt;/p&gt;

&lt;p&gt;Automation has already helped and took the boring job of the IT specialist. Smart automation will go a step further.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Behaviour Driven Development with Gherkin and Cucumber (an introduction)</title>
      <link>https://blog.owulveryck.info/2016/03/31/behaviour-driven-development-with-gherkin-and-cucumber-an-introduction/index.html</link>
      <pubDate>Thu, 31 Mar 2016 23:39:35 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/03/31/behaviour-driven-development-with-gherkin-and-cucumber-an-introduction/index.html</guid>
      <description>

&lt;h4 id=&#34;opening-remarks&#34;&gt;Opening remarks&lt;/h4&gt;

&lt;p&gt;All my previous posts were about choreography, deployment, topology, and more recently about an attempt to include &lt;em&gt;AI&lt;/em&gt; in those systems.
This post is a bit apart, because I&amp;rsquo;m facing a new challenge in my job which is to implement BDD in a &lt;em&gt;CI&lt;/em&gt; chain. Therefore, I&amp;rsquo;m using
this blog as a reminder of what I did personally. The following of the &lt;em&gt;Markov&lt;/em&gt; saga will come again later.&lt;/p&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Wikipedia defines the word contract like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A contract is a voluntary arrangement between two or more parties that is enforceable at law as a binding legal agreement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If law usually describes what you can and cannot do, a contract is more likely to describe what&amp;rsquo;s you are expected to do.&lt;/p&gt;

&lt;p&gt;A law&amp;rsquo;s goal is not only to give rules to follow,
but also to maintain a stability in an ecosystem.
In IT there are laws, that may be implicit, didactic, empiric, &amp;hellip; but the IT with all its laws should not
dictate the expected behavior of the customer. But how often have you heard:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;those computer stuffs are not for me, just get the thing done&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;we&amp;rsquo;ve always done it this way&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are laws that cannot be changed, but the contract between a customer and its provider could and should evolve.&lt;/p&gt;

&lt;p&gt;In IT, like everywhere else where a customer/provider relationship exists, a special need is formalized via specifications.
Specifications are hard to follow, but even more they&amp;rsquo;re hard to evaluate.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;http://imgs.xkcd.com/comics/babies.png&#34; alt=&#34;Babies (xkcd)&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;B&lt;/strong&gt;ehavior &lt;strong&gt;D&lt;/strong&gt;riven &lt;strong&gt;D&lt;/strong&gt;evelopment is the assurance that everything have been made respectfully i
with the contract ²that has been established between the parties (customers and providers).
To do things right, this contract should be established at the very beginning.&lt;/p&gt;

&lt;p&gt;Hence, every single item must be developed with all the &lt;em&gt;features&lt;/em&gt; of the contract in mind. And then, it should be
possible to use automation to perform the tests of behaviour, so that the developer can see if the contract is fulfilled, and if, for
example, no regression has been introduced.&lt;/p&gt;

&lt;p&gt;In a continuous integration chain, this is an essential piece that can be use to fully automate the process of delivery.&lt;/p&gt;

&lt;h2 id=&#34;gherkin&#34;&gt;Gherkin&lt;/h2&gt;

&lt;p&gt;To express the specification in a way that can be both human and computer readable, the easiest way is to use a special dedicated
language.&lt;/p&gt;

&lt;p&gt;Such a language is known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt; ( Domain Specific Language).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cucumber/cucumber/wiki/Gherkin&#34;&gt;Gherkin&lt;/a&gt; is a DSL that &lt;em&gt;lets you describe software&amp;rsquo;s behaviour without dealing how that behaviour
is implemented&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The behaviour is a scenario detailed as a set of &lt;em&gt;features&lt;/em&gt;. A feature is a human readable English
(or another human language among 37 implemented languages) text file with a bunch of key words in it (eg: &lt;strong&gt;Given&lt;/strong&gt;, &lt;strong&gt;And&lt;/strong&gt;, &lt;strong&gt;When&lt;/strong&gt;, &lt;strong&gt;Then&lt;/strong&gt;,&amp;hellip;).
Those words do not only help the writer of the feature to organize its idea, but they are used by the Gherkin processor to localize the
test of the feature in the code. Of course, there is no magic in it: the test must have been implemented manually.&lt;/p&gt;

&lt;h2 id=&#34;and-here-comes-cucumber&#34;&gt;And here comes Cucumber&lt;/h2&gt;

&lt;p&gt;The historic Gherkin processor is called Cucumber. It&amp;rsquo;s a Ruby implementation of the Gherkin DSL.
Its purpose is to read a scenario, and to localize the Ruby code that is implementing the all the tests corresponding to the scenario.
Finally it executes the code, and for each feature it simply says ok or ko.&lt;/p&gt;

&lt;p&gt;Easy.&lt;/p&gt;

&lt;p&gt;Nowadays there are many implementation of Gherkin parser for different languages, but in this post I will stick to the Cucumber.&lt;/p&gt;

&lt;h1 id=&#34;let-s-play&#34;&gt;Let&amp;rsquo;s play&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s see how we can implement a basic behaviour driver development with the help of cucumber and Ruby.
The idea here is not to test a Ruby development, but instead to use ruby to validate a shell script.
That&amp;rsquo;s the main reason why I stick to Ruby (instead of GO which I know better). The Go implementation
(&lt;a href=&#34;https://github.com/DATA-DOG/godog&#34;&gt;GoDoc&lt;/a&gt;, &lt;a href=&#34;https://github.com/smartystreets/goconvey&#34;&gt;GoConvey&lt;/a&gt;, &amp;hellip;) relies
on &lt;code&gt;go test&lt;/code&gt; and therefore are related to a pure GO development.
Of course I could do a complete GO development to encapsulate my scripts, but that&amp;rsquo;s not the point; for my purpose, a scripting
language is a better choice.&lt;/p&gt;

&lt;p&gt;Ruby is a scripting language and all the tests implemented here are neither dependent on the Ruby test framework nor on &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will write a script that will deploy an EC2 instance via vagrant-aws and install an Openvpn instance on it.&lt;/p&gt;

&lt;h2 id=&#34;the-scenario&#34;&gt;The scenario&lt;/h2&gt;

&lt;h4 id=&#34;the-customer-point-of-view&#34;&gt;The customer point of view&lt;/h4&gt;

&lt;p&gt;With my role of customer, the feature I&amp;rsquo;m expecting is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given the execution of the program, and waiting for it to be successful&lt;/li&gt;
&lt;li&gt;Then I may be able to watch netflix US from France.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The feature may be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gherkin&#34;&gt;Feature: I want a program that
  will simply allows me to watch netflix US

  Scenario: I want to watch netflix
     Given I am on my chromebook
     And I have access to the shell
     When I want to watch netflix
     And I launch a program from the command line
     And it displays ready
     Then I open a navigator windows on http://www.netflix.com
     And I can watch Grey&#39;s anatomy (which is not available in france)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-architect-point-of-view&#34;&gt;The architect point of view&lt;/h4&gt;

&lt;p&gt;As an architect the implementation I&amp;rsquo;m thinking of is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;start an EC2 instance (I will not create it in this post)&lt;/li&gt;
&lt;li&gt;register it to my DNS (with blog-test.owulveryck.info)&lt;/li&gt;
&lt;li&gt;install Openvpn&lt;/li&gt;
&lt;li&gt;configure Openvpn to make it accessible via blog-test.owulveryck.info&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;the-developer-point-of-view&#34;&gt;The developer point of view&lt;/h4&gt;

&lt;p&gt;And as a developer, I&amp;rsquo;m thinking about using &lt;a href=&#34;https://github.com/mitchellh/vagrant-aws&#34;&gt;vagrant-aws&lt;/a&gt; to perform the tasks.
All the implementation will be based on a Vagrant file and a provisioning script.
The vagrant file will be evaluated by &lt;code&gt;vagrant up&lt;/code&gt; on CLI (aka in the real world, by the end user) and
the same vagrant file will be evaluated within my cucumber scripts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Therefore I can say that I am doing BDD/TDD for a configuration management and provisioning.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-basic-feature&#34;&gt;The basic &lt;em&gt;feature&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;I will describe here a single feature, just for testing purpose.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-ruby-environment&#34;&gt;Setting up the Ruby environment&lt;/h2&gt;

&lt;p&gt;I will use the &lt;em&gt;Ruby&lt;/em&gt; implementation of cucumber.
To install it, assuming that we have a &lt;code&gt;gem&lt;/code&gt; installed, just run this command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# gem install cucumber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will load all the required dependencies.
It may also be a good idea to use &lt;code&gt;bundle&lt;/code&gt; if we plan to do further development of the steps in ruby.&lt;/p&gt;

&lt;h4 id=&#34;the-test-environment-with-bundler&#34;&gt;The test environment with bundler&lt;/h4&gt;

&lt;p&gt;The whole development will run with the help of bundler (and RVM).
See this &lt;a href=&#34;http://dev.owulveryck.info/2016/03/31/rvm-from-a-usb-stick-on-a-chromebook/&#34;&gt;post&lt;/a&gt; for more explanation on
how I set it up on my Chromebook.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; mkdir /media/removable/Lexar/tools/vpn-blog
&amp;gt; cd /media/removable/Lexar/tools/vpn-blog
&amp;gt; rvmrc --create 2.2.0@vpn-blog
&amp;gt; source .rvmrc
&amp;gt; gem install bundler -v 1.5.2 
&amp;gt; bundle init
Writing new Gemfile to /home/chronos/user/gherkin/Gemfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-gemfile&#34;&gt;the &lt;em&gt;Gemfile&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s add the cucumber, vagrant (as installed in a previous &lt;a href=&#34;http://dev.owulveryck.info/2016/03/31/rvm-from-a-usb-stick-on-a-chromebook/&#34;&gt;post&lt;/a&gt; ),
and vagrant-aws dependencies in the Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; cat Gemfile
source &amp;quot;https://rubygems.org&amp;quot;

gem &amp;quot;vagrant&amp;quot;, :path =&amp;gt; &amp;quot;/media/removable/Lexar/tools/vagrant&amp;quot;
gem &amp;quot;vagrant-aws&amp;quot;
gem &amp;quot;bundler&amp;quot;, &amp;quot;1.5.2&amp;quot;
gem &amp;quot;cucumber&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then &lt;em&gt;install&lt;/em&gt; the bundle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bundle _1.5.2_ install
Resolving dependencies...
Using builder 3.2.2
Using gherkin 3.2.0
Using cucumber-wire 0.0.1
Using diff-lcs 1.2.4
Using multi_json 1.7.9
Using multi_test 0.1.2
Using bundler 1.11.2
Using cucumber-core 1.4.0
Using cucumber 2.3.3
...
Bundle complete! 1 Gemfile dependency, 9 gems now installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now let&amp;rsquo;s run cucumber within the bundle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; bundle _1.5.2_ exec cucumber
No such file or directory - features. You can use `cucumber --init` to get started.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-skeleton-of-the-test&#34;&gt;The skeleton of the test&lt;/h3&gt;

&lt;p&gt;First, as requested by cucumber, let&amp;rsquo;s initialize a couple of files in the directory to be &amp;ldquo;cucumber compliant&amp;rdquo;.
Cucumber do have a helpful &lt;em&gt;init&lt;/em&gt; function. Let&amp;rsquo;s run it now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bundle _1.5.2_ exec cucumber --init
  create   features
  create   features/step_definitions
  create   features/support
  create   features/support/env.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;adding-the-feature-file&#34;&gt;Adding the &lt;em&gt;feature&lt;/em&gt; file&lt;/h4&gt;

&lt;p&gt;In the &lt;em&gt;features/&lt;/em&gt; directory, I create a file &lt;code&gt;basic_feature.feature&lt;/code&gt; which contains the YAML we wrote earlier, then I run cucumber again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle _1.5.2_ exec cucumber
Feature: I want a program that
  will simply allows me to watch netflix US
  
  Scenario: I want to watch netflix                                   # features/basic_feature.feature:4
    Given I am on my chromebook                                       # features/basic_feature.feature:5
    And I have access to the shell                                    # features/basic_feature.feature:6
    When I want to watch netflix                                      # features/basic_feature.feature:7
    And I launch a program on the command line                        # features/basic_feature.feature:8
    And it displays ready                                             # features/basic_feature.feature:9
    Then I open a navigator windows on http://www.netflix.com         # features/basic_feature.feature:10
    And I can watch Grey&#39;s anatomy (which is not available in france) # features/basic_feature.feature:11
                                
1 scenario (1 undefined)
7 steps (7 undefined)
0m0.054s

You can implement step definitions for undefined steps with these snippets:

Given(/^I am on my chromebook$/) do
  pending # Write code here that turns the phrase above into concrete actions
end
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We notice that the feature has been read and understood correctly by cucumber.
ON top of that Cucumber gives the skeleton of a ruby implementation for the tests.&lt;/p&gt;

&lt;p&gt;I will copy all the ruby code in its own file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# cat &amp;gt; features/step_definitions/tests.rb
Given(/^I am on my chromebook$/) do
  pending # Write code here that turns the phrase above into concrete actions
  end
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And run cucumber once more:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Feature: I want a program that
  will simply allows me to watch netflix US

  Scenario: I want to watch netflix                                   # features/basic_feature.feature:4
      Given I am on my chromebook                                       # features/step_definitions/tests.rb:1
        TODO (Cucumber::Pending)
        ./features/step_definitions/tests.rb:2:in `/^I am on my chromebook$/&#39;
        features/basic_feature.feature:5:in `Given I am on my chromebook&#39;
      And I have access to the shell                                    # features/step_definitions/tests.rb:5
      When I want to watch netflix                                      # features/step_definitions/tests.rb:9
      And I launch gonetflix.sh                                         # features/step_definitions/tests.rb:13
      And it displays ready                                             # features/step_definitions/tests.rb:17
      Then I open a navigator windows on http://www.netflix.com         # features/step_definitions/tests.rb:21
      And I can watch Grey&#39;s anatomy (which is not available in france) # features/step_definitions/tests.rb:25
      
1 scenario (1 pending)
7 steps (6 skipped, 1 pending)
0m0.041s`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool, the framework is ok. Now let&amp;rsquo;s actually implement the scenario and the tests&lt;/p&gt;

&lt;h4 id=&#34;implementation-of-the-given-keywords&#34;&gt;Implementation of the &amp;ldquo;Given&amp;rdquo; keywords&lt;/h4&gt;

&lt;p&gt;There is not much to say about the Given keyword. I can test that I am really on my Chromebook but that does not make any sense.
I will skip this test by not implementing anything in the function.&lt;/p&gt;

&lt;h4 id=&#34;implementation-of-the-when-keyword&#34;&gt;Implementation of the &amp;ldquo;When&amp;rdquo; keyword&lt;/h4&gt;

&lt;p&gt;The actual execution of the &amp;ldquo;When&amp;rdquo; is the execution of the Vagrant file.
It will start the EC2 instance and provision the VPN
I also need to mount the VPN locally afterwards&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#!/usr/bin/env ruby
require &amp;quot;vagrant&amp;quot;

# Starting the EC2 instance (running the vagrantfile)
env = Vagrant::Environment.new
env.cli(&amp;quot;up&amp;quot;)
# Starting OpenVPN locally
`sudo openvpn --mktun --dev tun0 &amp;amp;&amp;amp; sudo openvpn --config ~/Downloads/client.ovpn --dev tun0`
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;trying-to-implement-the-netflix-test-with-selenium&#34;&gt;(trying to) Implement the netflix test with selenium&lt;/h4&gt;

&lt;p&gt;To test the access, instead of faking my browser with curl, I will use the &lt;em&gt;selenium&lt;/em&gt; tool.
So I add it to my &lt;em&gt;Gemfile&lt;/em&gt; and &lt;code&gt;bundle update&lt;/code&gt; it (informations comes from &lt;a href=&#34;https://github.com/jonathanchrisp/selenium-cucumber-ruby-kickstarter&#34;&gt;this starterkit&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo &#39;gem &amp;quot;selenium-cucumber&amp;quot;&#39; &amp;gt;&amp;gt; Gemfile
$ echo &#39;gem &amp;quot;selenium-webdriver&amp;quot;&#39; &amp;gt;&amp;gt; Gemfile
$ echo &#39;gem &amp;quot;require_all&amp;quot;&#39; &amp;gt;&amp;gt; Gemfile
$ bundle _1.5.2_ update 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I need to create a special file in the &lt;code&gt;support&lt;/code&gt; subdirectory to define a bunch of objects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# cat features/support/env.rb
require &#39;selenium-webdriver&#39;
require &#39;cucumber&#39;

require &#39;require_all&#39;

require_all &#39;lib&#39;

Before do |scenario|
    @browser = Browser.new(ENV[&#39;DRIVER&#39;])
    @browser.delete_cookies
end

After do |scenario|
    @browser.driver.quit
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m also adding the files from the starterkit in the &lt;code&gt;lib&lt;/code&gt; subdirectory.&lt;/p&gt;

&lt;p&gt;As I am developing on my Chromebook, I also need the &lt;a href=&#34;https://sites.google.com/a/chromium.org/chromedriver/&#34;&gt;chromedriver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Too bad&lt;/strong&gt; chromedriver relies on the libX11 that cannot be installed on my Chromebook / &lt;strong&gt;end of show for selenium&lt;/strong&gt;
on the Chromebook&amp;hellip;  for now&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; I will continue with the development, but be aware that I won&amp;rsquo;t be able to test it until I am on a true linux box with
the chromedriver installed&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Then(/^I open a navigator windows on (.*?)$/) do |arg1|
  @browser.open_page(&amp;quot;http://www.netflix.com&amp;quot;)
end

Then(/^I can watch Grey&#39;s anatomy \(which is not available in france\)$/) do
  @browser.open_page(&amp;quot;http://www.netflix.com/idtogreysanatomy&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-actual-implementation-of-the-scenario&#34;&gt;The actual implementation of the scenario&lt;/h3&gt;

&lt;p&gt;What I need to do is to implement the scenario. Not the test scenario, the real one;
the one that will actually allows me to launch my ec2 instance, configure and start Openvpn.&lt;/p&gt;

&lt;p&gt;As I said before, I will use vagrant-aws to do so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; vagrant was depending on &lt;em&gt;bsdtar&lt;/em&gt;, and I&amp;rsquo;ve had to install it manually from source:&lt;/p&gt;

&lt;p&gt;(&lt;code&gt;tar xzvf libarchive-3.1.2.tar.gz &amp;amp;&amp;amp; ... &amp;amp;&amp;amp; ./configure --prefix=/usr/local &amp;amp;&amp;amp; make install clean&lt;/code&gt;)&lt;/p&gt;

&lt;h4 id=&#34;installing-vagrant-aws-plugin&#34;&gt;Installing vagrant-aws plugin&lt;/h4&gt;

&lt;p&gt;The vagrant-aws plugin has been installed by the bundler because I&amp;rsquo;ve indicated it as a dependency in the Gemfile.
But, I will have to have it as a requirement in the Vagrantfile because I&amp;rsquo;m not using the &amp;ldquo;official vagrant&amp;rdquo; and that
I am running in a bundler environment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vagrant&amp;rsquo;s built-in bundler management mechanism is disabled because
Vagrant is running in an external bundler environment. In these
cases, plugin management does not work with Vagrant. To install
plugins, use your own Gemfile. To load plugins, either put the
plugins in the &lt;code&gt;plugins&lt;/code&gt; group in your Gemfile or manually require
them in a Vagrantfile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;installing-the-base-box&#34;&gt;Installing the base box&lt;/h4&gt;

&lt;p&gt;The documentation says that the quickest way to get started is to install the dummy box.
That&amp;rsquo;s what I did:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle _1.5.2_ exec vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box
...
==&amp;gt; box: Successfully added box &#39;dummy&#39; (v0) for &#39;aws&#39;!
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-vagrantfile&#34;&gt;The Vagrantfile&lt;/h4&gt;

&lt;p&gt;The initial Vagrantfile looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &amp;quot;vagrant-aws&amp;quot;
Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.box = &amp;quot;dummy&amp;quot;

  config.vm.provider :aws do |aws, override|
    aws.access_key_id = &amp;quot;YOUR KEY&amp;quot;
    aws.secret_access_key = &amp;quot;YOUR SECRET KEY&amp;quot;
    aws.session_token = &amp;quot;SESSION TOKEN&amp;quot;
    aws.keypair_name = &amp;quot;KEYPAIR NAME&amp;quot;

    aws.ami = &amp;quot;ami-7747d01e&amp;quot;

    override.ssh.username = &amp;quot;ubuntu&amp;quot;
    override.ssh.private_key_path = &amp;quot;PATH TO YOUR PRIVATE KEY&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So all the rest in the basic implementation of the vagrant file and the provisioning.sh for the Openvpn configuration.
but that goes far behind the topic of this post which was to introduce myself to BDD and TDD.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve learned a lot about the ruby and cucumber environment in this post.
Too bad I couldn&amp;rsquo;t end with a fully running example because of my Chromebook.&lt;/p&gt;

&lt;p&gt;Anyway the expected results were for me to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;learn about BDD&lt;/li&gt;
&lt;li&gt;learn about cucumber&lt;/li&gt;
&lt;li&gt;learn about Ruby&lt;/li&gt;
&lt;li&gt;learn about vagrant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can say that I&amp;rsquo;ve reach my goals anyway. I will try to finish the implementation on a true Linux box locally, or on my
Macbook if I have time to do so.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RVM from a USB stick on a Chromebook</title>
      <link>https://blog.owulveryck.info/2016/03/31/rvm-from-a-usb-stick-on-a-chromebook/index.html</link>
      <pubDate>Thu, 31 Mar 2016 10:23:02 +0200</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/03/31/rvm-from-a-usb-stick-on-a-chromebook/index.html</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;h4 id=&#34;opening-remarks&#34;&gt;Opening remarks&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;m not a Ruby developer, and I&amp;rsquo;m heavily discovering the ecosystem by now.
This are my notes, and if anything seems wrong to you, do not hesitate to send me remarks.&lt;/p&gt;

&lt;h4 id=&#34;the-scenario&#34;&gt;The scenario&lt;/h4&gt;

&lt;p&gt;For testing purpose, I wanted to play with vagrant-aws and more generally with ruby on my Chromebook.&lt;/p&gt;

&lt;p&gt;Vagrant does not support &lt;em&gt;rubygems&lt;/em&gt; as installation method anymore (&lt;a href=&#34;http://mitchellh.com/abandoning-rubygems&#34;&gt;see Mitchell Hashimoto&amp;rsquo;s post&lt;/a&gt;)
and of course, there is no binary distribution available for the Chromebook.&lt;/p&gt;

&lt;p&gt;So I have to install it from the sources.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/mitchellh/vagrant/wiki/Installing-Vagrant-from-Source&#34;&gt;documentation&lt;/a&gt; says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do &lt;strong&gt;NOT&lt;/strong&gt; use the system Ruby - use a Ruby version manager like rvm, chruby, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alright, anyway I don&amp;rsquo;t want to mess with my system and break Homebrew, so using RVM seems to be a good idea.&lt;/p&gt;

&lt;h2 id=&#34;installing-rvm&#34;&gt;Installing RVM&lt;/h2&gt;

&lt;p&gt;The RVM installation is relatively easy; simply running &lt;code&gt;curl -sSL https://get.rvm.io | bash&lt;/code&gt; does the trick.
And then those commands make ruby 2.3.0 available via rvm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ~/.rvm/scripts/rvm  
$ rvm install 2.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stupid trick here is that everything is installed in my $HOME directory, and as my Chromebook is short on disk space: FS full !&lt;/p&gt;

&lt;p&gt;Too bad.&lt;/p&gt;

&lt;h2 id=&#34;using-a-usb-stick&#34;&gt;Using a USB stick&lt;/h2&gt;

&lt;p&gt;So my idea is to install the RVM suite onto a USB stick (because with me I don&amp;rsquo;t have any SDHC card available).&lt;/p&gt;

&lt;h3 id=&#34;preparing-the-stick&#34;&gt;Preparing the stick&lt;/h3&gt;

&lt;p&gt;At first, the USB stick must be formatted in extendX (ext4) in order to be able to use symlinks, correct ownership etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo mkfs.ext4 -L Lexar /dev/sda1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I&amp;rsquo;ve found that avoiding spaces in the volume name was good for rvm.&lt;/p&gt;

&lt;p&gt;Once connected on the Chromebook, it&amp;rsquo;s automatically mounted on &lt;code&gt;/media/removable/Lexar&lt;/code&gt;.
The problem are the options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/dev/sda1 on /media/removable/Lexar type ext4 (rw,nosuid,nodev,noexec,relatime,dirsync,data=ordered)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the most problematic is &lt;code&gt;noexec&lt;/code&gt; because I want to install executables in it.&lt;/p&gt;

&lt;p&gt;So what I did was simply:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo mount -o remount /dev/sda1 /media/removable/Lexar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and that did the trick.&lt;/p&gt;

&lt;h2 id=&#34;installing-rvm-on-the-usb&#34;&gt;Installing RVM on the USB&lt;/h2&gt;

&lt;p&gt;I will install rvm into &lt;code&gt;/media/removable/Lexar/rvm&lt;/code&gt;. In order to avoid any ownership and permission problem I did:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir /media/removable/Lexar/rvm
chown chronos:chronos /media/removable/Lexar/rvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then I created a simple &lt;code&gt;~/.rvmrc&lt;/code&gt; file as indicated in the documentation with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cat ~/.rvmrc                                          
$ export rvm_path=/media/removable/Lexar/rvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also included this in my &lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if [ -s &amp;quot;$HOME/.rvmrc&amp;quot;   ]; then
    source &amp;quot;$HOME/.rvmrc&amp;quot;
fi # to have $rvm_path defined if set
if [ -s &amp;quot;${rvm_path-$HOME/.rvm}/scripts/rvm&amp;quot;   ]; then
    source &amp;quot;${rvm_path-$HOME/.rvm}/scripts/rvm&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-rvm-1&#34;&gt;Installing rvm&lt;/h2&gt;

&lt;p&gt;the command I executed were then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -sSL https://get.rvm.io | bash
$ source /media/removable/Lexar/rvm/scripts/rvm
$ rvm autolibs enable
$ rvm get stable
$ rvm install 2.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that did the trick&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm list

rvm rubies

=* ruby-2.3.0 [ x84_64 ]

# =&amp;gt; - current
# =* - current &amp;amp;&amp;amp; default
#  * - default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing-with-vagrant&#34;&gt;Testing with vagrant&lt;/h2&gt;

&lt;h3 id=&#34;cloning-the-vagrant-sources&#34;&gt;Cloning the vagrant sources&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo mkdir /media/removable/Lexar/tools
$ sudo chown chronos:chronos /media/removable/Lexar/tools
$ cd /media/removable/Lexar/tools
$ git clone https://github.com/mitchellh/vagrant.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;preparing-the-rvm-file-for-vagrant&#34;&gt;Preparing the rvm file for vagrant&lt;/h3&gt;

&lt;p&gt;To use the ruby 2.3.0 (that I&amp;rsquo;ve installed before) with vagrant, I need to create a .rvmrc in the vagrant directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /media/removable/Lexar/tools/vagrant
$ rvm --rvmrc --create 2.3.0@vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-bundler&#34;&gt;Installing bundler&lt;/h3&gt;

&lt;p&gt;The bundler version that is supported by vagrant must be &amp;lt;= 1.5.2 as written in the &lt;code&gt;Gemfile&lt;/code&gt;. So I&amp;rsquo;m installing version
1.5.2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd /media/removable/Lexar/tools/vagrant
$ source .rcmrv
$ gem install bundler -v 1.5.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compiling-vagrant&#34;&gt;Compiling vagrant&lt;/h3&gt;

&lt;p&gt;Back to the vagrant documentation, what I must do is now to &amp;ldquo;compile it&amp;rdquo;. To do so, the advice is to run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle _1.5.2_ install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(just in case several bundler are present )&lt;/p&gt;

&lt;p&gt;I faced this error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;NoMethodError: undefined method `spec&#39; for nil:NilClass
Did you mean?  inspect
An error occurred while installing vagrant (1.8.2.dev), and Bundler cannot continue.
Make sure that `gem install vagrant -v &#39;1.8.2.dev&#39;` succeeds before bundling.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to google, this may be an issue with the version of bundler I&amp;rsquo;m using.
As I cannot upgrade the bundler because of vagrant, I&amp;rsquo;ve decided to take a chance and use
a lower version of Ruby&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rvm install 2.2.0
$ rvm --rvmrc --create 2.2.0@vagrant
$ source .rvmrc
# and reinstalling bundler
$ gem install bundler -v 1.5.2            
$ bundle _1.5.2_ install
...
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;voilà&#34;&gt;Voilà!&lt;/h1&gt;

&lt;p&gt;I can now use vagrant installed fully on the USB stick with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bundle _1.5.2_ exec vagrant
Vagrant appears to be running in a Bundler environment. Your 
existing Gemfile will be used. Vagrant will not auto-load any plugins
installed with `vagrant plugin`. Vagrant will autoload any plugins in
the &#39;plugins&#39; group in your Gemfile. You can force Vagrant to take over
with VAGRANT_FORCE_BUNDLER.

You appear to be running Vagrant outside of the official installers.
Note that the installers are what ensure that Vagrant has all required
dependencies, and Vagrant assumes that these dependencies exist. By
running outside of the installer environment, Vagrant may not function
properly. To remove this warning, install Vagrant using one of the
official packages from vagrantup.com.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it for this post; next I will try to install vagrant-aws and play a little bit with it.&lt;/p&gt;

&lt;p&gt;stay tuned.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>