<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Topology on Unladen swallow</title>
    <link>https://blog.owulveryck.info/tags/topology.xml</link>
    <description>Recent content in Topology on Unladen swallow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015/2017</copyright>
    <atom:link href="https://blog.owulveryck.info/tags/topology.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Linda, 31yo, with 5 starving philosophers...</title>
      <link>https://blog.owulveryck.info/2017/02/03/linda-31yo-with-5-starving-philosophers.../index.html</link>
      <pubDate>Fri, 03 Feb 2017 20:57:30 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2017/02/03/linda-31yo-with-5-starving-philosophers.../index.html</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The hand is the tool of tools&lt;/strong&gt; - &lt;em&gt;Aristotle&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It ain&amp;rsquo;t no secret to anyone actually knowing me: I am a fan of automation. Automation and configuration management
have come a long way since &lt;a href=&#34;http://markburgess.org/&#34;&gt;Mark Burgess&lt;/a&gt; wrote the first version of &lt;a href=&#34;https://cfengine.com/&#34;&gt;cfengine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But even if the landscape has changed, operators are still scripting (only the DSL has changed), and the area targeted by those scripts remains technical.&lt;/p&gt;

&lt;p&gt;There is no real abstraction nor automation of a design.&lt;/p&gt;

&lt;p&gt;Let me explain that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You still need a human to read and understand the architecture of an application.&lt;/li&gt;
&lt;li&gt;You still need another human to transpile it into a language understandable by a CM tool.&lt;/li&gt;
&lt;li&gt;And you need to configure/script this tool to react on some events to keep the application running and healthy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; With a bunch of IT specialists from different major companies, we are trying to figure out the best way to achieve this goal. I will have the opportunity to talk about that in a dedicated post soon.&lt;/p&gt;

&lt;p&gt;To describe an application I have had the opportunity to work with &lt;a href=&#34;http://docs.oasis-open.org/TOSCA/TOSCA-Simple-Profile-YAML/v1.1/cs0prd01/TOSCA-Simple-Profile-YAML-v1.1-csprd01.html&#34;&gt;TOSCA&lt;/a&gt; for a major bank last year (by the way, if you want to play with TOSCA, you can use my &lt;a href=&#34;https://github.com/CiscoCloud/TOSCAlib&#34;&gt;TOSCAlib by Cisco&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have really liked the idea of an independent DSL that was able to fully describe an application in a way that it can be writable and understandable by a human as well as a machine.&lt;/p&gt;

&lt;p&gt;But it is not enough. TOSCA is based on the idea that you need an orchestrator to operate the workflow. And orchestrator is &amp;ldquo;bad&amp;rdquo;. The management system must be distributed and autonomous.
(for more about that cf &lt;a href=&#34;https://blog.owulveryck.info/2016/02/10/configuration-management-choreography-and-self-aware-applications/index.html&#34;&gt;Configuration management, choreography and self-aware applications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This leads to the idea that the application is a community of elements. And every single element of the community will act regarding the information it gets from the environments and from its peers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t communicate by sharing memory; share memory by communicating.&lt;/strong&gt; - &lt;em&gt;R. Pike&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How can those elements share the information?&lt;/p&gt;

&lt;h1 id=&#34;tuple-spaces-or-good-ideas-don-t-always-win-https-software-carpentry-org-blog-2011-03-tuple-spaces-or-good-ideas-dont-always-win-html&#34;&gt;&lt;a href=&#34;https://software-carpentry.org/blog/2011/03/tuple-spaces-or-good-ideas-dont-always-win.html&#34;&gt;Tuple Spaces (or, Good Ideas Don&amp;rsquo;t Always Win)&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;The title of this section is taken from &lt;a href=&#34;https://software-carpentry.org/blog/2011/03/tuple-spaces-or-good-ideas-dont-always-win.html&#34;&gt;this blog post&lt;/a&gt; which is indeed a good introduction on the tuple-space and how to use them.&lt;/p&gt;

&lt;h2 id=&#34;first-what-is-a-tuple&#34;&gt;First: What is a tuple&lt;/h2&gt;

&lt;p&gt;A tuple is simply a finite list of element&amp;hellip; the element can be of any type. Therefore a tuple set could be used to describe a lot of things. Because actually we can use a tuple set to describe a vector.
And with several vectors we can describe a matrix, and with matrix&amp;hellip;&lt;/p&gt;

&lt;p&gt;For example, a digraph can be represented by a tuple set that discribes its adjacency matrix. Therefore, for example, it can then be possible to transpile a TOSCA description to a tuple-set (cf &lt;a href=&#34;https://blog.owulveryck.info/2015/12/02/orchestrate-a-digraph-with-goroutine-a-concurrent-orchestrator/index.html&#34;&gt;Orchestrate a digraph with goroutine, a concurrent orchestrator&lt;/a&gt; for the decomposition of a TOSCA lifecycle in a matrix).&lt;/p&gt;

&lt;p&gt;Now ok, we can describe a workflow&amp;hellip; but in a distributed application, how can the node share their states?&lt;/p&gt;

&lt;h2 id=&#34;tuple-space&#34;&gt;Tuple space&amp;hellip;&lt;/h2&gt;

&lt;p&gt;In short, a tuple space is a repository of tuples that can be accessed concurrently. A tuple space can be seen as a big bucket full of tuple.&lt;/p&gt;

&lt;p&gt;The tuple space is visible and consistent through all nodes. The tuple space is the memory!&lt;/p&gt;

&lt;p&gt;Ok, so last question: How do we access the tuples?&lt;/p&gt;

&lt;h1 id=&#34;meet-linda&#34;&gt;Meet Linda&lt;/h1&gt;

&lt;p&gt;Linda is a &amp;ldquo;coordination language&amp;rdquo; developed by Sudhir Ahuja at AT&amp;amp;T Bell Laboratories in collaboration with David Gelernter and Nicholas Carriero at Yale University in 1986 (&lt;a href=&#34;https://en.wikipedia.org/wiki/Linda_(coordination_language)&#34;&gt;cf wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Linda&amp;rsquo;s principle is very simple as it relies on 4 basic operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;in(t)&lt;/em&gt; is used to get a tuple from the tuple space if the tuple matches the tuple t. In blocks until a matching tuples exists in the tuple space.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rd(t)&lt;/em&gt; (read) is used to read a tuple from the tuple space if the tuple matches the tuple t. It does not remove it from the tuple space.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;out(t)&lt;/em&gt; puts a tuple in the tuple space&lt;/li&gt;
&lt;li&gt;&lt;em&gt;eval(t)&lt;/em&gt; is a promise. It evaluates the function contained in a tuple t, immediately returns and will place the result in the tuple space later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Important&lt;/em&gt; A tuple can be &lt;strong&gt;actual&lt;/strong&gt; or &lt;strong&gt;formal&lt;/strong&gt;. An actual tuple holds real values. Therefore the &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;rd&lt;/em&gt; operations on an actual tuple succeed if every single value of the tuple matches.
A formal tuple may holds &amp;ldquo;variables&amp;rdquo;. Therefore the &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;rd&lt;/em&gt; operations succeed if the real values match and if the type of the formal match the actual value.&lt;/p&gt;

&lt;p&gt;You can find a more complete description of the language and examples &lt;a href=&#34;http://www.cs.bu.edu/~best/crs/cs551/lectures/lecture-22.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;think-big-start-small-move-fast&#34;&gt;Think big, start small, move fast&lt;/h1&gt;

&lt;p&gt;Since my colleague &lt;a href=&#34;https://www.linkedin.com/in/xavier-talon-7bb5261&#34;&gt;Xavier Talon&lt;/a&gt; told me about linda and the idea of using it with TOSCA, I have thousand ideas running around.
What we would like is to use the linda language to coordinate the nodes of an application topology described by TOSCA.
As the topology is  obviously distributed the tuple space I will use/implement must exists at the scale of a cloud platform.&lt;/p&gt;

&lt;p&gt;A raft based key/value store could be used as a tuple space.
And of course the virtual operator that will implement the linda language and interact with the tuple space must be self-contained.
GO would be a good choice for the implementation of the communication agent because of it self-contained, static binary design (maybe RUST would be too but I don&amp;rsquo;t know RUST yet).
Moreover the built-in concurrency could make the development easy (an eval can be triggered simply in a goroutine).&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;let&amp;rsquo;s POC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all First we need to be sure that a distributed tuple-space could work in the cloud.&lt;/p&gt;

&lt;p&gt;As a proof of concept, I will use the philosophers dinning problem as simply described in page 452 of the paper &lt;a href=&#34;http://www.inf.ed.ac.uk/teaching/courses/ppls/linda.pdf&#34;&gt;Linda in context&lt;/a&gt; from Nicholas Carriero and David Gelernter.&lt;/p&gt;

&lt;p&gt;My goals are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To implement a basic Linda language in go&lt;/li&gt;
&lt;li&gt;To run the philosopher problem locally&lt;/li&gt;
&lt;li&gt;To modify the code so it uses etcd as a tuple space&lt;/li&gt;
&lt;li&gt;To run the philosopher problem on AWS with a philosopher per region&lt;/li&gt;
&lt;li&gt;To use my TOSCAlib to read a topology and encode it in the tuple space&lt;/li&gt;
&lt;li&gt;To run a deployment at scale&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post I will present a basic implementation of the language that solves the dinning problem locally.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Here is the problem as exposed in the paper:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A round table is set with some number of plates (traditionally five); there is a single chopstick between each two plates, and a bowl of rice in the center of the table. Philosophers think, then enter the room, eat, leave the room and repeat the cycle. A philosopher can eat without two chopsticks in hand; the two he needs are the ones to the left and the right of the plate at which he is seated.  If the table is full and all philosophers simultaneously grab their left chopsticks, no right chopsticks are available and deadlock ensues. To prevent deadlock, we allow only four philosophers (or one less than the total number of plates) into the room at any one time.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-implementation&#34;&gt;The implementation&lt;/h2&gt;

&lt;p&gt;I have extracted the C-Linda implementation of this problem and copied it here.&lt;/p&gt;

&lt;h4 id=&#34;the-c-linda-implenentation&#34;&gt;The C linda implenentation&lt;/h4&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Phil(i)
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i;
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) {
      think();
      in(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;);
      in(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, i) ;
      in(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, (i&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;l)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;Num) ;
      eat();
      out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, i);
      out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, (i&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;i)&lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt;Num);
      out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;initialize()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; Hum; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;) C
    out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chopstick&amp;quot;&lt;/span&gt;, i);
    eval(phil(i));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; (Num&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;)) 
      out(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;room ticket&amp;quot;&lt;/span&gt;);
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;what-is-needed&#34;&gt;What is needed&lt;/h3&gt;

&lt;p&gt;To solve this particular problem I don&amp;rsquo;t have to fully implement the linda language. There is no need for the &lt;em&gt;rd&lt;/em&gt; action. &lt;em&gt;eval&lt;/em&gt; is simply a fork that I will implement using a goroutine and &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;out&lt;/em&gt; do not use formal tuples.&lt;/p&gt;

&lt;p&gt;The actions will communicate with the tuple space via &lt;code&gt;channels&lt;/code&gt;. Therefore I can create a type Linda composed of two channels for input and output. The actions will be methods of the Linda type.
both &lt;em&gt;in&lt;/em&gt; and &lt;em&gt;rd&lt;/em&gt; method will get all the tuples in a loop and decide to put them back in the space or to keep it.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; Linda &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
  Input  &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}
  Output &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;the-tuple-type&#34;&gt;The &lt;em&gt;Tuple&lt;/em&gt; type&lt;/h4&gt;

&lt;p&gt;As a tuple I will use a flat go structure. Therefore I can describe a tuple as an interface{}&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; Tuple &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;the-in-action&#34;&gt;The &lt;em&gt;in&lt;/em&gt; action&lt;/h4&gt;

&lt;p&gt;In will read from the input channel until an object matching its argument is present. If the object read is different, It is sent back in the tuple space via the output channels:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; (l &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;Linda) In(m Tuple) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; l.Input {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; match(m, t) {
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Assign t to m&lt;/span&gt;
        m = t
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;
      }
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Not for me, put the tuple back&lt;/span&gt;
      l.Output &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt; m
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;the-eval-function&#34;&gt;The &lt;em&gt;eval&lt;/em&gt; function&lt;/h3&gt;

&lt;p&gt;The eval function is a bit trickier because we cannot simply pass the function as it would be evaluated before the substitution of the arguments.
What I will do is to pass an array of interface{}. The first argument will hold the function as a first class citizen and the other elements are the arguments of the function.
I will use the reflection to be sure that the argument is a function and executes it in a go routine.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; (l &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;Linda) Eval(fns []&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}) {
	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// The first argument of eval should be the function&lt;/span&gt;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; reflect.ValueOf(fns[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]).Kind() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; reflect.Func {
		fn &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; reflect.ValueOf(fns[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;])
		&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; args []reflect.Value
		&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(fns); i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; {
			args = &lt;span style=&#34;color: #008000&#34;&gt;append&lt;/span&gt;(args, reflect.ValueOf(fns[i]))
		}
		&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;go&lt;/span&gt; fn.Call(args)
	}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;back-to-the-philosophers&#34;&gt;Back to the philosophers&amp;hellip;&lt;/h2&gt;

&lt;h4 id=&#34;the-go-linda-implementation&#34;&gt;The Go-linda implementation&lt;/h4&gt;

&lt;p&gt;Regarding the implementation of Linda, the transcription of the algorithm is simple:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &amp;lt; num; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; {
    ld.Out(chopstick(i))
    ld.Eval([]&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}{phil, i})
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; i &amp;lt; (num &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) {
        ld.Out(ticket{})
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; phil(i &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;) {
    p &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; philosopher{i}
    fmt.Printf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Philosopher %v is born\n&amp;quot;&lt;/span&gt;, p.ID)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; {
        p.think()
        fmt.Printf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;[%v] is hungry\n&amp;quot;&lt;/span&gt;, p.ID)
        ld.In(ticket{})
        ld.In(chopstick(i))
        ld.In(chopstick((i &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; num))
        p.eat()
        ld.Out(chopstick(i))
        ld.Out(chopstick((i &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;%&lt;/span&gt; num))
        ld.Out(ticket{})
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;the-tuple-space&#34;&gt;The tuple space&lt;/h3&gt;

&lt;p&gt;We have Linda&amp;hellip; that can put and read tuples via channels&amp;hellip; But we still need to plug those channels to the tuple space.
As a first example, we won&amp;rsquo;t store the information and simply pass them from output to input in an endless loop.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt;() {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; output {
        input &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;-&lt;/span&gt; i
    }
}()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;execution&#34;&gt;Execution&lt;/h2&gt;

&lt;p&gt;After compiling and executing the code, I can see my philosophers are eating and thinking&amp;hellip;
&lt;pre&gt;
Philosopher 1 is born
[1] is thinking
Philosopher 0 is born
[0] is thinking
Philosopher 3 is born
[3] is thinking
Philosopher 2 is born
[2] is thinking
Philosopher 4 is born
[4] is thinking
[2] has finished thinking
[2] is hungry
[2] is eating
[1] has finished thinking
[1] is hungry
[1] is eating
[4] has finished thinking
[4] is hungry
[4] is eating
&amp;hellip;
&lt;/pre&gt;
The code can be found here &lt;a href=&#34;https://github.com/owulveryck/go-linda/releases/tag/v0.1&#34;&gt;github.com/owulveryck/go-linda&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This is a very basic implementation of the first step.&lt;/p&gt;

&lt;p&gt;In my next experiment, I will try to plug etcd as a tuple space so the philosophers could be distributed around the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration management, choreography and self-aware applications</title>
      <link>https://blog.owulveryck.info/2016/02/10/configuration-management-choreography-and-self-aware-applications/index.html</link>
      <pubDate>Wed, 10 Feb 2016 17:19:47 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/02/10/configuration-management-choreography-and-self-aware-applications/index.html</guid>
      <description>

&lt;p&gt;Thanks to the &lt;a href=&#34;https://www.linkedin.com/company/techsys?trk=company_logo&#34;&gt;company I&amp;rsquo;m working for (Techsys)&lt;/a&gt; I&amp;rsquo;ve had the opportunity to attend the &lt;a href=&#34;http://cfgmgmtcamp.eu/&#34;&gt;configuration management camp&lt;/a&gt; in Gent (&lt;em&gt;be&lt;/em&gt;) for its 2016 edition.&lt;/p&gt;

&lt;p&gt;I really enjoyed those two days of talks, watching people present different ideas of a possible future for
the infrastructure and deployment engineering.
Beyond the technical demonstrations and the experience sharing, I&amp;rsquo;ve spotted a bunch of ideas&lt;/p&gt;

&lt;p&gt;Among all, those that comes to me spontaneously are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You don&amp;rsquo;t need configuration management, what you need is a description of the topology of your application - &lt;em&gt;&lt;a href=&#34;http://www.markshuttleworth.com/biography&#34;&gt;Mark Shuttleworth&lt;/a&gt;&lt;/em&gt; in its keynote &lt;em&gt;The magic of modeling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t need orchestration, what you need is choreography - Exposed by &lt;em&gt;&lt;a href=&#34;https://www.linkedin.com/in/julian&#34;&gt;Julian Dunn&lt;/a&gt;&lt;/em&gt;
(you can find a transcription &lt;a href=&#34;https://www.youtube.com/watch?v=kfF9IATUask&#34;&gt;here on youtube&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;What we need is a new way to do configuration management - &lt;em&gt;&lt;a href=&#34;https://www.linkedin.com/in/james-shubin-74a89a44&#34;&gt;James Shubin&lt;/a&gt;&lt;/em&gt;, see &lt;a href=&#34;https://ttboj.wordpress.com/2016/01/18/next-generation-configuration-mgmt/&#34;&gt;his blog post&lt;/a&gt; which ispired my project &lt;a href=&#34;http://github.com/owulveryck/khoreia&#34;&gt;khoreia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I came back home very excited about this.
This post tries to expose my reflection and how I&amp;rsquo;ve implemented an idea (see it as a POC)
I&amp;rsquo;ve passed some time to learn about TOSCA, and the to code an orchestrator.&lt;/p&gt;

&lt;p&gt;In a first part I will expose why, according to me, the topological description of the application may be what
company needs.&lt;/p&gt;

&lt;p&gt;Therefore, I will notice the need for orchestration tools.&lt;/p&gt;

&lt;p&gt;Even if the concepts remains actuals, the future may be an evolution of this mechanism of central command and control.
In the last part of this post, I will expose what I&amp;rsquo;ve understood of the concept of choreography so far.&lt;/p&gt;

&lt;p&gt;Finally I will demonstrate the idea with a POC based on a development on &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;the etcd product&lt;/a&gt; from CoreOS.
(and a youtube demo for those who don&amp;rsquo;t want to &lt;code&gt;git clone...&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&#34;configuration-management-and-orchestration&#34;&gt;Configuration management and orchestration&lt;/h2&gt;

&lt;p&gt;Configuration management has been for a long time, a goal for IT automation.
Years ago, it allowed system engineers to control a huge park of machines while maintaining a TCO at a relatively decent level.&lt;/p&gt;

&lt;p&gt;Over the last decade, 4 major tools have emerged and are now part of most CTO common vocabulary.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the trends from 4 major tools categorized as &amp;ldquo;configuration management tools&amp;rdquo;:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tool&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Founded in&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ansible&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2012&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Puppet&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2005&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Chef&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2009&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Salt&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2011&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: I do not represent CFEngine because it is doesn&amp;rsquo;t seem not so widely used in dotcom companies (even if it seems to be a great tool and on a certain extent the father of the others)&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;interest&amp;rdquo; for those tools as seen by Google is be represented like this:&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;//www.google.com/trends/embed.js?hl=en&amp;q=/m/0k0vzjb,+/m/03d3cjz,+/m/05zxlz3,+/m/0hn8c6s&amp;date=1/2014+25m&amp;cmpt=q&amp;tz=Etc/GMT-1&amp;tz=Etc/GMT-1&amp;content=1&amp;cid=TIMESERIES_GRAPH_0&amp;export=5&amp;w=700&amp;h=350&#34;&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;As we can see, Ansible seems to be the emerging technology. Indeed its acquisition by redhat in late 2015 may have boosted a bit the trends, but anyway, the companies that do not implement infrastructure as code may seem to prefer this tool.
Cause or consequence, Gartner has nominated Ansible as a &lt;em&gt;cool vendor&lt;/em&gt; for 2015 (according to Gartner, a Cool Vendor is an emerging and innovative vendor that has original, interesting, and unique technology with real market impact)&lt;/p&gt;

&lt;p&gt;Why did a newcomer such as Ansible did present such interest?&lt;/p&gt;

&lt;p&gt;Beside its simplicity, Ansible is not exactly a configuration management tool, it is &lt;strong&gt;an orchestrator&lt;/strong&gt; (see &lt;a href=&#34;https://www.Ansible.com/orchestration&#34;&gt;the Ansible webpage&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&#34;https://en.wikipedia.org/wiki/Diffusion_of_innovations&#34;&gt;Rogger&amp;rsquo;s theory&lt;/a&gt; about the diffusion of innovation, and regarding the trends, I think that it is accurate to say
that the position of Ansible is near the &amp;ldquo;late majority&amp;rdquo;
&lt;center&gt;
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Diffusionofideas.PNG/330px-Diffusionofideas.PNG&#34; alt=&#34;Diffusion of ideas&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;What does this mean ?&lt;/p&gt;

&lt;p&gt;To me,it means that people do feel the need for orchestration, or if they don&amp;rsquo;t feel it, they will thanks to Ansible.
Via orchestration, they may feel the need for representing their product.&lt;/p&gt;

&lt;p&gt;We are now talking about &lt;strong&gt;infrastructure as data&lt;/strong&gt;; soon we will talk about &lt;strong&gt;architecture as data&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;from-system-configuration-management&#34;&gt;From system configuration management&amp;hellip;&lt;/h3&gt;

&lt;p&gt;I did system administration and engineering for years. Configuration management was the answer to the growing of the infrastructure.
Config management allowed us to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the systems reliable&lt;/li&gt;
&lt;li&gt;Get the best efficiency possible from the infrastructure&lt;/li&gt;
&lt;li&gt;Maintain a low TCO
&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was all &amp;ldquo;system centric&amp;rdquo;, so the application could be deposed and run in best conditions.&lt;/p&gt;

&lt;h3 id=&#34;to-application-s-full-description&#34;&gt;&amp;hellip; to application&amp;rsquo;s full description&lt;/h3&gt;

&lt;p&gt;A couple of years ago, maybe because of the DevOps movement, my missions were getting more and more application centric (which is good).
Actually infrastructure has not been considered as a needed cost anymore.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;em&gt;Agility&lt;/em&gt;, &lt;em&gt;DevOps&lt;/em&gt;, and the emergent notion of product (as opposed to project), &lt;strong&gt;Application and infrastructure are now seen as a whole&lt;/strong&gt;.&lt;br /&gt;
(I&amp;rsquo;m talking of the application &amp;ldquo;born in the data center&amp;rdquo;, it is different for those &amp;ldquo;born in the cloud&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;Therefore, the setup of the application must not rely only on programmed configuration management tools anymore, but on its complete &lt;strong&gt;representation&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-self-sufficient-application&#34;&gt;The self-sufficient application&lt;/h1&gt;

&lt;p&gt;Some times ago, I wrote article published on &lt;a href=&#34;https://www.linkedin.com/pulse/from-integration-self-sufficient-application-olivier-wulveryck?trk=prof-post&#34;&gt;pulse&lt;/a&gt; because I wanted to lay down on paper what I thought about the future of application deployment.
I&amp;rsquo;ve described some layers of the application.
I kept on studying, and with a some help from my colleagues and friends, I&amp;rsquo;ve  finally been able to put a word on those ideas I had in mind.&lt;/p&gt;

&lt;p&gt;This word is &lt;strong&gt;Topology&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;and-then-came-tosca&#34;&gt;and then came TOSCA&lt;/h2&gt;

&lt;p&gt;To describe a whole application, I needed a &lt;em&gt;domain specific language&lt;/em&gt; (DSL).
All of the languages I was trying to document were by far too system centric.
Then I discovered &lt;a href=&#34;http://docs.oasis-open.org/tosca/TOSCA-Simple-Profile-YAML/v1.0/csprd01/TOSCA-Simple-Profile-YAML-v1.0-csprd01.html&#34;&gt;TOSCA&lt;/a&gt;.
TOSCA is &lt;strong&gt;THE DSL&lt;/strong&gt; for representing the topology of an application.&lt;/p&gt;

&lt;h3 id=&#34;pros&#34;&gt;Pros&amp;hellip;&lt;/h3&gt;

&lt;p&gt;What&amp;rsquo;s good about Tosca is its goal:&lt;/p&gt;

&lt;p&gt;It describes a standard for representing a cloud application. It is written by the Oasis consortium and
therefore most of the big brand in IT may be aware of its existence.
The promise is that if you describe any application with Tosca, it could be deployed on any platform, with a decent &lt;strong&gt;orchestrator&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;and-cons&#34;&gt;&amp;hellip;and cons&lt;/h3&gt;

&lt;p&gt;But&amp;hellip; Tosca is complex.
It&amp;rsquo;s not that simple to write a Tosca representation. The standard wants to cover all the possible cases, and according &lt;a href=&#34;https://en.wikipedia.org/wiki/Vilfredo_Pareto&#34;&gt;Pareto&lt;/a&gt;&amp;rsquo;s law,
I can say that 80% of the customers will only need 20% of the standard.&lt;/p&gt;

&lt;p&gt;On top of that, Tosca is young (by now, the YAML version is still in pre-release), and I could not find any decent tool to orchestrate and deploy an application.
Big companies claim their compliance with the standard, but actually very few of them (if any) does really implement it.&lt;/p&gt;

&lt;h2 id=&#34;let-s-come-back-to-orchestration-and-real-world&#34;&gt;Let&amp;rsquo;s come back to orchestration (and real world)&lt;/h2&gt;

&lt;p&gt;As seen before, a Tosca file would need a tool to transform it to a real application.
This tool is &lt;strong&gt;an orchestrator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The tool should be called &lt;strong&gt;conductor&lt;/strong&gt;, because what is does actually is to conduct the symphony, and yet in our context the symphony is not
represented by the topology, but by its &amp;lsquo;score&amp;rsquo;: its execution plan, and the purpose of the &amp;lsquo;orchestrator&amp;rsquo; is to make every node to play its part
so the application symphony could be rendered in best condition of reliability and efficiency&amp;hellip;&lt;/p&gt;

&lt;p&gt;Wait, that was the promise of the configuration management tools, isn&amp;rsquo;t it?&lt;/p&gt;

&lt;h3 id=&#34;the-execution-plan&#34;&gt;The execution plan&lt;/h3&gt;

&lt;p&gt;So what is the execution plan.
An execution plan is a program. It describes exactly what needs to be done by systems.
The execution plan is deterministic.&lt;/p&gt;

&lt;p&gt;With the description of the application, the execution plan, and the orchestration, the ultimate goal of automation seems fulfilled, indeed!
We have a complete suite of tools that allows to describe the application and architecture base on its functions and it is possible to
generate and executes all the commands a computer &lt;strong&gt;must&lt;/strong&gt; do to get things done.&lt;/p&gt;

&lt;p&gt;Why do we need more?
Because now systems are so complex that we could not rely anymore on IT infrastructure to do exactly what we told it to.
Mark Burgess, considered by a lot of people as a visionary, wrote a book entitled:
&lt;a href=&#34;http://www.amazon.com/In-Search-Certainty-information-infrastructure/dp/1492389161&#34;&gt;In Search of Certainty: The science of our information infrastructure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Julian Dunn told about it in its speech, and I&amp;rsquo;ve started reading IT.&lt;/p&gt;

&lt;p&gt;The conclusion is roughly:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We may not rely on command and control anymore, we should make the system work on its own to reach a level of stability&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;dancing-choreography-jazz&#34;&gt;Dancing, Choreography, Jazz ?&lt;/h1&gt;

&lt;p&gt;A solution to the orchestration SPOF and  a workaround for dealing with the uncertainty of the infrastructure may be to implement a choreography.
Or to replace the symphony with a piece of jazz.
You give every attendee (dancer, jazzman or TOSCA node) the structure of the piece to play.
And given the chords and the structure, they all react and do what they have committed to do.&lt;/p&gt;

&lt;p&gt;This should produce similar to the same mechanism controlled by an orchestrator, but more fault tolerant.
Actually, the brain will not have to take care of unpredicted event; each node will do so.
The application has become self-aware.&lt;/p&gt;

&lt;h2 id=&#34;implementation-a-distributed-system&#34;&gt;Implementation: a distributed system&lt;/h2&gt;

&lt;p&gt;This concept, described in so many sci-fi books, may become applicable because science formalized consensus algorithm such as
paxo or raft.
And even better, it is easy to find very good implementation of those concepts (for free)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;etcd&lt;/code&gt; from CoreOS is one of those tools.
It is a service oriented key/value store, distributed on a cluster of machine.&lt;/p&gt;

&lt;p&gt;It can be used as a communication based for a cluster of nodes composing a choreography.&lt;/p&gt;

&lt;p&gt;Even more, etcd clients have the ability to monitor an event allowing us to implement the self awareness of the application.&lt;/p&gt;

&lt;h2 id=&#34;proof-of-concept-khoreia&#34;&gt;Proof of concept: khoreia&lt;/h2&gt;

&lt;p&gt;khoreia is a little program I made in &lt;code&gt;go&lt;/code&gt; that relies on the &lt;a href=&#34;http://github.com/coreos/eetcd&#34;&gt;etcd&lt;/a&gt; distributed system.
Etcd itself is an implementation of the raft consensus algorithm. I do heavily advice that you take a look at &lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;this page&lt;/a&gt;
for a complete and clear explanation.&lt;/p&gt;

&lt;p&gt;The khoreia single binary takes a topology description in yaml
(by now very simple, but sooner or later I may implement the TOSCA DSL, as I already
have a &lt;a href=&#34;http://github.com/owulveryck/toscalib&#34;&gt;Tosca library&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Then it triggers the nodes and every node reacts on events.
Regarding the events, it implements the expected life cycle for the node.&lt;/p&gt;

&lt;p&gt;Without actually coding it, the complement life cycle of the application is then applied.
Even better, the application is fault tolerant (if a check fails, the do method is called again) and the execution
is completely stateless because of the event based mechanism.&lt;/p&gt;

&lt;h3 id=&#34;screencast-a-little-demo-on-distributed-systems-based-on-event-on-filesystems&#34;&gt;Screencast: a little demo on distributed systems based on event on filesystems&lt;/h3&gt;

&lt;p&gt;Here is a little screencast I made as a POC.
Two machines are used (linked by a VPN):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;my chromebook, linux-based at home in France;&lt;/li&gt;
&lt;li&gt;a FreeBSD server located in Canada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both machines are part of an etcd cluster.
The topology is composed of 8 nodes with dependencies which can be represented like this (same example as the one I used in a previous post):
&lt;img class=&#34;img-responsive&#34; src=&#34;https://blog.owulveryck.info/assets/images/digraph1.png&#34; alt=&#34;digraph example&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Nodes 0-3 are targeted on the chromebook while nodes 5-7 are targeted on the BSD machine.&lt;/p&gt;

&lt;p&gt;The topology is described as a simple yaml file &lt;a href=&#34;https://github.com/owulveryck/khoreia/blob/e32af3d77d0b57bf36b68a2460e5a47132f29118/samples/topology.yaml&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each node is fulfilling two methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create&lt;/li&gt;
&lt;li&gt;Configure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And each method is implementing an interface composed of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Check()&lt;/code&gt; which check whether the action has been release and the &amp;ldquo;role&amp;rdquo; is ok&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Do()&lt;/code&gt; which actually implements the action&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: The signature of the method is actually a bit different, and the go implementation involve channels, but I does not change the principle,
so I&amp;rsquo;ve decided to omit that for clarity.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;Each node will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Wait for an event&lt;/strong&gt; and call Create.Check() and Configure.Check().&lt;/li&gt;
&lt;li&gt;watch for events from their dependencies&lt;/li&gt;
&lt;li&gt;if an event is detected, call the appropriate Do() method&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;engine&#34;&gt;Engine&lt;/h4&gt;

&lt;p&gt;The interfaces &lt;code&gt;Check()&lt;/code&gt; and &lt;code&gt;Do()&lt;/code&gt; may be implemented on different engines.&lt;/p&gt;

&lt;p&gt;For my demo, as suggested by James I&amp;rsquo;m using a &amp;ldquo;file engine&amp;rdquo; base on iNotify (linux) and kQueue (freebsd).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Check()&lt;/code&gt; method is watching the presence of a file. It sends the event &amp;ldquo;true&amp;rdquo; if the file is created of &amp;ldquo;false&amp;rdquo; if its deleted.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Do()&lt;/code&gt; method actually create an empty file.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/l96uFQUrcp8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h4 id=&#34;khoreia-on-github&#34;&gt;Khoreia on github:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/owulveryck/khoreia&#34;&gt;github.com/owulveryck/khoreia&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Self-awareness, self-healing, elasticity, modularity, &amp;hellip; with a choreography based configuration and deployment tools, standard application may get
new capabilities without totally rethinking their infrastructure.&lt;/p&gt;

&lt;p&gt;Some of the stuff that still need to be implemented are, for example,  the notion of interface and commitment of the node, and the notion of
machine learning for every node to teach them how to react to different events in an efficient way.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>