<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zmq on Olivier Wulveryck&#39;s Tech Blog</title>
    <link>/tags/zmq/</link>
    <description>Recent content in Zmq on Olivier Wulveryck&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>olivier.wulveryck@gmail.com (Olivier Wulveryck)</managingEditor>
    <webMaster>olivier.wulveryck@gmail.com (Olivier Wulveryck)</webMaster>
    <copyright>All rights reserved - 2015/2016</copyright>
    <lastBuildDate>Thu, 22 Oct 2015 20:40:36 +0200</lastBuildDate>
    <atom:link href="/tags/zmq/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ruby / ZeroMQ / GO</title>
      <link>/2015/10/22/ruby-/-zeromq-/-go/</link>
      <pubDate>Thu, 22 Oct 2015 20:40:36 +0200</pubDate>
      <author>olivier.wulveryck@gmail.com (Olivier Wulveryck)</author>
      <guid>/2015/10/22/ruby-/-zeromq-/-go/</guid>
      <description>

&lt;h1 id=&#34;abtract:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;Abtract&lt;/h1&gt;

&lt;p&gt;I really like go as a programming language. It is a good tool to develop web restful API service.&lt;/p&gt;

&lt;p&gt;On the other hand, ruby and its framework rails has also been wildly used to achieve the same goal.&lt;/p&gt;

&lt;p&gt;Therefore we may be facing a &amp;ldquo;legacy&amp;rdquo; ruby developpement that we would like to connect to our brand new go framework.
0MQ may be a perfect choice for intefacing the two languages.&lt;/p&gt;

&lt;p&gt;Anyway, it is, at least, a good experience to do a little bit of code to make them communicate.&lt;/p&gt;

&lt;h1 id=&#34;zeromq:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;ZeroMQ&lt;/h1&gt;

&lt;p&gt;I will use the ZeroMQ version 4 as it is the latest available one.
On top of that, I can see in the &lt;a href=&#34;http://zeromq.org/docs:changes-4-0-0&#34;&gt;release notes&lt;/a&gt; that there is an implementation of a strong encryption, and I may use it later on&lt;/p&gt;

&lt;h1 id=&#34;go:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;Go&lt;/h1&gt;

&lt;h2 id=&#34;installation-of-the-library:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;Installation of the library&lt;/h2&gt;

&lt;p&gt;As written in the README file, I try a &lt;code&gt;go get&lt;/code&gt; installation on my chromebook.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ go get github.com/pebbe/zmq4
# pkg-config --cflags libzmq
Package libzmq was not found in the pkg-config search path.
Perhaps you should add the directory containing `libzmq.pc&#39;
to the PKG_CONFIG_PATH environment variable
No package &#39;libzmq&#39; found
pkg-config: exit status 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The go binding is not a pure go implementation, and it still needs the C library of zmq.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s &lt;em&gt;brew installing&lt;/em&gt; it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~  brew install zmq
==&amp;gt; Downloading http://download.zeromq.org/zeromq-4.1.3.tar.gz
######################################################################## 100.0%
==&amp;gt; ./configure --prefix=/usr/local/linuxbrew/Cellar/zeromq/4.1.3 --without-libsodium
==&amp;gt; make
==&amp;gt; make install
/usr/local/linuxbrew/Cellar/zeromq/4.1.3: 63 files, 3.5M, built in 73 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s do the go-get again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ go get github.com/pebbe/zmq4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so far so good. Now let&amp;rsquo;s test the installation with a &amp;ldquo;hello world&amp;rdquo; example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: the &lt;a href=&#34;https://github.com/pebbe/zmq4/blob/master/examples&#34;&gt;examples directory&lt;/a&gt; contains a go implementation of all the example of the ZMQ book
I will use the &lt;a href=&#34;https://github.com/pebbe/zmq4/blob/master/examples/hwclient.go&#34;&gt;hello world client&lt;/a&gt; and the &lt;a href=&#34;https://github.com/pebbe/zmq4/blob/master/examples/hwserver.go&#34;&gt;hello world server&lt;/a&gt; for my tests&lt;/p&gt;

&lt;p&gt;The hello world client/server is implementing a Request-Reply patternt and are communicating via a TCP socket.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The server is the &lt;em&gt;replier&lt;/em&gt; and is listening on the TCP port 5555
&lt;code&gt;go
...
func main() {
//  Socket to talk to clients
responder, _ := zmq.NewSocket(zmq.REP)
defer responder.Close()
responder.Bind(&amp;quot;tcp://*:5555&amp;quot;)
...
}
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The client is the &lt;em&gt;requester&lt;/em&gt; and is dialing the same TCP port
&lt;code&gt;go
...
func main() {
//  Socket to talk to server
fmt.Println(&amp;quot;Connecting to hello world server...&amp;quot;)
requester, _ := zmq.NewSocket(zmq.REQ)
defer requester.Close()
requester.Connect(&amp;quot;tcp://localhost:5555&amp;quot;)
...
}
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, the client is sending (requesting) a &lt;em&gt;hello&lt;/em&gt; message, and the server is replying a &lt;em&gt;world&lt;/em&gt; message.&lt;/p&gt;

&lt;h2 id=&#34;running-the-example:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;Running the example&lt;/h2&gt;

&lt;p&gt;First, start the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ cd $GOPATH/src/github.com/pebbe/zmq4/examples
~ go run hwserver.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the client&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ cd $GOPATH/src/github.com/pebbe/zmq4/examples
~ go run hwclient.go
Connecting to hello world server...
Sending  Hello 0
Received  World
Sending  Hello 1
Received  World
Sending  Hello 2
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;ruby:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;Ruby&lt;/h1&gt;

&lt;p&gt;Now let&amp;rsquo;s implement a Ruby client.&lt;/p&gt;

&lt;h2 id=&#34;installation-of-the-library-1:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;Installation of the library&lt;/h2&gt;

&lt;p&gt;a &lt;em&gt;gem install&lt;/em&gt; is supposed to do the trick:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ gem install zmq
Building native extensions.  This could take a while...
ERROR:  Error installing zmq:
ERROR: Failed to build gem native extension.

/usr/local/linuxbrew/opt/ruby/bin/ruby -r ./siteconf20151022-23021-1ehwusq.rb extconf.rb
    checking for zmq.h... yes
    checking for zmq_init() in -lzmq... yes
    Cool, I found your zmq install...
    creating Makefile

    make &amp;quot;DESTDIR=&amp;quot; clean

    make &amp;quot;DESTDIR=&amp;quot;
    compiling rbzmq.c
    rbzmq.c: In function &#39;socket_getsockopt&#39;:
    rbzmq.c:968:7: error: &#39;ZMQ_RECOVERY_IVL_MSEC&#39; undeclared (first use in this function)
        case ZMQ_RECOVERY_IVL_MSEC:
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arg!, something went wrong. It looks like there is a version mismatch between th libzmq brew installed and the version expected by the gem
The &lt;em&gt;zmq&lt;/em&gt; gem seems a bit old and there is a &lt;em&gt;FFI&lt;/em&gt; ruby extension with a more active developement.&lt;/p&gt;

&lt;p&gt;Moreover, I have found []the perfect website for the ruby-and-zmq-ignorant(&lt;a href=&#34;https://github.com/andrewvc/learn-ruby-zeromq&#34;&gt;https://github.com/andrewvc/learn-ruby-zeromq&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;As written in the doc, let&amp;rsquo;s install the needed gems via &lt;code&gt;gem install ffi ffi-rzmq zmqmachine&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;let-s-try-the-lib:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;Let&amp;rsquo;s try the lib&lt;/h2&gt;

&lt;p&gt;Ok, it is now time to run an example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;ffi-rzmq&#39;
def error_check(rc)
    if ZMQ::Util.resultcode_ok?(rc)
        false
    else
        STDERR.puts &amp;quot;Operation failed, errno [#{ZMQ::Util.errno}] description [#{ZMQ::Util.error_string}]&amp;quot;
        caller(1).each { |callstack| STDERR.puts(callstack)  }
        true
    end
end

ctx = ZMQ::Context.create(1)
STDERR.puts &amp;quot;Failed to create a Context&amp;quot; unless ctx

req_sock = ctx.socket(ZMQ::REQ)
rc = req_sock.connect(&#39;tcp://127.0.0.1:5555&#39;)
STDERR.puts &amp;quot;Failed to connect REQ socket&amp;quot; unless ZMQ::Util.resultcode_ok?(rc)

2.times do
    rc = req_sock.send_string(&#39;Ruby says Hello&#39;)
    break if error_check(rc)

    rep = &#39;&#39;
    rc = req_sock.recv_string(rep)
    break if error_check(rc)
    puts &amp;quot;Received reply &#39;#{rep}&#39;&amp;quot;
end
error_check(req_sock.close)

ctx.terminate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this example with a simple &lt;code&gt;ruby client.rb&lt;/code&gt; command leads to the following errors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby client.rb
Assertion failed: check () (src/msg.cpp:248)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, my GO server is receiving the messages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ go run hwserver.go
Received  Ruby says Hello
Received  Ruby says Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;end-of-show:0c52c1f9d165cef19abe8f54df707cfc&#34;&gt;End of show&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s it for now. I think I&amp;rsquo;m facing a bug in the ruby implementation of the libzmq I&amp;rsquo;m using.
Indeed, I&amp;rsquo;ve found an &lt;a href=&#34;https://github.com/chuckremes/ffi-rzmq/issues/118&#34;&gt;issue&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;I will check again later, or I will try on another environement but the essential is here.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>