<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Unladen swallow</title>
    <link>https://blog.owulveryck.info/tags/aws.xml</link>
    <description>Recent content in Aws on Unladen swallow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2015/2017</copyright>
    <atom:link href="https://blog.owulveryck.info/tags/aws.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Playing with Facebook&#39;s GraphQL (for AWS products and offers management)</title>
      <link>https://blog.owulveryck.info/2017/03/22/playing-with-facebooks-graphql-for-aws-products-and-offers-management/index.html</link>
      <pubDate>Wed, 22 Mar 2017 09:15:35 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2017/03/22/playing-with-facebooks-graphql-for-aws-products-and-offers-management/index.html</guid>
      <description>

&lt;h1 id=&#34;about-graphql&#34;&gt;About GraphQL&lt;/h1&gt;

&lt;p&gt;GraphQL has been invented by Facebook for the purpose of refactoring their mobile application. Facebook had reached the limits of the standard REST API mainly because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting that much information was requiring a huge amount of API endpoints&lt;/li&gt;
&lt;li&gt;The versioning of the API was counter-productive regarding Facebook&amp;rsquo;s frequents deployements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But graphql is not only a query language related to Facebook. GraphQL is not only applicable to social data.&lt;/p&gt;

&lt;p&gt;Of course it is about graphs and graphs represents relationships. But you can represent relationships in all of your business objects.&lt;/p&gt;

&lt;p&gt;Actually, GraphQL is all about your application data.&lt;/p&gt;

&lt;p&gt;In this post I will try to take a concrete use case. I will first describe the business objects as a graph, then I will try to implement a schema with GraphQL. At the very end I will develop a small GraphQL endpoint to test the use case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt; &lt;em&gt;I am discovering GraphQL on my own. This post reflects my own work and some stuff may be inaccurate or not idiomatic.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-use-case-aws-billing&#34;&gt;The use case: AWS billing&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take a concrete example of a graph representation. Let&amp;rsquo;s imagine that we are selling products related to Infrastructre as a Service (&lt;em&gt;IaaS&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For the purpose of this post, I will use the AWS data model because it is publicly available and I have already blogged about it.
We are dealing with products families, products, offers and prices.&lt;/p&gt;

&lt;p&gt;In (a relative) proper english, let&amp;rsquo;s write down a description of the relationships:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Products

&lt;ul&gt;
&lt;li&gt;A product family is composed of several products&lt;/li&gt;
&lt;li&gt;A product belongs to a product family&lt;/li&gt;
&lt;li&gt;A product owns a set of attributes (for example its location, its operating system type, its type&amp;hellip;)&lt;/li&gt;
&lt;li&gt;A product and all its attributes are identified by a stock keeping unit (SKU)&lt;/li&gt;
&lt;li&gt;A SKU has a set of offers&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Offers

&lt;ul&gt;
&lt;li&gt;An offer represents a selling contract&lt;/li&gt;
&lt;li&gt;An offer is specific to a SKU&lt;/li&gt;
&lt;li&gt;An offer is characterized by the term of the offer&lt;/li&gt;
&lt;li&gt;A term is typed as either &amp;ldquo;Reserved&amp;rdquo; or &amp;ldquo;OnDemand&amp;rdquo;&lt;/li&gt;
&lt;li&gt;A term has attributes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Prices

&lt;ul&gt;
&lt;li&gt;An offer has at least one price dimension&lt;/li&gt;
&lt;li&gt;A price dimension is characterized by its currency, its unit of measure, its price per unit, its description and eventually per a range of application (start and end)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding those elements, I have extracted and represented a &amp;ldquo;t2.micro/linux in virginia&amp;rdquo; with 3 of its offers and all the prices associated.&lt;/p&gt;

&lt;p&gt;Here is the graphical representation generated thanks to &lt;a href=&#34;http://www.graphviz.org/&#34;&gt;graphviz&amp;rsquo; fdp&lt;/a&gt;
&lt;img src=&#34;https://blog.owulveryck.info/assets/graphql/graph.svg&#34; alt=&#34;Graph Representation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The goal of GraphQL is to extract a subtree of this graph to get part or all information.
As an example, here is a tree representation of the same graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.owulveryck.info/assets/graphql/graph_tree.svg&#34; alt=&#34;Graph Representation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: I wrote a very quick&amp;rsquo;n&amp;rsquo;dirty parser to get the information which can be found &lt;a href=&#34;https://gist.github.com/owulveryck/bac700e2f5e5b1af0fffda4e7adb9eed&#34;&gt;here&lt;/a&gt;. I wrote an idiomatic one but it is the property of the company I made it for.&lt;/p&gt;

&lt;h1 id=&#34;defining-the-graphql-schema&#34;&gt;Defining the GraphQL schema&lt;/h1&gt;

&lt;p&gt;The first thing that needs to be done is to write the &lt;a href=&#34;http://graphql.org/learn/schema/&#34;&gt;schema&lt;/a&gt; that will define the &lt;em&gt;query&lt;/em&gt; type.&lt;/p&gt;

&lt;p&gt;I will not go into deep details in here. I will simple refer to this excellent document which is a &lt;em&gt;résumé&lt;/em&gt; of the language:
&lt;a href=&#34;https://github.com/sogko/graphql-schema-language-cheat-sheet/raw/master/graphql-shorthand-notation-cheat-sheet.png&#34;&gt;Graphql shorthand notation cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can define a product that must contains a list of offers this way and a product family like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Product definition&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Product&lt;/span&gt; {
  offers: [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Offer&lt;/span&gt;]!
  location: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
  instanceType: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
  sku: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;!
  operatingSystem: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Definition of the product family&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;ProductFamily&lt;/span&gt; {
  products: [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Product&lt;/span&gt;]!
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One offer is composed of a mandatory price list. An offer must be of a pre-defined type: &lt;em&gt;OnDemand&lt;/em&gt; or &lt;em&gt;Reserved&lt;/em&gt;.
Let&amp;rsquo;s define this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Definition of an offer&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Offer&lt;/span&gt; {
  type: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;OFFER_TYPE&lt;/span&gt;!
  code: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;!
  LeaseContractLength: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
  PurchaseOption: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
  OfferingClass: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
  prices: [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Price&lt;/span&gt;]!
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# All possible offer types&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;OFFER_TYPE&lt;/span&gt; {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;OnDemand&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Reserved&lt;/span&gt;
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Definition of a price&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Price&lt;/span&gt; {
  description: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
  unit: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
  currency: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;
  price: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Float&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;At the very end we define the &lt;em&gt;queries&lt;/em&gt;
Let&amp;rsquo;s start by defining a single query. To make it simple for the purpose of the post, Let&amp;rsquo;s assume that we will try to get a whole &lt;em&gt;product family&lt;/em&gt;.
If we query the entire product family, we will be able to display all informations of all product in the family. But let&amp;rsquo;s also consider that we want to limit the family and extract only a certain product identified by its SKU.&lt;/p&gt;

&lt;p&gt;The Query definition is therefore:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# root Query type&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Query&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;products&lt;/span&gt;(sku: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;String&lt;/span&gt;): [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Product&lt;/span&gt;]
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We will query products (&lt;code&gt;{products}&lt;/code&gt;) and it will return a ProductFamily.&lt;/p&gt;

&lt;h2 id=&#34;query&#34;&gt;Query&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see now how a typical query would look like. To understand the structure of a query, I advise you to read this excellent blog post: &lt;a href=&#34;https://dev-blog.apollodata.com/the-anatomy-of-a-graphql-query-6dffa9e9e747#.jbklz6h17&#34;&gt;The Anatomy of a GraphQL Query&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;ProductFamily&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;products&lt;/span&gt; {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;location&lt;/span&gt;
      &lt;span style=&#34;color: #B00040&#34;&gt;type&lt;/span&gt;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This query should normally return all the products of the family and display their location and their type.
Let&amp;rsquo;s try to implement this&lt;/p&gt;

&lt;h1 id=&#34;geek-time-let-s-go&#34;&gt;Geek time: let&amp;rsquo;s go!&lt;/h1&gt;

&lt;p&gt;I will use the &lt;code&gt;go&lt;/code&gt; implementation of GraphQL which is a &amp;ldquo;simple&amp;rdquo; translation in go of the &lt;a href=&#34;https://github.com/graphql/graphql-js&#34;&gt;javascript&amp;rsquo;s reference implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;github.com/graphql-go/graphql&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To keep it simple, I will load all the products and offers in memory. In the real life, we should implement an access to whatever database. But that is a strength of the GraphQL model: The flexibility. The backend can be changed later without breaking the model or the API.&lt;/p&gt;

&lt;h2 id=&#34;first-pass-only-the-products&#34;&gt;First pass: Only the products&lt;/h2&gt;

&lt;h3 id=&#34;defining-the-schema-and-the-query-in-go&#34;&gt;Defining the schema and the query in go&lt;/h3&gt;

&lt;p&gt;Most of the work has already been done and documented in a series of blog posts &lt;a href=&#34;http://mycodesmells.com/post/building-graphql-api-in-go&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First we must define a couple of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;Schema&lt;/em&gt; as returned by the function &lt;code&gt;graphql.NewSchema&lt;/code&gt; that takes as argument a &lt;code&gt;graphql.SchemaConfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;graphql.SchemaConfig&lt;/code&gt; is a structure composed of a &lt;code&gt;Query&lt;/code&gt;, a &lt;code&gt;Mutation&lt;/code&gt; and other alike fields which are pointers to &lt;code&gt;graphql.Object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The rootQuery is created by the structure &lt;code&gt;graphql.ObjectConfig&lt;/code&gt; in which we pass an object of type &lt;code&gt;graphql.Fields&lt;/code&gt; (which is a &lt;code&gt;map[string]*Field&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code to create the schema is the following:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;fields &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.Fields{}
rootQuery &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.ObjectConfig{Name: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;RootQuery&amp;quot;&lt;/span&gt;, Fields: fields}
schemaConfig &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.SchemaConfig{
       Query: graphql.NewObject(rootQuery),
}
schema, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.NewSchema(schemaConfig)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;defining-the-fields&#34;&gt;Defining the fields&lt;/h3&gt;

&lt;p&gt;Our shema is created but nearly empty because we did not filled the &amp;ldquo;fields&amp;rdquo; variable.
the fields variable will contain what the user can request.&lt;/p&gt;

&lt;p&gt;As seen before, fields is a map of &lt;code&gt;*Field&lt;/code&gt;. The key of the map is the root query. In our definition of the Query, we declared that the query would be &amp;ldquo;products&amp;rdquo;. So &amp;ldquo;products&amp;rdquo; is the key of the map.
The graphql.Field that is returned is a list type composed of productTypes.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;fields &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.Fields{
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
             Type: graphql.NewList(productType),
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will see in a minute how to define the &lt;em&gt;productType&lt;/em&gt;. Before, we must provide a way to seek for the product in the database.
This is done by implementing the &lt;code&gt;Resolve&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;fields &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.Fields{
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
             Type: graphql.NewList(productType),
             Resolve: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt;(p graphql.ResolveParams) (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color: #B00040&#34;&gt;error&lt;/span&gt;) {
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The resolv function will return all the products in our database.&lt;/p&gt;

&lt;p&gt;But wait&amp;hellip; In the Query definition, we said that we wanted to be able to limit the product by setting a sku in the query.&lt;/p&gt;

&lt;p&gt;To inform our schema that it can handle a we add the &lt;code&gt;Args&lt;/code&gt; field to the &lt;code&gt;graphql.Field&lt;/code&gt; structure:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;fields &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.Fields{
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
              Type: graphql.NewList(productType),
              Args: graphql.FieldConfigArgument{
                      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sku&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.ArgumentConfig{
                                Type: graphql.String,
                      },
              },
              Resolve: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt;(p graphql.ResolveParams) (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color: #B00040&#34;&gt;error&lt;/span&gt;) {
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as the argument is not mandatory, we will use an if statement in the Resolve function to check whether we have a sku or not:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; sku, skuok &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; p.Args[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sku&amp;quot;&lt;/span&gt;].(&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;); skuok {
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;defining-the-producttype&#34;&gt;Defining the &lt;em&gt;productType&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;To be able to query display the information of the product (and query the fields), we must define the productType as a graphql object.
This is done like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; productType = graphql.NewObject(graphql.ObjectConfig{
        Name: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Product&amp;quot;&lt;/span&gt;,
        Fields: graphql.Fields{
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sku&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;operatingSystem&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;instanceType&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
        },
})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A productType is a graphql object composed of the 4 fields. Those fields will be returned as string in the graphql.&lt;/p&gt;

&lt;h3 id=&#34;querying&#34;&gt;Querying&lt;/h3&gt;

&lt;p&gt;I will not implement a webservice to query my schema by now. This can easily be done with some handlers that are part of the project.
I will use the same technique as found on internet: I will put the query as argument to my cli.&lt;/p&gt;

&lt;p&gt;Assuming that &lt;code&gt;query&lt;/code&gt; actually holds my my graphql request, I can query my schema by doing:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;params &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.Params{Schema: schema, RequestString: query}
r &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; graphql.Do(params)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; r.HasErrors() {
    log.Fatalf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Failed due to errors: %v\n&amp;quot;&lt;/span&gt;, r.Errors)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;a-couple-of-tests&#34;&gt;A couple of tests&amp;hellip;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./pricing -db bla -query &amp;quot;{products(sku:\&amp;quot;HZC9FAP4F9Y8JW67\&amp;quot;){location}}&amp;quot; | jq &amp;quot;.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;: [
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;US East (N. Virginia)&amp;quot;&lt;/span&gt;
      }
    ]
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;./pricing -db bla -query &amp;quot;{products(sku:\&amp;quot;HZC9FAP4F9Y8JW67\&amp;quot;){location,instanceType}}&amp;quot; | jq &amp;quot;.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;: [
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;US East (N. Virginia)&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;instanceType&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;t2.micro&amp;quot;&lt;/span&gt;
      }
    ]
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;./pricing -db bla -query &amp;quot;{products{location}}&amp;quot; | jq &amp;quot;.&amp;quot; | head -15
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;: [
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;US East (Ohio)&amp;quot;&lt;/span&gt;
      },
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;EU (Frankfurt)&amp;quot;&lt;/span&gt;
      },
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;EU (Frankfurt)&amp;quot;&lt;/span&gt;
      },
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Asia Pacific (Sydney)&amp;quot;&lt;/span&gt;
      },
&lt;/pre&gt;&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;./pricing -db bla -query &amp;quot;{products{location,operatingSystem}}&amp;quot; | jq &amp;quot;.&amp;quot; | head -20
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;: [
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;operatingSystem&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Windows&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Asia Pacific (Sydney)&amp;quot;&lt;/span&gt;
      },
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;operatingSystem&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Windows&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;AWS GovCloud (US)&amp;quot;&lt;/span&gt;
      },
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;operatingSystem&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Windows&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Asia Pacific (Mumbai)&amp;quot;&lt;/span&gt;
      },
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;operatingSystem&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SUSE&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;US East (N. Virginia)&amp;quot;&lt;/span&gt;
      },
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;adding-the-offers&#34;&gt;Adding the Offers&lt;/h2&gt;

&lt;p&gt;To add the offer, we should first define a new offerType&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; offerType = graphql.NewObject(graphql.ObjectConfig{
        Name: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Offer&amp;quot;&lt;/span&gt;,
        Fields: graphql.Fields{
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;LeaseContractLenght&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;PurchaseOption&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;OfferingClass&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
        },
})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then make the productType aware of this new type:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; productType = graphql.NewObject(graphql.ObjectConfig{
        Name: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Product&amp;quot;&lt;/span&gt;,
        Fields: graphql.Fields{
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sku&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;operatingSystem&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;instanceType&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.String,
                },
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;offers&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;graphql.Field{
                        Type: graphql.NewList(offerType),
                },
        },
})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, make sure that the resolv function is able to fill the structure of the product with the correct offer.&lt;/p&gt;

&lt;h3 id=&#34;testing&#34;&gt;Testing:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./pricing -db bla -query &amp;quot;{products(sku:\&amp;quot;HZC9FAP4F9Y8JW67\&amp;quot;){location,instanceType,offers{type,code}}}&amp;quot; | jq &amp;quot;.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;products&amp;quot;&lt;/span&gt;: [
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;offers&amp;quot;&lt;/span&gt;: [
          {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;OnDemand&amp;quot;&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;JRTCKXETXF&amp;quot;&lt;/span&gt;
          }
        ],
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;location&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;US East (N. Virginia)&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;instanceType&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;t2.micro&amp;quot;&lt;/span&gt;
      }
    ]
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is it!&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I didn&amp;rsquo;t document the prices, but it can be done following the same principles.&lt;/p&gt;

&lt;p&gt;Graphql seems really powerful. Now that I have this little utility, I may try (once more) to develop a little react frontend or a &lt;em&gt;GraphiQL&lt;/em&gt; UI.
What I like most is that it has forced me to think in graph instead of the traditional relational model.&lt;/p&gt;

&lt;p&gt;The piece of code is on &lt;a href=&#34;https://github.com/owulveryck/graphql-test&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;: I have included a graphiql interpreter for testing. It works great. Everything is on github:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.owulveryck.info/assets/images/graphiql.png&#34; alt=&#34;GraphiQL&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A foot in NoSQL and a toe in big data</title>
      <link>https://blog.owulveryck.info/2017/01/13/a-foot-in-nosql-and-a-toe-in-big-data/index.html</link>
      <pubDate>Fri, 13 Jan 2017 22:22:46 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2017/01/13/a-foot-in-nosql-and-a-toe-in-big-data/index.html</guid>
      <description>

&lt;p&gt;The more I work with AWS, the more I understand their models. This goes far beyond the technical principles of micro service.
As an example I recently had an opportunity to dig a bit into the billing process.
I had an explanation given by a colleague whose understanding was more advanced than mine.
In his explanation, he mentioned this blog post: &lt;a href=&#34;https://aws.amazon.com/blogs/aws/new-aws-price-list-api/&#34;&gt;New price list API&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;understanding-the-model&#34;&gt;Understanding the model&lt;/h1&gt;

&lt;p&gt;By reading this post and this &lt;a href=&#34;http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html&#34;&gt;explanation&lt;/a&gt;, I understand that the offers are categorized in families (eg AmazonS3) and that an offer is composed of a set of products.
Each product is characterized by its SKU&amp;rsquo;s reference (&lt;a href=&#34;https://en.wikipedia.org/wiki/Stock_keeping_unit&#34;&gt;stock-keeping unit&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;inventory-management&#34;&gt;Inventory management&lt;/h2&gt;

&lt;p&gt;So finally, it is just about inventory management. In the retail, when you say &amp;ldquo;inventory management&amp;rdquo;, the IT usually replies with millions dollars &lt;em&gt;ERP&lt;/em&gt;.
And the more items we have, the more processing power we need and then more dollar are involved&amp;hellip; and richer the IT specialists are (just kidding).&lt;/p&gt;

&lt;p&gt;Moreover enhancing an item by adding some attributes can be painful and risky&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://imgs.xkcd.com/comics/exploits_of_a_mom.png&#34; alt=&#34;xkcd&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-nosql-approach&#34;&gt;The NoSQL approach&lt;/h2&gt;

&lt;p&gt;Due to the rise of the online shopping, inventory management must be real time.
The stock inventory is a business service. and placing it in a micro service architecture bring constraints: the request should be satisfied in micro seconds.&lt;/p&gt;

&lt;p&gt;More over, the key/value concept allows to store &amp;ldquo;anything&amp;rdquo; in a value. Therefore, you can store a list of attributes regardless of what the attributes are.&lt;/p&gt;

&lt;p&gt;When it comes to NoSQL, there are usually two approaches to store the data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simple Key/Value;&lt;/li&gt;
&lt;li&gt;document-oriented.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first I did and experiment with a simple key/value store called BoltDB (which is more or less like Redis).
In this approach the value stored was a json representation&amp;hellip; A kind of document.
Then I though that it could be a good idea to use a more document oriented service: DynamoDB&lt;/p&gt;

&lt;h1 id=&#34;geek-time&#34;&gt;Geek time&lt;/h1&gt;

&lt;p&gt;In this part I will explain how to get the data from AWS and to store them in the dynamoDB service. The code is written in GO and is just a proof of concept.&lt;/p&gt;

&lt;h2 id=&#34;the-product-informations&#34;&gt;The product informations&lt;/h2&gt;

&lt;p&gt;A product&amp;rsquo;s technical representation is described &lt;a href=&#34;http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/reading-an-offer.html&#34;&gt;here&lt;/a&gt;.
We have:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Product Details&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
   &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sku&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sku&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The SKU of the product&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;productFamily&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The product family of the product&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; {
         &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;attributeName&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;attributeValue&amp;quot;&lt;/span&gt;,
      }
   }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are three important entries but only two are mandatories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;SKU&lt;/em&gt;: A unique code for a product.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Product Family&lt;/em&gt;: The category for the type of product. For example, compute for Amazon EC2 or storage for Amazon S3.&lt;/li&gt;
&lt;li&gt;Attributes: A list of all of the product attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-the-table&#34;&gt;Creating the &amp;ldquo;table&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;As my goal is for now to create a proof of concept and play with the data, I am creating the table manually.
DynamoDB allows the creation of two indexes per table. So I create a table &lt;em&gt;Products&lt;/em&gt; with two indexes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SKU&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProductFamily&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.owulveryck.info/assets/images/bigdata/blog-dynamo-create-table.png&#34; alt=&#34;Create Table&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;principle&#34;&gt;Principle&lt;/h2&gt;

&lt;p&gt;The data is retrieved by a simple &lt;code&gt;http.Get&lt;/code&gt; method. Then a &lt;code&gt;json.Decoder&lt;/code&gt; takes the body (an &lt;code&gt;io.Reader&lt;/code&gt;) as argument and decode it in a predefined structure.
Once the structure is filled, I will store it in the DynamoDB.&lt;/p&gt;

&lt;h3 id=&#34;the-structures&#34;&gt;The structures&lt;/h3&gt;

&lt;p&gt;I need three go structures. Two will be used to decode and range through the offer index. The other one will hold all the product details for a specific offer.&lt;/p&gt;

&lt;h4 id=&#34;offer-index&#34;&gt;Offer Index&lt;/h4&gt;

&lt;p&gt;The offer index is composed of offers referenced in by an offer name (&lt;code&gt;map[string]offer&lt;/code&gt;)
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; offerIndex &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    FormatVersion   &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;           &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;formatVersion&amp;quot;`&lt;/span&gt;
    Disclaimer      &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;           &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;disclaimer&amp;quot;`&lt;/span&gt;
    PublicationDate time.Time        &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;publicationDate&amp;quot;`&lt;/span&gt;
    Offers          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;]offer &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;offers&amp;quot;`&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;An offer in the index is characterized by three elements. I am catching all of them, but only &lt;code&gt;CurrrentVersionURL&lt;/code&gt; is useful in my case.
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; offer &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    OfferCode         &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;offerCode:&amp;quot;`&lt;/span&gt;
    VersionIndexURL   &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;versionIndexUrl&amp;quot;`&lt;/span&gt;
    CurrentVersionURL &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;currentVersionUrl&amp;quot;`&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;products&#34;&gt;Products&lt;/h4&gt;

&lt;p&gt;I hold all the product details in a structure. The product details holds all the products in a map whose key is the SKU. Therefore a SKU field is useless.
The Attribute value is an interface{} because it can be of any type (more on this later in the post).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; : In case of massive data flow, it would probably be better to decode the stream pieces by pieces (as written in the &lt;a href=&#34;https://golang.org/pkg/encoding/json/#Decoder.Decode&#34;&gt;the go documentation&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;type&lt;/span&gt; productDetails &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; {
    Products &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// the key is SKU&lt;/span&gt;
        ProductFamily &lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;                 &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;productFamily&amp;quot;`&lt;/span&gt;
        Attributes    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color: #B00040&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt;{} &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;attributes&amp;quot;`&lt;/span&gt;
    } &lt;span style=&#34;color: #BA2121&#34;&gt;`json:&amp;quot;products&amp;quot;`&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;getting-the-data&#34;&gt;Getting the data&lt;/h3&gt;

&lt;h4 id=&#34;offers&#34;&gt;Offers&lt;/h4&gt;

&lt;p&gt;The first action is to grab the json of the offer index and put it in a object of type &lt;code&gt;offerIndex&lt;/code&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;resp, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; http.Get(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/index.json&amp;quot;&lt;/span&gt;)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; oi offerIndex
err = json.NewDecoder(resp.Body).Decode(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;oi)
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// oi contains all the offers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then loop for each offer and do a &lt;code&gt;GET&lt;/code&gt; of every &lt;code&gt;CurrentVersionURL&lt;/code&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; _ , o &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; oi.Offers {
        resp, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; http.Get(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;https://pricing.us-east-1.amazonaws.com&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; o.CurrentVersionURL)
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;and-products&#34;&gt;And products&lt;/h4&gt;

&lt;p&gt;The same principles applies for the products, we decode the stream in an object:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;var&lt;/span&gt; pd productDetails
err = json.NewDecoder(resp.Body).Decode(&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;pd)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have all the informations we are ready to store them in the database.&lt;/p&gt;

&lt;h2 id=&#34;storing-the-informations&#34;&gt;Storing the informations&lt;/h2&gt;

&lt;p&gt;As usual with any AWS access, you need to create a &lt;code&gt;session&lt;/code&gt; and a &lt;code&gt;service&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sess, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; session.NewSession()
svc &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; dynamodb.New(sess)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/aws/session/&#34;&gt;session&lt;/a&gt; will take care of the credentials by reading the appropriate files or environment variables.&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;svc&lt;/code&gt; object is used to interact with the DynamoDB service. To store an object we will use the method &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#DynamoDB.PutItem&#34;&gt;PutItem&lt;/a&gt; which takes as argument a reference to &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#PutItemInput&#34;&gt;PutItemInput&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; All of the AWS service have the same logic and work the same way: Action takes as a parameter a reference to a type ActionInput and returns a type ActionOutput.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how to create a &lt;code&gt;PutItemInput&lt;/code&gt; element from a &lt;code&gt;Product&lt;/code&gt; type.&lt;/p&gt;

&lt;h4 id=&#34;the-dynamodb-item&#34;&gt;the Dynamodb Item&lt;/h4&gt;

&lt;p&gt;The two mandatory fields I will use for the &lt;code&gt;PutItemInput&lt;/code&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableName&lt;/code&gt; (which is Product in my case)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Item&lt;/code&gt; (which obviously hold what to store)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other fields exists, but to be honest, I don&amp;rsquo;t know whether I need them by now.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Item&lt;/code&gt; expects a map whose key is the field name (In our case it can be &amp;ldquo;SKU&amp;rdquo;, &amp;ldquo;ProductFamily&amp;rdquo; or anything) and whose value is a reference to the special type &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/#AttributeValue&#34;&gt;AttributeValue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the documentation the definition is:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AttributeValue Represents the data for an attribute. You can set one, and only one, of the elements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The AttributeValue is &lt;em&gt;typed&lt;/em&gt; (The types are described &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html&#34;&gt;here&lt;/a&gt;)
Therefore our informations (remember the &lt;code&gt;map[string]inteface{}&lt;/code&gt;) must be &amp;ldquo;convrted&amp;rdquo; to a dynamodb format.
This task has been made easy by using the package &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html&#34;&gt;dynamodbattribute&lt;/a&gt; which does it for us:&lt;/p&gt;

&lt;p&gt;To fill the item I need to loop for every product in the object &lt;code&gt;pd&lt;/code&gt; and create an item:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;range&lt;/span&gt; pd.Products {
      item[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SKU&amp;quot;&lt;/span&gt;], err = dynamodbattribute.Marshal(k)
      item[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ProductFamily&amp;quot;&lt;/span&gt;], err = dynamodbattribute.Marshal(v.ProductFamily)
      item[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Attributes&amp;quot;&lt;/span&gt;], err = dynamodbattribute.Marshal(v.Attributes)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once I have an Item, I can create the parameters and send the request to the DB:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Item:      item,
      TableName: aws.String(config.TableName),
}
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Now put the item, discarding the result&lt;/span&gt;
_ , err = svc.PutItem(params)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;execution-and-conclusion&#34;&gt;Execution and conclusion&lt;/h1&gt;

&lt;p&gt;Once compiled I can run the program that will take a couple of minute to execute (it can easily be optimized simply by processing each offer in a separate goroutine).
Then I can find the informations in my DB:
&lt;img src=&#34;https://blog.owulveryck.info/assets/images/bigdata/blog-dynamo-result.png&#34; alt=&#34;Result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now that I have the informations, on the same principle I can grab the prices and put a little web service in front of it.
And I could even code a little fronted for the service.&lt;/p&gt;

&lt;p&gt;I am aware that if you are not an average go programmer the code may seem tricky, but I can assure you that it is not (the whole example is less than 100 lines long including the comments).
The AWS API seems strange and not idiomatic, but it has the huge advantage to be efficient and coherent.&lt;/p&gt;

&lt;p&gt;Regarding the inventory model. it can be used for any product or even any stock and prices. It is a cheap (and yet efficient) way to manage an inventory.&lt;/p&gt;

&lt;h1 id=&#34;full-code&#34;&gt;Full code&lt;/h1&gt;

&lt;p&gt;The full code of the example can be found on my &lt;a href=&#34;https://gist.github.com/owulveryck/f9665470e8334e8609434feeeddc6071&#34;&gt;gist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Image reKognition with a webcam, go and AWS.</title>
      <link>https://blog.owulveryck.info/2016/12/16/image-rekognition-with-a-webcam-go-and-aws./index.html</link>
      <pubDate>Fri, 16 Dec 2016 14:51:18 +0100</pubDate>
      
      <guid>https://blog.owulveryck.info/2016/12/16/image-rekognition-with-a-webcam-go-and-aws./index.html</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a while since I last posted something. I will fill the gap with a quick post about &lt;em&gt;rekognition&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/rekognition/?nc1=h_ls&#34;&gt;rekognition&lt;/a&gt; is a service from AWS that is described as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Deep learning-based image recognition&lt;/p&gt;

&lt;p&gt;Search, verify, and organize millions of images&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this light post, I will present a simple method to grab a picture from my webcam, send it to rekognition and display the result.&lt;/p&gt;

&lt;p&gt;The part of the result I will focus on is the emotion. In other word, I will ask amazon: &amp;ldquo;An I happy?&amp;rdquo;.&lt;/p&gt;

&lt;h1 id=&#34;getting-the-picture-from-the-webcam&#34;&gt;Getting the picture from the webcam&lt;/h1&gt;

&lt;p&gt;I am using the package &lt;a href=&#34;github.com/blackjack/webcam&#34;&gt;github.com/blackjack/webcam&lt;/a&gt; to grab the picture.&lt;/p&gt;

&lt;h2 id=&#34;capabilities-of-the-webcam-and-image-format&#34;&gt;Capabilities of the webcam and image format&lt;/h2&gt;

&lt;p&gt;My webcam is handling the MJPEG format.
Therefore, after the creation of a &lt;em&gt;cam&lt;/em&gt; object and set the correct settings to grab mjpeg, I can read a frame in JPEG:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ...
cam, err := webcam.Open(&amp;quot;/dev/video0&amp;quot;) // Open webcam
// ...
// Setting the format:
_,_,_, err := cam.SetImageFormat(format, uint32(size.MaxWidth), uint32(size.MaxHeight))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;format&lt;/code&gt; is of type &lt;code&gt;uint32&lt;/code&gt; and computable thanks to the informations present in &lt;a href=&#34;http://lxr.free-electrons.com/source/include/uapi/linux/videodev2.h&#34;&gt;/usr/include/linux/videodev2.h&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MJPEG is: 1196444237&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: To be honest, I did not evaluate the FOURCC method; I have requested the supported format of my webcam with their descriptions :)&lt;/p&gt;

&lt;h2 id=&#34;grabbing-the-picture&#34;&gt;Grabbing the picture&lt;/h2&gt;

&lt;p&gt;In a endless &lt;code&gt;for&lt;/code&gt; loop, a frame is read with a call to &lt;code&gt;ReadFrame&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for {
    timeout := uint32(5) //5 seconds
    err = cam.WaitForFrame(timeout)
    frame, err := cam.ReadFrame()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;aws&#34;&gt;AWS&lt;/h1&gt;

&lt;p&gt;The API to import to use the service is &lt;code&gt;github.com/aws/aws-sdk-go/service/rekognition&lt;/code&gt; and is documented here: &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/&#34;&gt;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The operation that I am using to detect the emotion is &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#Rekognition.DetectFaces&#34;&gt;DetectFaces&lt;/a&gt; that takes an pointer to &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#DetectFacesInput&#34;&gt;DetectFacesInput&lt;/a&gt; with is composed of a pointer to an &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#Image&#34;&gt;Image&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;creating-the-input&#34;&gt;Creating the input&lt;/h2&gt;

&lt;p&gt;The first thing that needs to be created is the &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#Image&#34;&gt;Image&lt;/a&gt; object from our &lt;code&gt;frame&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if len(frame) != 0 {
    image := &amp;amp;rekognition.Image{ // Required
        Bytes: frame,
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we create the DetectFacesInput:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;params := &amp;amp;rekognition.DetectFacesInput{
        Image: image,
        Attributes: []*string{
                aws.String(&amp;quot;ALL&amp;quot;), 
        },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;ALL&lt;/code&gt; attributes is present, otherwise AWS does not return the complete description of what it has found.&lt;/p&gt;

&lt;h2 id=&#34;sending-the-query&#34;&gt;Sending the query&lt;/h2&gt;

&lt;h3 id=&#34;pricing-notice-and-warning&#34;&gt;Pricing notice and &lt;strong&gt;warning&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The price of the service as of today is 1 dollar per 1000 request. That sounds cheap, but at 25 FPS, this may cost a lot.
Therefore, I have set up a read request that only process a picture if we press &lt;em&gt;enter&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;bufio.NewReader(os.Stdin).ReadBytes(&#39;\n&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;session&#34;&gt;Session&lt;/h3&gt;

&lt;p&gt;As usual, to query AWS we need to create a session:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var err error
sess, err = session.NewSession(&amp;amp;aws.Config{Region: aws.String(&amp;quot;us-east-1&amp;quot;)})
if err != nil {
    fmt.Println(&amp;quot;failed to create session,&amp;quot;, err)
    return
}
svc = rekognition.New(sess)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: The &lt;code&gt;session&lt;/code&gt; library will take care of connections informations such as environment variables like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AWS_SECRET_ ACCESS_KEY_ID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;query-and-result&#34;&gt;Query and result&lt;/h3&gt;

&lt;p&gt;Simply send the query&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;esp, err := svc.DetectFaces(params)

if err != nil {
        fmt.Println(err.Error())
        return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is of type &lt;a href=&#34;http://docs.aws.amazon.com/sdk-for-go/api/service/rekognition/#DetectFacesOutput&#34;&gt;DetectFacesOutput&lt;/a&gt;.
This type is composed of a array of FaceDetails because obviously there can me more than one person per image.
So we will loop and display the emotion for each face detected:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for i, fd := range resp.FaceDetails {
        fmt.Printf(&amp;quot;The person %v is &amp;quot;, i)
        for _, e := range fd.Emotions {
                fmt.Printf(&amp;quot;%v, &amp;quot;, *e.Type)
        }
        fmt.Printf(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;run&#34;&gt;Run:&lt;/h1&gt;

&lt;pre&gt;
Resulting image format: MJPEG (320x240)
Press enter to process 
The person 0 is HAPPY, CONFUSED, CALM, 
&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s all folks. The full code can be found &lt;a href=&#34;https://gist.github.com/owulveryck/33753125afa6284cd5dbbb1bd4d1eb54&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the test I made, I was always happy. I&amp;rsquo;ve tried to be angry or sad, without success&amp;hellip; Maybe I have a happy face.
I should try with someone else maybe.&lt;/p&gt;

&lt;p&gt;The service is nice and opens the door to a lot of applications:
For example to monitor my home and sends an alert if someone is in my place and &lt;strong&gt;not from my family&lt;/strong&gt; (or not the cat :).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>