<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rest on Olivier Wulveryck&#39;s Tech Blog</title>
    <link>https://blog.owulveryck.info/tags/rest.html</link>
    <description>Recent content in Rest on Olivier Wulveryck&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>olivier.wulveryck@gmail.com (Olivier Wulveryck)</managingEditor>
    <webMaster>olivier.wulveryck@gmail.com (Olivier Wulveryck)</webMaster>
    <copyright>All rights reserved - 2015/2016</copyright>
    <lastBuildDate>Tue, 17 Nov 2015 10:05:42 +0000</lastBuildDate>
    <atom:link href="https://blog.owulveryck.info/tags/rest.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Playing with (Openstack) Keystone</title>
      <link>https://blog.owulveryck.info/2015/11/17/playing-with-openstack-keystone/index.html</link>
      <pubDate>Tue, 17 Nov 2015 10:05:42 +0000</pubDate>
      <author>olivier.wulveryck@gmail.com (Olivier Wulveryck)</author>
      <guid>https://blog.owulveryck.info/2015/11/17/playing-with-openstack-keystone/index.html</guid>
      <description>

&lt;p&gt;In the cloud computing, alongside of the hosting monsters such as amazon or google, there is the &lt;a href=&#34;https://www.openstack.org&#34;&gt;Openstack Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Openstack is not a single software, it is more a galaxy of components aim to control the infrastructure, such as hardware pools, storage, network.
The management can then be done via a Web based interface or via a bunch of RESTful API.&lt;/p&gt;

&lt;p&gt;I would like to evaluate its identity service named &lt;a href=&#34;http://docs.openstack.org/developer/keystone/&#34;&gt;keystone&lt;/a&gt; and use it as a AuthN and AuthZ backend for my simple_iaas example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; : I will consider that the openstack keystone is installed (The release I&amp;rsquo;m using is &lt;em&gt;liberty&lt;/em&gt;). As I don&amp;rsquo;t want to rewrite an installation procedure as many exists already on the web. For my tests, I&amp;rsquo;m using an keystone installation from sources in a Ubuntu VM&lt;/p&gt;

&lt;h1 id=&#34;my-goal&#34;&gt;My goal&lt;/h1&gt;

&lt;p&gt;My goal is to have a webservice that will protect the scopes of my IAAS.
I may declare two users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One may list the nodes via a GET request&lt;/li&gt;
&lt;li&gt;The other one may also create and destroy nodes via POST and DELETE request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is about setting up keystone so I can use it as a lab to understand the concepts and maybe achieve my goal with it.&lt;/p&gt;

&lt;h1 id=&#34;let-s-go&#34;&gt;Let&amp;rsquo;s go&lt;/h1&gt;

&lt;p&gt;I won&amp;rsquo;t use any external web server. Instead I will rely on the builtin Eventlet based web server.&lt;/p&gt;

&lt;p&gt;The documentation says it is deprecated, indeed I will use it for testing purpose, so that will do the job.&lt;/p&gt;

&lt;h2 id=&#34;the-wsgi-pipeline-configuration&#34;&gt;The WSGI pipeline configuration&lt;/h2&gt;

&lt;p&gt;To be honest, I don&amp;rsquo;t know anything about the python ecosystem. And as it is my blog, I will write anything I&amp;rsquo;ve learned from this experience&amp;hellip;&lt;/p&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WSGI is a gateway interface for python, and my understanding is that it&amp;rsquo;s like the good old CGI we used in the beginning of this century;&lt;/li&gt;
&lt;li&gt;Is is configured by a ini file based on &lt;a href=&#34;http://pythonpaste.org/&#34;&gt;Paste&lt;/a&gt; and especially &lt;em&gt;Paste Deploy&lt;/em&gt; which is a system made for loading and configuring WSGI components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The WSGI interface is configured by a ini file as written in the &lt;a href=&#34;http://docs.openstack.org/developer/keystone/configuration.html&#34;&gt;Openstack keystone documentation&lt;/a&gt;.
This file is called &lt;code&gt;keystone-paste.ini&lt;/code&gt;. I won&amp;rsquo;t touch it and use the provided one. It sounds ok and when I start the service with &lt;code&gt;keystone-all&lt;/code&gt; I can see in the logs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-logs&#34;&gt;2015-11-17 10:05:04.918 7068 INFO oslo_service.service [-] Starting 2 workers
2015-11-17 10:05:04.920 7068 INFO oslo_service.service [-] Started child 7082
2015-11-17 10:05:04.922 7068 INFO oslo_service.service [-] Started child 7083
2015-11-17 10:05:04.925 7082 INFO eventlet.wsgi.server [-] (7082) wsgi starting up on http://0.0.0.0:35357/
2015-11-17 10:05:04.927 7068 INFO keystone.common.environment.eventlet_server [-] Starting /usr/bin/keystone-all on 0.0.0.0:5000
2015-11-17 10:05:04.927 7068 INFO oslo_service.service [-] Starting 2 workers
2015-11-17 10:05:04.930 7068 INFO oslo_service.service [-] Started child 7084
2015-11-17 10:05:04.934 7083 INFO eventlet.wsgi.server [-] (7083) wsgi starting up on http://0.0.0.0:35357/
2015-11-17 10:05:04.936 7068 INFO oslo_service.service [-] Started child 7085
2015-11-17 10:05:04.940 7085 INFO eventlet.wsgi.server [-] (7085) wsgi starting up on http://0.0.0.0:5000/
2015-11-17 10:05:04.941 7084 INFO eventlet.wsgi.server [-] (7084) wsgi starting up on http://0.0.0.0:5000/
2015-11-17 10:17:01.005 7085 INFO keystone.common.wsgi [-] GET http://localhost:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which sounds ok and a &lt;code&gt;curl&lt;/code&gt; call to the endpoint reply at least something:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;$ curl -s http://localhost:5000/v3 | jsonformat
{
  &amp;quot;version&amp;quot;: {
    &amp;quot;id&amp;quot;: &amp;quot;v3.4&amp;quot;,
    &amp;quot;links&amp;quot;: [
      {
        &amp;quot;href&amp;quot;: &amp;quot;http://localhost:5000/v3/&amp;quot;,
        &amp;quot;rel&amp;quot;: &amp;quot;self&amp;quot;
      }
    ],
    &amp;quot;media-types&amp;quot;: [
      {
        &amp;quot;base&amp;quot;: &amp;quot;application/json&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;application/vnd.openstack.identity-v3+json&amp;quot;
      }
    ],
    &amp;quot;status&amp;quot;: &amp;quot;stable&amp;quot;,
    &amp;quot;updated&amp;quot;: &amp;quot;2015-03-30T00:00:00Z&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-keystone-configuration&#34;&gt;The keystone configuration&lt;/h2&gt;

&lt;p&gt;The proper keystone configuration is done in the file &lt;code&gt;keystone.conf&lt;/code&gt;. This configuration file is decomposed into different sections as explained in the documentation.&lt;/p&gt;

&lt;h3 id=&#34;the-general-configuration-default-section&#34;&gt;The general configuration (Default section)&lt;/h3&gt;

&lt;p&gt;I will only set the &lt;code&gt;admin token&lt;/code&gt; randomly as it will be used to create the users, roles and so on.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s generate a token with &lt;code&gt;openssl rand -hex 10&lt;/code&gt; and report it to my configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[DEFAULT]
admin_token = 8a0b4eacc6a81c3bc5aa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest will use all the default values for the General configuration (the [DEFAULT] section). This means that this section may be empty or full of comments.&lt;/p&gt;

&lt;h3 id=&#34;the-assignment-configuration&#34;&gt;The assignment configuration&lt;/h3&gt;

&lt;p&gt;In this section, we choose the driver for the assignment service.
This purpose of this service is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[to] provide data about roules and role assignments
to the entities managed by the Identity and Resource services&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(source &lt;a href=&#34;http://docs.openstack.org/developer/keystone/architecture.html&#34;&gt;Keystone architecture&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I plan to use a SQL backend instead of a LDAP for my tests, so the configuration may be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[assignment]
driver = sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-authentication-plugin-configuration&#34;&gt;The authentication plugin configuration&lt;/h3&gt;

&lt;p&gt;Keystone supports authentication plugins; those plugins are specified in the &lt;code&gt;[auth]&lt;/code&gt; section.
In my test, the &lt;code&gt;password&lt;/code&gt; plugin will be used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[auth]
methods = password
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-credentials&#34;&gt;The credentials&lt;/h3&gt;

&lt;p&gt;The credentials are stored in a sql database as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[credential]
driver = sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-db-configuration&#34;&gt;The DB configuration&lt;/h3&gt;

&lt;p&gt;For my tests I will use a sqlite database as configured in this section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[database]
sqlite_db = oslo.sqlite
sqlite_synchronous = true
backend = sqlalchemy
connection = sqlite:////var/lib/keystone/keystone.db

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;restart-the-keystone-server-and-play&#34;&gt;Restart the keystone server and play&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# service keystone restart
# service keystone status
● keystone.service - OpenStack Identity service
   Loaded: loaded (/lib/systemd/system/keystone.service; enabled; vendor preset: enabled)
   Active: active (running) since Tue 2015-11-17 14:47:06 GMT; 3s ago
  Process: 15505 ExecStartPre=/bin/chown keystone:keystone /var/lock/keystone /var/log/keystone /var/lib/keystone (code=exited, status=0/SUCCESS)
  Process: 15502 ExecStartPre=/bin/mkdir -p /var/lock/keystone /var/log/keystone /var/lib/keystone (code=exited, status=0/SUCCESS)
 Main PID: 15508 (keystone-all)
   CGroup: /system.slice/keystone.service
           ├─15508 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log
           ├─15523 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log
           ├─15524 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log
           ├─15525 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log
           └─15526 /usr/bin/python /usr/bin/keystone-all --config-file=/etc/keystone/keystone.conf --log-file=/var/log/keystone/keystone.log

Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.479 15508 INFO oslo_service.service [-] Started child 15523
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.482 15508 INFO oslo_service.service [-] Started child 15524
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.486 15508 INFO keystone.common.environment.eventlet_server [-] Starting /usr/bin/keystone-all on 0.0.0.0:5000
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.490 15508 INFO oslo_service.service [-] Starting 2 workers
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.491 15523 INFO eventlet.wsgi.server [-] (15523) wsgi starting up on http://0.0.0.0:35357/
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.493 15508 INFO oslo_service.service [-] Started child 15525
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.499 15524 INFO eventlet.wsgi.server [-] (15524) wsgi starting up on http://0.0.0.0:35357/
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.502 15508 INFO oslo_service.service [-] Started child 15526
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.506 15525 INFO eventlet.wsgi.server [-] (15525) wsgi starting up on http://0.0.0.0:5000/
Nov 17 14:47:08 UBUNTU keystone[15508]: 2015-11-17 14:47:08.510 15526 INFO eventlet.wsgi.server [-] (15526) wsgi starting up on http://0.0.0.0:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so far so good&amp;hellip; let&amp;rsquo;s check if the DB is here now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# sqlite3 /var/lib/keystone/keystone.db
SQLite version 3.8.11.1 2015-07-29 20:00:57
Enter &amp;quot;.help&amp;quot; for usage hints.
sqlite&amp;gt; .tables
access_token            identity_provider       revocation_event
assignment              idp_remote_ids          role
config_register         mapping                 sensitive_config
consumer                migrate_version         service
credential              policy                  service_provider
domain                  policy_association      token
endpoint                project                 trust
endpoint_group          project_endpoint        trust_role
federation_protocol     project_endpoint_group  user
group                   region                  user_group_membership
id_mapping              request_token           whitelisted_config
sqlite&amp;gt; .quit
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;interacting-with-openstack&#34;&gt;Interacting with openstack&lt;/h2&gt;

&lt;p&gt;A tools called &lt;a href=&#34;http://docs.openstack.org/developer/python-openstackclient/command-list.html&#34;&gt;python-openstackclient&lt;/a&gt; is available in my ubuntu release and will be used for testing purpose.&lt;/p&gt;

&lt;p&gt;The binary provided is &lt;code&gt;openstack&lt;/code&gt; (&lt;code&gt;dpkg-query -L python-openstackclient | grep bin&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&#34;creating-a-user&#34;&gt;Creating a user&lt;/h3&gt;

&lt;p&gt;We need to define a couple of environment variables to be able to connect to the keystone server with the &lt;code&gt;root&lt;/code&gt; power:&lt;/p&gt;

&lt;p&gt;I will create a simple file that I will source when I need to interact as admin of keystone&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; admin.sh
# The value of admin_token defined in the keystone.conf
export OS_TOKEN=8a0b4eacc6a81c3bc5aa 
# This is the default value if not overridden by the directive admin_endpoint
export OS_URL=http://localhost:35357/v2.0 
export OS_IDENTITY_API_VERSION=3
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and another file to unset those variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; noadmin.sh 
unset OS_TOKEN
unset OS_URL
unset OS_IDENTITY_API_VERSION
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we create the user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack user create olivier
&#39;links&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then set its password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack user set --password-prompt olivier
User Password:
Repeat User Password:
&#39;users&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And see if it&amp;rsquo;s actually here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack user list
+----------------------------------+---------+
| ID                               | Name    |
+----------------------------------+---------+
| c80f5244c7d3486fbf4059b7197b4770 | olivier |
+----------------------------------+---------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-project&#34;&gt;Creating a project&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;openstack project create --description &#39;demo project&#39; demo&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;assigning-the-admin-role&#34;&gt;Assigning the admin role&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s first get the role list&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack role list
+----------------------------------+----------+
| ID                               | Name     |
+----------------------------------+----------+
| 5f772b617b5d4758badb7746934124e8 | admin    |
| 9fe2ff9ee4384b1894a90878d3e92bab | _member_ |
+----------------------------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add the admin right to the user &lt;code&gt;olivier&lt;/code&gt; for the project &lt;code&gt;demo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack role add --user olivier --project 0e07a734d54e4f3799a31768b13a38c2 admin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-a-token&#34;&gt;Getting a token&lt;/h2&gt;

&lt;h3 id=&#34;with-the-openstack-tool&#34;&gt;With the openstack tool&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve a default domain, I&amp;rsquo;ve setup a demo project, and assigne the my user the admin role for testing purpose.
I may now be able to generate an access token&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-project-name demo token issue
Expecting to find domain in project - the server could not comply with the request since it is either malformed or otherwise incorrect. The client is assumed to be in error. (HTTP 400) (Request-ID: req-09cad46b-9a5f-4b0f-8f2b-82b4442ed999)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, now add the domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-project-name demo --os-domain-name default token issue
Authentication cannot be scoped to multiple targets. Pick one of: project, domain, trust or unscoped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Too bad, remove the project&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-domain-name default token issue
The request you have made requires authentication. (HTTP 401) (Request-ID: req-59c39895-8e96-42c4-b5c5-1477001da618)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still no luck&amp;hellip; Google gave me a lot of answers, but I couldn&amp;rsquo;t figure whether it was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a bug&lt;/li&gt;
&lt;li&gt;a misconfiguration of the service&lt;/li&gt;
&lt;li&gt;a bad usage of the tools&lt;/li&gt;
&lt;li&gt;a totally bad apprehension of the product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I may continue to experiment, but I&amp;rsquo;m far from my goal actually, and I hate the idea of being lost. no help from Google, so DIY method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;openstack client in debug mode with &amp;ndash;debug&lt;/li&gt;
&lt;li&gt;keystone in debug with a &lt;code&gt;debug=true&lt;/code&gt; directive in &lt;code&gt;keystone.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The message is now clear:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-11-18 10:37:33.337 7164 WARNING keystone.common.wsgi [req-27dadee6-51d9-475d-a426-99e3b4f77f4a - - - - -] Authorization failed. User c80f5244c7d3486fbf4059b7197b4770 has no access to domain default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s re-set the password, just in case, as done in the previous section of this post and try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-project-name demo --os-domain-name default token issue
...
Unauthorized: User c80f5244c7d3486fbf4059b7197b4770 has no access to domain default (Disable debug mode to suppress these details.)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, let&amp;rsquo;s add &lt;code&gt;olivier&lt;/code&gt; as admin of the Default domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source admin.sh
openstack role add --user olivier --domain Default admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And try again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source noadmin.sh
openstack --os-auth-url http://localhost:5000/v3 --os-username olivier --os-password olivier --os-auth-type=password --os-domain-name Default token issue
+-----------+----------------------------------+
| Field     | Value                            |
+-----------+----------------------------------+
| domain_id | default                          |
| expires   | 2015-11-18T11:44:23.325817Z      |
| id        | 0525e008619748848735d9122f8f2e81 |
| user_id   | c80f5244c7d3486fbf4059b7197b4770 |
+-----------+----------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bingo!!!&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s enough information for this first post about OpenStack keystone.
By now, I will continue the investigations and use this installation as a &lt;em&gt;lab&lt;/em&gt; to understand the full concepts of this identity management software.&lt;/p&gt;

&lt;p&gt;I leave my test with a bitter taste.&lt;/p&gt;

&lt;p&gt;I may not have understood all the concepts behind the scene, but I can say that this product, at least in the current release, is by far too complex and has too much contributors to evaluate it in a simple way.
Therefore, the quite complete but messy documentation, a mix in the releases and some major incompatibilities in the tools using V2.0 and V3 gave me a bad impression.
The tool may be useful, but the TCO sounds high and the entry ticket is not negligible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple IaaS API documentation with swagger</title>
      <link>https://blog.owulveryck.info/2015/11/11/simple-iaas-api-documentation-with-swagger/index.html</link>
      <pubDate>Wed, 11 Nov 2015 14:24:43 +0100</pubDate>
      <author>olivier.wulveryck@gmail.com (Olivier Wulveryck)</author>
      <guid>https://blog.owulveryck.info/2015/11/11/simple-iaas-api-documentation-with-swagger/index.html</guid>
      <description>

&lt;p&gt;In a &lt;a href=&#34;http://blog.owulveryck.info/2015/11/10/iaas-like-restfull-api-based-on-microservices/&#34;&gt;previous post&lt;/a&gt; I have explained how to develop a very simple API server.&lt;/p&gt;

&lt;p&gt;Without the associated documentation, the API will be useless. Let&amp;rsquo;s see how we can use &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;swagger-ui&lt;/a&gt;
in this project to generate a beautiful documentation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; I&amp;rsquo;m blogging and experimenting, of course, in the &amp;ldquo;real&amp;rdquo; life, it&amp;rsquo;s a lot better to code the API interface before implementing the middleware.&lt;/p&gt;

&lt;h1 id=&#34;about-swagger&#34;&gt;About Swagger&lt;/h1&gt;

&lt;p&gt;Swagger is a framework. On top of the swagger project is composed of several tools.&lt;/p&gt;

&lt;p&gt;The entry point is to write the API interface using the &lt;a href=&#34;http://swagger.io/specification/&#34;&gt;Swagger Formal Specification&lt;/a&gt;. I will the use the &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;swagger-ui&lt;/a&gt; to display the documentation.
The swagger-ui can be modified and recompiled, but I won&amp;rsquo;t do it (as I don&amp;rsquo;t want to play with nodejs). Instead I will rely on the &amp;ldquo;dist&amp;rdquo; part which can be used &amp;ldquo;as-is&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;defining-the-api-interface-with-swagger&#34;&gt;Defining the API interface with Swagger&lt;/h1&gt;

&lt;h2 id=&#34;header-and-specification-version&#34;&gt;Header and specification version:&lt;/h2&gt;

&lt;p&gt;Swagger comes with an editor which can be used &lt;a href=&#34;http://editor.swagger.io/#/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will use swagger spec 2.0, as I don&amp;rsquo;t see any good reason not to do so. Moreover, I will describe the API using the &lt;code&gt;YAML&lt;/code&gt; format instead of the JSON format to be human-friendly.&lt;/p&gt;

&lt;p&gt;Indeed, in my &lt;code&gt;YAML&lt;/code&gt; skeleton the header of my specs will then look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;swagger: &#39;2.0&#39;
info:
  version: 1.0.0
    title: &#39;Very Simple IAAS&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-node-creation-a-post-method&#34;&gt;The node creation: a POST method&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s document the Node creation (as it is the method that we have implemented before).&lt;/p&gt;

&lt;p&gt;The node creation is a &lt;code&gt;POST&lt;/code&gt; method, that produces a JSON in output with the request ID of the node created.&lt;/p&gt;

&lt;p&gt;The responses code may be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;202 : if the request has been taken in account&lt;/li&gt;
&lt;li&gt;400 : when the request is not formatted correctly&lt;/li&gt;
&lt;li&gt;500 : if any unhanldled exception occurred&lt;/li&gt;
&lt;li&gt;502 : if the backend is not accessible (either the RPC server or the backend)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, the YAML spec will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;paths:
  /v1/nodes:
    post:
      description: Create a node
      produces:
        - application/json
      responses:
        202:
          description: A request ID.
        400:
          description: |
            When the request is malformated or when mandatory arguments are missing
        500:
          desctiption: Unhandled error
        502:
          description: Execution backend not available
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far so good, let&amp;rsquo;s continue with the input payload. The payload will be formatted in JSON, so I add this directive to the model:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;consumes:
  - application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve decided in my previous post that 6 parameters were needed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the kind of os&lt;/li&gt;
&lt;li&gt;the size of the machine&lt;/li&gt;
&lt;li&gt;the initial disk size allocated&lt;/li&gt;
&lt;li&gt;the lease (in days)&lt;/li&gt;
&lt;li&gt;the environment&lt;/li&gt;
&lt;li&gt;the description&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the parameters will compose a payload and therefore will be present in the body of the request.
The YAML representation of the parameters array is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;parameters:
  - name: kind
    in: body
    description: &amp;quot;The OS type&amp;quot;
    required: true
  - name: size 
    in: body
    description: &amp;quot;The size of the (virtual) Machine&amp;quot;
    required: true
  - name: disksize
    in: body
    description: &amp;quot;The initial disk capacity allocated&amp;quot;
    required: true
  - name: leasedays
    in: body
    description: &amp;quot;The lease (in days)&amp;quot;
    required: true
  - name: environment_type
    in: body
    description: &amp;quot;The target environment&amp;quot;
  - name: description
    in: body
    description: &amp;quot;The target environment&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sounds ok, but when I test this implementation in the swagger editor for validation, I get this error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Swagger Error
Data does not match any schemas from &#39;oneOf&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;STFWing and RTFMing&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;in the &lt;a href=&#34;http://swagger.io/specification/#parameterObject&#34;&gt;Specifications&lt;/a&gt;, I have found this line:&lt;/p&gt;

&lt;p&gt;&lt;html&gt;
If &lt;a href=&#34;#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&amp;ldquo;body&amp;rdquo;&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field Name&lt;/th&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a name=&#34;parameterSchema&#34;&gt;&lt;/a&gt;schema&lt;/td&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;#schemaObject&#34;&gt;Schema Object&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;stwrong&gt;Required.&lt;/strong&gt; The schema defining the type used for the body parameter.&lt;/td&gt;
&lt;/table&gt;
&lt;/html&gt;&lt;/p&gt;

&lt;p&gt;Therefore, I should set a schema object for every parameter in order to define its type. In this example, I don&amp;rsquo;t want to go too deeply into the swagger specification, so I won&amp;rsquo;t define any type.&lt;/p&gt;

&lt;p&gt;So I have tested the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;parameters:
  - name: kind
    in: body
    description: &amp;quot;The OS type&amp;quot;
    required: true
    schema:
      type: string
  - name: size 
    in: body
    description: &amp;quot;The size of the (virtual) Machine&amp;quot;
    required: true
    schema:
      type: string
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And again, I had a validation error from the editor:&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;icon&#34;&gt;✖&lt;/span&gt; Swagger Error&lt;/h5&gt;&lt;p class=&#34;error-description&#34; ng-bind-html=&#34;error.description&#34;&gt;Operation cannot have multiple body parameters&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;RTFMing&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Body - The payload that&amp;rsquo;s appended to the HTTP request.
Since there can only be one payload, there can only be one body parameter.
The name of the body parameter has no effect on the parameter itself and is used for documentation purposes only.
Since Form parameters are also in the payload, body and form parameters cannot exist together for the same operation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I must do, is to create a custom type &lt;em&gt;nodeRequest&lt;/em&gt; with the input fields as properties and reference it in the body.&lt;/p&gt;

&lt;p&gt;Here is the complete structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;parameters:
  - name: nodeRequest 
    in: body
    description: a node request
    required: true
    schema:
        $ref: &#39;#/definitions/NodeRequest&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the proper NodeRequest definition in the &lt;em&gt;definition&lt;/em&gt; area:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-YAML&#34;&gt;definitions:
  NodeRequest:
    description: A Node Request object
    properties:
      kind:
        type: string
        description: The OS type
      size:
        type: string
        description: The size of the (virtual) machine
      disksize:
        type: integer
        format: int32
        description: The initial disk capacity size (in GB)
      leasedays:
        type: integer
        format: int32
        description: The lease
      environment_type:
        type: string
        description: the target environment
      description:
        type: string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK ! The swagger file is valid&amp;hellip; Now let&amp;rsquo;s glue it together with swagger-ui and serve it from the GO API server I have developed before&lt;/p&gt;

&lt;h1 id=&#34;integrating-swagger-ui&#34;&gt;Integrating swagger-ui&lt;/h1&gt;

&lt;p&gt;As written in the README in the github of the project, swagger-ui can be used &amp;ldquo;as-is&amp;rdquo; using the files in the &lt;em&gt;dist&lt;/em&gt; folder. Let&amp;rsquo;s get the files from github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/tmp #  git clone https://github.com/swagger-api/swagger-ui.git
Cloning into &#39;swagger-ui&#39;...
remote: Counting objects: 7292, done.
remote: Compressing objects: 100% (33/33), done.
remote: Total 7292 (delta 8), reused 0 (delta 0), pack-reused 7256
Receiving objects: 100% (7292/7292), 19.20 MiB | 1021.00 KiB/s, done.
Resolving deltas: 100% (3628/3628), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s checkout our project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/tmp # git clone https://github.com/owulveryck/example-iaas.git 
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and move the &lt;code&gt;dist&lt;/code&gt; folder into the project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mv /tmp/swagger-ui/dist /tmp/example-iaas
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-a-route-to-the-go-server-to-serve-the-static-files&#34;&gt;Adding a route to the GO server to serve the static files&lt;/h2&gt;

&lt;p&gt;I cannot simply add a route in the &lt;code&gt;routes.go&lt;/code&gt; file for this very simple reason:
The loop used in the &lt;code&gt;router.go&lt;/code&gt; is using the &lt;code&gt;Path&lt;/code&gt; method, and to serve the content of the directory, I need to use the &lt;code&gt;PathPrefix&lt;/code&gt; method (see &lt;a href=&#34;http://www.gorillatoolkit.org/pkg/mux#Route.PathPrefix&#34;&gt;The Gorilla Documentation&lt;/a&gt; for more information).&lt;/p&gt;

&lt;p&gt;To serve the content, I add this entry to the muxrouter in the &lt;code&gt;router.go&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;router.
       Methods(&amp;quot;GET&amp;quot;).
       PathPrefix(&amp;quot;/apidocs&amp;quot;).
       Name(&amp;quot;Apidocs&amp;quot;).
       Handler(http.StripPrefix(&amp;quot;/apidocs&amp;quot;, http.FileServer(http.Dir(&amp;quot;./dist&amp;quot;))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I start the server and point my browser to &lt;a href=&#34;http://localhost:8080/apidocs..&#34;&gt;http://localhost:8080/apidocs..&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wait, nothing is displayed&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;the-final-test&#34;&gt;The final test&lt;/h1&gt;

&lt;p&gt;As I serve the files from the &lt;code&gt;./dist&lt;/code&gt; directory, what I need to do is to move my &lt;code&gt;swagger.yaml&lt;/code&gt; spec file into the dist subfolder and tell swagger to read it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Et voilà!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img class=&#34;img-square img-responsive&#34; src=&#34;https://blog.owulveryck.info/assets/images/swagger.png&#34; alt=&#34;Result&#34;/&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h1 id=&#34;final-word&#34;&gt;Final word&lt;/h1&gt;

&lt;p&gt;As you can see, there is a &amp;ldquo;Try out&amp;rdquo; button, which triggers a &lt;code&gt;curl&lt;/code&gt; command&amp;hellip; Very helpful to enter a test driven development mode.&lt;/p&gt;

&lt;p&gt;On top of that swagger is really helpful and may be a great tool to synthesize the need of a client in term of an interface.
Once the API is fully implemented, any client binding may also be generated with the swagger framework.&lt;/p&gt;

&lt;p&gt;No not hesitate to clone the source code from &lt;a href=&#34;https://github.com/owulveryck/example-iaas&#34;&gt;github&lt;/a&gt; and test the swagger.yaml file in the editor to see how the bindings are generated&lt;/p&gt;

&lt;p&gt;You can find all the codes in the github repository &lt;a href=&#34;https://github.com/owulveryck/example-iaas&#34;&gt;here&lt;/a&gt; in the branch &lt;code&gt;simple-iaas-api-documentation-with-swagger&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The final YAML file can be found &lt;a href=&#34;https://github.com/owulveryck/example-iaas/blob/simple-iaas-api-documentation-with-swagger/swagger.yaml&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IaaS-like RESTfull API based on microservices</title>
      <link>https://blog.owulveryck.info/2015/11/10/iaas-like-restfull-api-based-on-microservices/index.html</link>
      <pubDate>Tue, 10 Nov 2015 08:56:36 +0100</pubDate>
      <author>olivier.wulveryck@gmail.com (Olivier Wulveryck)</author>
      <guid>https://blog.owulveryck.info/2015/11/10/iaas-like-restfull-api-based-on-microservices/index.html</guid>
      <description>

&lt;h1 id=&#34;abstracts&#34;&gt;Abstracts&lt;/h1&gt;

&lt;p&gt;Recently, I&amp;rsquo;ve been looking at the principles of a middleware layer and especially on how a RESTFULL API could glue different IT services together.&lt;/p&gt;

&lt;p&gt;I am reading more and more about the &amp;ldquo;API economy&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also seen this excellent video made by &lt;a href=&#34;https://www.youtube.com/watch?v=tIm8UkSf6RA&amp;amp;list=PLDWZ5uzn69ezRJYeWxYNRMYebvf8DerHd&#34;&gt;Mat Ryer&lt;/a&gt; about how to code an API in GO and why go would be the perfect language to code such a portal.&lt;/p&gt;

&lt;p&gt;The problem I&amp;rsquo;m facing is that in the organization I&amp;rsquo;m working for, the developments are heterogeneous and therefore you can find &lt;em&gt;ruby&lt;/em&gt; teams as well as &lt;em&gt;python&lt;/em&gt; teams and myself as a &lt;em&gt;go&lt;/em&gt; team (That will change in the future anyway)
The key point is that I would like my middleware to serve as an entry point to the services provided by the department.&lt;/p&gt;

&lt;p&gt;We (as an &amp;ldquo;ops&amp;rdquo; team) would then be able to present the interface via, for example, a &lt;a href=&#34;http://swagger.io&#34;&gt;swagger&lt;/a&gt; like interface, take care of the API and do whatever RPC to any submodule.&lt;/p&gt;

&lt;h1 id=&#34;an-example-a-iaas-like-interface&#34;&gt;An example: a IAAS like interface&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s consider a node compute lifecycle.&lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;d like to be able to do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to create a node&lt;/li&gt;
&lt;li&gt;to update a node (maybe)&lt;/li&gt;
&lt;li&gt;to delete a node&lt;/li&gt;
&lt;li&gt;to get the status of the node&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-backend&#34;&gt;The backend&lt;/h2&gt;

&lt;p&gt;The backend is whatever service, able to create a node, such as openstack, vmware vcac, juju, &amp;hellip;
Thoses services usually provide RESTfull API.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve seen in my experience, that usually, the API are given with a library in a so called &amp;ldquo;modern language&amp;rdquo;.
This aim to simplify the development of the clients.
Sometimes this library may also be developed by an internal team that will take care of the maintenance.&lt;/p&gt;

&lt;h2 id=&#34;the-library&#34;&gt;The library&lt;/h2&gt;

&lt;p&gt;In my example, we will consider that the library is a simple &lt;em&gt;gem&lt;/em&gt; file developed in ruby.
Therefore, our service will be a simple server that will get RPC calls, call the good method in the &lt;em&gt;gemfile&lt;/em&gt;
and that will, &lt;em&gt;in fine&lt;/em&gt; transfer it to the backend.&lt;/p&gt;

&lt;h2 id=&#34;the-restfull-api&#34;&gt;The RestFull API.&lt;/h2&gt;

&lt;p&gt;I will use the example described &lt;a href=&#34;http://thenewstack.io/make-a-restful-json-api-go/&#34;&gt;here&lt;/a&gt; as a basis for this post.
Of course there are many other examples and excellent go packages that may be used, but according to Mat Ryer, I will stick to the idiomatic approach.&lt;/p&gt;

&lt;h2 id=&#34;the-glue-msgpack-rpc&#34;&gt;The glue: MSGPACK-RPC&lt;/h2&gt;

&lt;p&gt;There are several methods for RPC-ing between different languages. Ages ago, there was xml-rpc; then there has been json-rpc;
I will use &lt;a href=&#34;https://github.com/msgpack-rpc/msgpack-rpc&#34;&gt;msgpack-rpc&lt;/a&gt; which is a binary, json base codec.
The communication between the Go client and the ruby server will be done over TCP via HTTP for example.&lt;/p&gt;

&lt;p&gt;Later on, outside of the scope of this post, I may use ZMQ (as I have already blogged about 0MQ communication between those languages).&lt;/p&gt;

&lt;h1 id=&#34;the-implementation-of-the-client-the-go-part&#34;&gt;The implementation of the Client (the go part)&lt;/h1&gt;

&lt;p&gt;I will describe here the node creation via a POST method, and consider that the other methods could be implemented in a similar way.&lt;/p&gt;

&lt;h2 id=&#34;the-signature-of-the-node-creation&#34;&gt;The signature of the node creation&lt;/h2&gt;

&lt;p&gt;Here is the expected signature for creating a compute element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;kind&amp;quot;:&amp;quot;linux&amp;quot;,
    &amp;quot;size&amp;quot;:&amp;quot;S&amp;quot;,
    &amp;quot;disksize&amp;quot;:20,
    &amp;quot;leasedays&amp;quot;:1,
    &amp;quot;environment_type&amp;quot;:&amp;quot;dev&amp;quot;,
    &amp;quot;description&amp;quot;:&amp;quot;my_description&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The corresponding GO structure is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type NodeRequest struct {
    Kind string `json:&amp;quot;kind&amp;quot;` // Node kind (eg linux)
    Size string `json:&amp;quot;size&amp;quot;` // size
    Disksize         int    `json:&amp;quot;disksize&amp;quot;`
    Leasedays        int    `json:&amp;quot;leasedays&amp;quot;`
    EnvironmentType  string `json:&amp;quot;environment_type&amp;quot;`
    Description      string `json:&amp;quot;description&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-route&#34;&gt;The route&lt;/h2&gt;

&lt;p&gt;The Middleware is using the &lt;a href=&#34;http://www.gorillatoolkit.org/pkg/mux&#34;&gt;gorilla mux package&lt;/a&gt;.
According the description, I will add an entry in the routes array (into the &lt;em&gt;routes.go&lt;/em&gt; file):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Route{
    &amp;quot;NodeCreate&amp;quot;,
    &amp;quot;POST&amp;quot;,
    &amp;quot;/v1/nodes&amp;quot;,
    NodeCreate,
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; : I am using a prefix &lt;code&gt;/v1&lt;/code&gt; for my API, for exploitation purpose.&lt;/p&gt;

&lt;p&gt;I will then create the corresponding handler in the file with this signature&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NodeCreate(w http.ResponseWriter, r *http.Request){
    var nodeRequest NodeRequest
    body, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576))
    if err != nil {
        panic(err)
    }
    if err := r.Body.Close(); err != nil {
        panic(err)
    }
    if err := json.Unmarshal(body, &amp;amp;nodeRequest); err != nil {
        w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json; charset=UTF-8&amp;quot;)
        w.WriteHeader(http.StatusBadRequest) // unprocessable entity
        if err := json.NewEncoder(w).Encode(err); err != nil {
            panic(err)
        }
    }    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s in this function that will be implemented RPC (client part). To keep it simple at the beginning,
I will instantiate a TCP connection on every call.
Don&amp;rsquo;t throw things at me, that will be changed later following the advice of Mat Ryer.&lt;/p&gt;

&lt;h2 id=&#34;the-implementation-of-the-handler&#34;&gt;The implementation of the handler&lt;/h2&gt;

&lt;h3 id=&#34;the-effective-remote-procedure-call&#34;&gt;The effective remote procedure call&lt;/h3&gt;

&lt;p&gt;To use &lt;em&gt;msgpack&lt;/em&gt; I need to import the go implementation &lt;code&gt;github.com/msgpack-rpc/msgpack-rpc-go/rpc&lt;/code&gt;.
This library will take care of the encoding/decoding of the messages.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dial the RPC server and call the &lt;code&gt;NodeCreate&lt;/code&gt; method with, as argument, the information we had from the JSON input&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    conn, err := net.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;127.0.0.1:18800&amp;quot;)
    if err != nil {
        fmt.Println(&amp;quot;fail to connect to server.&amp;quot;)
        return
    }
    client := rpc.NewSession(conn, true)
    retval, err := client.Send(&amp;quot;NodeCreate&amp;quot;, nodeRequest.Kind, nodeRequest.Size, nodeRequest.Disksize, nodeRequest.Leasedays, nodeRequest.EnvironmentType, nodeRequest.Description)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(retval)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-rpc-server-the-ruby-part&#34;&gt;The RPC server (the ruby part)&lt;/h1&gt;

&lt;p&gt;This part is written in ruby, and will take care of the effective node creation.
At first, we should install the GEM file with the command &lt;code&gt;gem install msgpack-rpc&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;msgpack/rpc&#39;
class MyHandler
    def NodeCreate(kind, size, disksize, leasedays, environmenttype, description) 
        print &amp;quot;Creating the node with parameters: &amp;quot;,kind, size, disksize, leasedays, environmenttype, description
        return &amp;quot;ok&amp;quot;
    end
end
svr = MessagePack::RPC::Server.new
svr.listen(&#39;0.0.0.0&#39;, 18800, MyHandler.new)
svr.run
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;let-s-test-it&#34;&gt;let&amp;rsquo;s test it&lt;/h1&gt;

&lt;p&gt;Launch the RPC server:
&lt;code&gt;ruby server.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then launch the API rest server&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go run *go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then perform a POST request&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -X POST -H &#39;Content-Type:application/json&#39; -H &#39;Accept:application/json&#39; -d &#39;{&amp;quot;kind&amp;quot;:&amp;quot;linux&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;S&amp;quot;,&amp;quot;disksize&amp;quot;:20,&amp;quot;leasedays&amp;quot;:1,&amp;quot;environment_type&amp;quot;:&amp;quot;dev&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;my_description&amp;quot;}&#39; -k http://localhost:8080/v1/nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should write something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015/11/10 13:56:51 POST        /v1/nodes       NodeCreate      2.520673ms
ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And something like this in the output of the ruby code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Creating the node with parameters: linux S 20 1 dev my_description
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all folks! What&amp;rsquo;s left:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To implement the other methods to be &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&#34;&gt;CRUD&lt;/a&gt;&amp;rdquo; compliant&lt;/li&gt;
&lt;li&gt;To implement an authentication and accreditation mechanism (JWT, Oauth, ?)&lt;/li&gt;
&lt;li&gt;To change the implementation of the RPC client to use a pool instead of a single connection&lt;/li&gt;
&lt;li&gt;To implement the swagger interface and documentation of the API&lt;/li&gt;
&lt;li&gt;Whatever fancy stuff you may want from a production ready interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find all the codes in the github repository &lt;a href=&#34;https://github.com/owulveryck/example-iaas&#34;&gt;here&lt;/a&gt; in the branch &lt;code&gt;iaas-like-restfull-api-based-on-microservices&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>