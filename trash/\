---
author: Olivier Wulveryck
date: 2016-10-19T07:24:51+02:00
description: How to write a Single Page Application MVC without blowing your mind with Javascript and a Framework.
draft: true
keywords:
- key
- words
tags:
- one
- two
title: SPA with Gopherjs
topics:
- topic 1
type: post
---

# Introduction

Single page application (SPA) are a standard when dealing with mobile apps.
Unfortunately, by now, JavaScript is the only programming language supported by a browser.

Therefore, to code web UI it remains a must.

## Life of an ex sysadmin who wants to code a web app: getting depressed

To make the development easier, your friend, who is "web developer" will recommend you to use a marvelous framework.
Depending on the orientation of the wind, the moon or its reading, he will encourage you to use `reactjs`, `angular`, `ember` or whatever exotic
tool.

With some recommendation from my real friends and from Google, I've started an app based on [ionic](http://ionicframework.com/) which is based on [angular](https://angularjs.org/).
As I did not know anything about angular, I've watched a (very good) [introduction](https://www.youtube.com/watch?v=i9MHigUZKEM) and followed the ionic tutorial.

So far so good...

Then I implemented a SSO with Facebook. I wrote a backend in go to handle the callback. Everything was working on my browser.

But... There was something wrong on the mobile phone version. A bug!

I tried to debug it, with Xcode, with Safari... The more I was searching, the more I had to dive into the framework.

I asked a friend and his first reply was: "which version of angular? Because in version 2 they have changed a lot of concepts"

That was too much.
I though that definitely this world made of JavaScript, frameworks, grunt, bower, gulp, npm or whatever fancy tool was not for me.
Too many work to learn something already outdated.

On top of that, I've never been a callback man, I hate them since my X11/Motif programming course. I do like CSP!

## Out of the depression!

Ok, I abandoned those tools. But I still want to code my app, and I'm not the kind of guy that easily give up.

Let's resume:

* I need a MVC, because it's the most natural way to code web ui today
* MVC is not framework dependent
* A SPA is the good choice for a mobile app and Cordova makes things easy
* Javascript is mandatory

I dig a little bit and I've found this blog post: [Do you really want an SPA framework?](https://mmikowski.github.io/no-frameworks/) that leads me to "the solution": 

I will code my controller with JQuery and gopherjs!

# Examples

I will code a little page based on bootstrap.

## A basic go code

The dynamic part will be coded in pure GO in a file called `main.go` and transpiled into javscript code with the help of the `gopherjs` command:

```bash
gopherjs build main.go -o js/app.js -m
```

To make things easier, I can add some directives in my go code in the form of a comment:

```go
package main
//go:generate gopherjs build main.go -o js/app.js -m
// +build ignore

import (
  "log"
)

func main() {
    log.Println("Hello World")
}
```

Therefore I will be able to generate my code directly with a simple call to `go generate` and it will produce the `js/app.js` file for me.

## The page

The structure of the main page is taken from bootstrap's [starter template](http://getbootstrap.com/examples/starter-template/#) 

I simply add my javascript file generated with gopherjs :

```html
<script src="js/app.js"></script>
```

If I launch my page, I will have a "hello world" written in the javascript browser of my console.

# the SPA

Now, I will implement a very basic SPA.
It will display three tabs accessible by their names (for demo purpose):

* [/#](/#)
* [/#about](/#about)
* [/#contact](/#contact)

Each tab will only display its name.


## Routing

A good SPA needs a good routing system to deal with anchor refs.

There are several implementation of gopherjs based routing mechanism.

But, for the purpose of this blog post, I will use a pure Javascript routing library: [Director.js](https://github.com/flatiron/director#routing-table). It's the router used in the todoMVC example and it will allow me to show how to interact with global javascript objects.

The first thing to do is to include the js file at the end of the `index.html`

```html
<script src="js/director.min.js"></script>
<script src="js/app.js"></script>
```

Then I will create a GO type _Router_ that will correspond to the Router objet in javascript.
The type must be __*js.Object__ 

```go
type Router struct {
    *js.Object
}
```
https://github.com/flatiron/director#adhoc-routing

